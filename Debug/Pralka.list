
Pralka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cf0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b2c  08005ea0  08005ea0  00006ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079cc  080079cc  0000911c  2**0
                  CONTENTS
  4 .ARM          00000008  080079cc  080079cc  000089cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079d4  080079d4  0000911c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079d4  080079d4  000089d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080079d8  080079d8  000089d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000011c  20000000  080079dc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000911c  2**0
                  CONTENTS
 10 .bss          000003c8  2000011c  2000011c  0000911c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004e4  200004e4  0000911c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000911c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000107d0  00000000  00000000  0000914c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c51  00000000  00000000  0001991c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fd0  00000000  00000000  0001c570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bf0  00000000  00000000  0001d540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024d14  00000000  00000000  0001e130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011d42  00000000  00000000  00042e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbfb7  00000000  00000000  00054b86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00130b3d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000045bc  00000000  00000000  00130b80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  0013513c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000011c 	.word	0x2000011c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005e88 	.word	0x08005e88

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000120 	.word	0x20000120
 80001ec:	08005e88 	.word	0x08005e88

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b590      	push	{r4, r7, lr}
 8000582:	b083      	sub	sp, #12
 8000584:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 8000586:	f001 fe0d 	bl	80021a4 <HAL_Init>
  SystemClock_Config();
 800058a:	f000 f8c5 	bl	8000718 <SystemClock_Config>
  MX_GPIO_Init();
 800058e:	f000 f957 	bl	8000840 <MX_GPIO_Init>
  MX_DMA2D_Init();
 8000592:	f000 f931 	bl	80007f8 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000596:	f000 f94b 	bl	8000830 <MX_FMC_Init>
  MX_I2C3_Init();
 800059a:	f000 f934 	bl	8000806 <MX_I2C3_Init>
  MX_LTDC_Init();
 800059e:	f000 f939 	bl	8000814 <MX_LTDC_Init>
  MX_SPI5_Init();
 80005a2:	f000 f93e 	bl	8000822 <MX_SPI5_Init>

  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 80005a6:	f000 ffed 	bl	8001584 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER, LCD_FRAME_BUFFER);
 80005aa:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 80005ae:	2000      	movs	r0, #0
 80005b0:	f001 f86a 	bl	8001688 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_Clear(LCD_COLOR_RED);
 80005b4:	4835      	ldr	r0, [pc, #212]	@ (800068c <main+0x10c>)
 80005b6:	f001 f8fb 	bl	80017b0 <BSP_LCD_Clear>
  display_program(programs[current_program]);
 80005ba:	4b35      	ldr	r3, [pc, #212]	@ (8000690 <main+0x110>)
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	4935      	ldr	r1, [pc, #212]	@ (8000694 <main+0x114>)
 80005c0:	4613      	mov	r3, r2
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	4413      	add	r3, r2
 80005c6:	00db      	lsls	r3, r3, #3
 80005c8:	440b      	add	r3, r1
 80005ca:	466c      	mov	r4, sp
 80005cc:	f103 0210 	add.w	r2, r3, #16
 80005d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005d4:	e884 0003 	stmia.w	r4, {r0, r1}
 80005d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005da:	f000 f861 	bl	80006a0 <display_program>
  /* USER CODE END 2 */

  /* Infinite loop */
  while (1)
  {
      if (HAL_GPIO_ReadPin(GPIOA, NextBut_Pin) == GPIO_PIN_SET) {
 80005de:	2102      	movs	r1, #2
 80005e0:	482d      	ldr	r0, [pc, #180]	@ (8000698 <main+0x118>)
 80005e2:	f002 fe89 	bl	80032f8 <HAL_GPIO_ReadPin>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d122      	bne.n	8000632 <main+0xb2>
          // Przejdź do następnego programu
          current_program = (current_program + 1) % NUM_PROGRAMS;
 80005ec:	4b28      	ldr	r3, [pc, #160]	@ (8000690 <main+0x110>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	3301      	adds	r3, #1
 80005f2:	4619      	mov	r1, r3
 80005f4:	4b29      	ldr	r3, [pc, #164]	@ (800069c <main+0x11c>)
 80005f6:	fba3 2301 	umull	r2, r3, r3, r1
 80005fa:	089a      	lsrs	r2, r3, #2
 80005fc:	4613      	mov	r3, r2
 80005fe:	009b      	lsls	r3, r3, #2
 8000600:	4413      	add	r3, r2
 8000602:	1aca      	subs	r2, r1, r3
 8000604:	4b22      	ldr	r3, [pc, #136]	@ (8000690 <main+0x110>)
 8000606:	601a      	str	r2, [r3, #0]
          display_program(programs[current_program]);
 8000608:	4b21      	ldr	r3, [pc, #132]	@ (8000690 <main+0x110>)
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	4921      	ldr	r1, [pc, #132]	@ (8000694 <main+0x114>)
 800060e:	4613      	mov	r3, r2
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	4413      	add	r3, r2
 8000614:	00db      	lsls	r3, r3, #3
 8000616:	440b      	add	r3, r1
 8000618:	466c      	mov	r4, sp
 800061a:	f103 0210 	add.w	r2, r3, #16
 800061e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000622:	e884 0003 	stmia.w	r4, {r0, r1}
 8000626:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000628:	f000 f83a 	bl	80006a0 <display_program>
          HAL_Delay(200); // Debounce czas
 800062c:	20c8      	movs	r0, #200	@ 0xc8
 800062e:	f001 fe2b 	bl	8002288 <HAL_Delay>
      }

      if (HAL_GPIO_ReadPin(GPIOA, LastBut_Pin) == GPIO_PIN_SET) {
 8000632:	2104      	movs	r1, #4
 8000634:	4818      	ldr	r0, [pc, #96]	@ (8000698 <main+0x118>)
 8000636:	f002 fe5f 	bl	80032f8 <HAL_GPIO_ReadPin>
 800063a:	4603      	mov	r3, r0
 800063c:	2b01      	cmp	r3, #1
 800063e:	d121      	bne.n	8000684 <main+0x104>
          // Przejdź do poprzedniego programu
          current_program = (current_program - 1 + NUM_PROGRAMS) % NUM_PROGRAMS;
 8000640:	4b13      	ldr	r3, [pc, #76]	@ (8000690 <main+0x110>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	1d19      	adds	r1, r3, #4
 8000646:	4b15      	ldr	r3, [pc, #84]	@ (800069c <main+0x11c>)
 8000648:	fba3 2301 	umull	r2, r3, r3, r1
 800064c:	089a      	lsrs	r2, r3, #2
 800064e:	4613      	mov	r3, r2
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	4413      	add	r3, r2
 8000654:	1aca      	subs	r2, r1, r3
 8000656:	4b0e      	ldr	r3, [pc, #56]	@ (8000690 <main+0x110>)
 8000658:	601a      	str	r2, [r3, #0]
          display_program(programs[current_program]);
 800065a:	4b0d      	ldr	r3, [pc, #52]	@ (8000690 <main+0x110>)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	490d      	ldr	r1, [pc, #52]	@ (8000694 <main+0x114>)
 8000660:	4613      	mov	r3, r2
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	4413      	add	r3, r2
 8000666:	00db      	lsls	r3, r3, #3
 8000668:	440b      	add	r3, r1
 800066a:	466c      	mov	r4, sp
 800066c:	f103 0210 	add.w	r2, r3, #16
 8000670:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000674:	e884 0003 	stmia.w	r4, {r0, r1}
 8000678:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800067a:	f000 f811 	bl	80006a0 <display_program>
          HAL_Delay(200); // Debounce czas
 800067e:	20c8      	movs	r0, #200	@ 0xc8
 8000680:	f001 fe02 	bl	8002288 <HAL_Delay>
      }

      HAL_Delay(100);  // Dodatkowy czas oczekiwania, żeby przyciski były dobrze odczytane
 8000684:	2064      	movs	r0, #100	@ 0x64
 8000686:	f001 fdff 	bl	8002288 <HAL_Delay>
      if (HAL_GPIO_ReadPin(GPIOA, NextBut_Pin) == GPIO_PIN_SET) {
 800068a:	e7a8      	b.n	80005de <main+0x5e>
 800068c:	ffff0000 	.word	0xffff0000
 8000690:	20000138 	.word	0x20000138
 8000694:	20000000 	.word	0x20000000
 8000698:	40020000 	.word	0x40020000
 800069c:	cccccccd 	.word	0xcccccccd

080006a0 <display_program>:
  }
  /* USER CODE END 3 */
}

/* Function to display the current selected program */
void display_program(WashingProgram program) {
 80006a0:	b084      	sub	sp, #16
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b08a      	sub	sp, #40	@ 0x28
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	f107 0c30 	add.w	ip, r7, #48	@ 0x30
 80006ac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      char buffer[40];
      sprintf(buffer, "Prog: %s", program.name);
 80006b0:	463b      	mov	r3, r7
 80006b2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80006b6:	4915      	ldr	r1, [pc, #84]	@ (800070c <display_program+0x6c>)
 80006b8:	4618      	mov	r0, r3
 80006ba:	f004 ff45 	bl	8005548 <siprintf>
      BSP_LCD_DisplayStringAtLine(0, (uint8_t*)buffer);
 80006be:	463b      	mov	r3, r7
 80006c0:	4619      	mov	r1, r3
 80006c2:	2000      	movs	r0, #0
 80006c4:	f001 f99e 	bl	8001a04 <BSP_LCD_DisplayStringAtLine>

      sprintf(buffer, "Czas: %d min", program.time);
 80006c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80006cc:	461a      	mov	r2, r3
 80006ce:	463b      	mov	r3, r7
 80006d0:	490f      	ldr	r1, [pc, #60]	@ (8000710 <display_program+0x70>)
 80006d2:	4618      	mov	r0, r3
 80006d4:	f004 ff38 	bl	8005548 <siprintf>
      BSP_LCD_DisplayStringAtLine(1, (uint8_t*)buffer);
 80006d8:	463b      	mov	r3, r7
 80006da:	4619      	mov	r1, r3
 80006dc:	2001      	movs	r0, #1
 80006de:	f001 f991 	bl	8001a04 <BSP_LCD_DisplayStringAtLine>

      sprintf(buffer, "Temp: %d C", program.temperature);
 80006e2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80006e6:	461a      	mov	r2, r3
 80006e8:	463b      	mov	r3, r7
 80006ea:	490a      	ldr	r1, [pc, #40]	@ (8000714 <display_program+0x74>)
 80006ec:	4618      	mov	r0, r3
 80006ee:	f004 ff2b 	bl	8005548 <siprintf>
      BSP_LCD_DisplayStringAtLine(2, (uint8_t*)buffer);
 80006f2:	463b      	mov	r3, r7
 80006f4:	4619      	mov	r1, r3
 80006f6:	2002      	movs	r0, #2
 80006f8:	f001 f984 	bl	8001a04 <BSP_LCD_DisplayStringAtLine>
}
 80006fc:	bf00      	nop
 80006fe:	3728      	adds	r7, #40	@ 0x28
 8000700:	46bd      	mov	sp, r7
 8000702:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000706:	b004      	add	sp, #16
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	08005ea0 	.word	0x08005ea0
 8000710:	08005eac 	.word	0x08005eac
 8000714:	08005ebc 	.word	0x08005ebc

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b094      	sub	sp, #80	@ 0x50
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 0320 	add.w	r3, r7, #32
 8000722:	2230      	movs	r2, #48	@ 0x30
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f004 ff2e 	bl	8005588 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800073c:	2300      	movs	r3, #0
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	4b2b      	ldr	r3, [pc, #172]	@ (80007f0 <SystemClock_Config+0xd8>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000744:	4a2a      	ldr	r2, [pc, #168]	@ (80007f0 <SystemClock_Config+0xd8>)
 8000746:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800074a:	6413      	str	r3, [r2, #64]	@ 0x40
 800074c:	4b28      	ldr	r3, [pc, #160]	@ (80007f0 <SystemClock_Config+0xd8>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000750:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000758:	2300      	movs	r3, #0
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	4b25      	ldr	r3, [pc, #148]	@ (80007f4 <SystemClock_Config+0xdc>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a24      	ldr	r2, [pc, #144]	@ (80007f4 <SystemClock_Config+0xdc>)
 8000762:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000766:	6013      	str	r3, [r2, #0]
 8000768:	4b22      	ldr	r3, [pc, #136]	@ (80007f4 <SystemClock_Config+0xdc>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000774:	2301      	movs	r3, #1
 8000776:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000778:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800077c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077e:	2302      	movs	r3, #2
 8000780:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000782:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000786:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000788:	2310      	movs	r3, #16
 800078a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 800078c:	23b4      	movs	r3, #180	@ 0xb4
 800078e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000790:	2302      	movs	r3, #2
 8000792:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000794:	2304      	movs	r3, #4
 8000796:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000798:	f107 0320 	add.w	r3, r7, #32
 800079c:	4618      	mov	r0, r3
 800079e:	f003 f8fd 	bl	800399c <HAL_RCC_OscConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007a8:	f000 f876 	bl	8000898 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007ac:	f003 f8a6 	bl	80038fc <HAL_PWREx_EnableOverDrive>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80007b6:	f000 f86f 	bl	8000898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ba:	230f      	movs	r3, #15
 80007bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007be:	2302      	movs	r3, #2
 80007c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007c6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007d2:	f107 030c 	add.w	r3, r7, #12
 80007d6:	2105      	movs	r1, #5
 80007d8:	4618      	mov	r0, r3
 80007da:	f003 fb57 	bl	8003e8c <HAL_RCC_ClockConfig>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80007e4:	f000 f858 	bl	8000898 <Error_Handler>
  }
}
 80007e8:	bf00      	nop
 80007ea:	3750      	adds	r7, #80	@ 0x50
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40007000 	.word	0x40007000

080007f8 <MX_DMA2D_Init>:

/* Other necessary initialization functions */

static void MX_DMA2D_Init(void) { /* Code for DMA2D initialization */ }
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr

08000806 <MX_I2C3_Init>:
static void MX_I2C3_Init(void) { /* Code for I2C3 initialization */ }
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <MX_LTDC_Init>:
static void MX_LTDC_Init(void) { /* Code for LTDC initialization */ }
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <MX_SPI5_Init>:
static void MX_SPI5_Init(void) { /* Code for SPI5 initialization */ }
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <MX_FMC_Init>:
static void MX_FMC_Init(void) { /* Code for FMC initialization */ }
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
	...

08000840 <MX_GPIO_Init>:
static void MX_GPIO_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000854:	2300      	movs	r3, #0
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	4b0d      	ldr	r3, [pc, #52]	@ (8000890 <MX_GPIO_Init+0x50>)
 800085a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085c:	4a0c      	ldr	r2, [pc, #48]	@ (8000890 <MX_GPIO_Init+0x50>)
 800085e:	f043 0301 	orr.w	r3, r3, #1
 8000862:	6313      	str	r3, [r2, #48]	@ 0x30
 8000864:	4b0a      	ldr	r3, [pc, #40]	@ (8000890 <MX_GPIO_Init+0x50>)
 8000866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000868:	f003 0301 	and.w	r3, r3, #1
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : NextBut_Pin LastBut_Pin */
  GPIO_InitStruct.Pin = NextBut_Pin | LastBut_Pin;
 8000870:	2306      	movs	r3, #6
 8000872:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000874:	2300      	movs	r3, #0
 8000876:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	4619      	mov	r1, r3
 8000880:	4804      	ldr	r0, [pc, #16]	@ (8000894 <MX_GPIO_Init+0x54>)
 8000882:	f002 fa81 	bl	8002d88 <HAL_GPIO_Init>
}
 8000886:	bf00      	nop
 8000888:	3718      	adds	r7, #24
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40023800 	.word	0x40023800
 8000894:	40020000 	.word	0x40020000

08000898 <Error_Handler>:

void Error_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
}
 800089e:	bf00      	nop
  __disable_irq();
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <Error_Handler+0x8>

080008a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	4b10      	ldr	r3, [pc, #64]	@ (80008f0 <HAL_MspInit+0x4c>)
 80008b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008b2:	4a0f      	ldr	r2, [pc, #60]	@ (80008f0 <HAL_MspInit+0x4c>)
 80008b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80008ba:	4b0d      	ldr	r3, [pc, #52]	@ (80008f0 <HAL_MspInit+0x4c>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <HAL_MspInit+0x4c>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ce:	4a08      	ldr	r2, [pc, #32]	@ (80008f0 <HAL_MspInit+0x4c>)
 80008d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008d6:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <HAL_MspInit+0x4c>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800

080008f4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a0b      	ldr	r2, [pc, #44]	@ (8000930 <HAL_DMA2D_MspInit+0x3c>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d10d      	bne.n	8000922 <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	4b0a      	ldr	r3, [pc, #40]	@ (8000934 <HAL_DMA2D_MspInit+0x40>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	4a09      	ldr	r2, [pc, #36]	@ (8000934 <HAL_DMA2D_MspInit+0x40>)
 8000910:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000914:	6313      	str	r3, [r2, #48]	@ 0x30
 8000916:	4b07      	ldr	r3, [pc, #28]	@ (8000934 <HAL_DMA2D_MspInit+0x40>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8000922:	bf00      	nop
 8000924:	3714      	adds	r7, #20
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	4002b000 	.word	0x4002b000
 8000934:	40023800 	.word	0x40023800

08000938 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b09a      	sub	sp, #104	@ 0x68
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000950:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000954:	2230      	movs	r2, #48	@ 0x30
 8000956:	2100      	movs	r1, #0
 8000958:	4618      	mov	r0, r3
 800095a:	f004 fe15 	bl	8005588 <memset>
  if(hltdc->Instance==LTDC)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a81      	ldr	r2, [pc, #516]	@ (8000b68 <HAL_LTDC_MspInit+0x230>)
 8000964:	4293      	cmp	r3, r2
 8000966:	f040 80fa 	bne.w	8000b5e <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800096a:	2308      	movs	r3, #8
 800096c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 49;
 800096e:	2331      	movs	r3, #49	@ 0x31
 8000970:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2.0;
 8000972:	2302      	movs	r3, #2
 8000974:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000976:	2300      	movs	r3, #0
 8000978:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800097a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800097e:	4618      	mov	r0, r3
 8000980:	f003 fc70 	bl	8004264 <HAL_RCCEx_PeriphCLKConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 800098a:	f7ff ff85 	bl	8000898 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	623b      	str	r3, [r7, #32]
 8000992:	4b76      	ldr	r3, [pc, #472]	@ (8000b6c <HAL_LTDC_MspInit+0x234>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000996:	4a75      	ldr	r2, [pc, #468]	@ (8000b6c <HAL_LTDC_MspInit+0x234>)
 8000998:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800099c:	6453      	str	r3, [r2, #68]	@ 0x44
 800099e:	4b73      	ldr	r3, [pc, #460]	@ (8000b6c <HAL_LTDC_MspInit+0x234>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009a2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80009a6:	623b      	str	r3, [r7, #32]
 80009a8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]
 80009ae:	4b6f      	ldr	r3, [pc, #444]	@ (8000b6c <HAL_LTDC_MspInit+0x234>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	4a6e      	ldr	r2, [pc, #440]	@ (8000b6c <HAL_LTDC_MspInit+0x234>)
 80009b4:	f043 0320 	orr.w	r3, r3, #32
 80009b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ba:	4b6c      	ldr	r3, [pc, #432]	@ (8000b6c <HAL_LTDC_MspInit+0x234>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	f003 0320 	and.w	r3, r3, #32
 80009c2:	61fb      	str	r3, [r7, #28]
 80009c4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	61bb      	str	r3, [r7, #24]
 80009ca:	4b68      	ldr	r3, [pc, #416]	@ (8000b6c <HAL_LTDC_MspInit+0x234>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	4a67      	ldr	r2, [pc, #412]	@ (8000b6c <HAL_LTDC_MspInit+0x234>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d6:	4b65      	ldr	r3, [pc, #404]	@ (8000b6c <HAL_LTDC_MspInit+0x234>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	61bb      	str	r3, [r7, #24]
 80009e0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	4b61      	ldr	r3, [pc, #388]	@ (8000b6c <HAL_LTDC_MspInit+0x234>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	4a60      	ldr	r2, [pc, #384]	@ (8000b6c <HAL_LTDC_MspInit+0x234>)
 80009ec:	f043 0302 	orr.w	r3, r3, #2
 80009f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f2:	4b5e      	ldr	r3, [pc, #376]	@ (8000b6c <HAL_LTDC_MspInit+0x234>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	f003 0302 	and.w	r3, r3, #2
 80009fa:	617b      	str	r3, [r7, #20]
 80009fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	4b5a      	ldr	r3, [pc, #360]	@ (8000b6c <HAL_LTDC_MspInit+0x234>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	4a59      	ldr	r2, [pc, #356]	@ (8000b6c <HAL_LTDC_MspInit+0x234>)
 8000a08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0e:	4b57      	ldr	r3, [pc, #348]	@ (8000b6c <HAL_LTDC_MspInit+0x234>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	4b53      	ldr	r3, [pc, #332]	@ (8000b6c <HAL_LTDC_MspInit+0x234>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	4a52      	ldr	r2, [pc, #328]	@ (8000b6c <HAL_LTDC_MspInit+0x234>)
 8000a24:	f043 0304 	orr.w	r3, r3, #4
 8000a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2a:	4b50      	ldr	r3, [pc, #320]	@ (8000b6c <HAL_LTDC_MspInit+0x234>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	f003 0304 	and.w	r3, r3, #4
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	4b4c      	ldr	r3, [pc, #304]	@ (8000b6c <HAL_LTDC_MspInit+0x234>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	4a4b      	ldr	r2, [pc, #300]	@ (8000b6c <HAL_LTDC_MspInit+0x234>)
 8000a40:	f043 0308 	orr.w	r3, r3, #8
 8000a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a46:	4b49      	ldr	r3, [pc, #292]	@ (8000b6c <HAL_LTDC_MspInit+0x234>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	f003 0308 	and.w	r3, r3, #8
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a56:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a64:	230e      	movs	r3, #14
 8000a66:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a68:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4840      	ldr	r0, [pc, #256]	@ (8000b70 <HAL_LTDC_MspInit+0x238>)
 8000a70:	f002 f98a 	bl	8002d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 8000a74:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000a78:	657b      	str	r3, [r7, #84]	@ 0x54
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a86:	230e      	movs	r3, #14
 8000a88:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4838      	ldr	r0, [pc, #224]	@ (8000b74 <HAL_LTDC_MspInit+0x23c>)
 8000a92:	f002 f979 	bl	8002d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a96:	2303      	movs	r3, #3
 8000a98:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000aa6:	2309      	movs	r3, #9
 8000aa8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aaa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4831      	ldr	r0, [pc, #196]	@ (8000b78 <HAL_LTDC_MspInit+0x240>)
 8000ab2:	f002 f969 	bl	8002d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8000ab6:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000aba:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ac8:	230e      	movs	r3, #14
 8000aca:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4829      	ldr	r0, [pc, #164]	@ (8000b78 <HAL_LTDC_MspInit+0x240>)
 8000ad4:	f002 f958 	bl	8002d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8000ad8:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000adc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000aea:	230e      	movs	r3, #14
 8000aec:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000af2:	4619      	mov	r1, r3
 8000af4:	4821      	ldr	r0, [pc, #132]	@ (8000b7c <HAL_LTDC_MspInit+0x244>)
 8000af6:	f002 f947 	bl	8002d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8000afa:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000afe:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	2302      	movs	r3, #2
 8000b02:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b0c:	230e      	movs	r3, #14
 8000b0e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b10:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b14:	4619      	mov	r1, r3
 8000b16:	481a      	ldr	r0, [pc, #104]	@ (8000b80 <HAL_LTDC_MspInit+0x248>)
 8000b18:	f002 f936 	bl	8002d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8000b1c:	2348      	movs	r3, #72	@ 0x48
 8000b1e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b2c:	230e      	movs	r3, #14
 8000b2e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b30:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b34:	4619      	mov	r1, r3
 8000b36:	4813      	ldr	r0, [pc, #76]	@ (8000b84 <HAL_LTDC_MspInit+0x24c>)
 8000b38:	f002 f926 	bl	8002d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000b3c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b40:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b42:	2302      	movs	r3, #2
 8000b44:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000b4e:	2309      	movs	r3, #9
 8000b50:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b52:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b56:	4619      	mov	r1, r3
 8000b58:	4808      	ldr	r0, [pc, #32]	@ (8000b7c <HAL_LTDC_MspInit+0x244>)
 8000b5a:	f002 f915 	bl	8002d88 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8000b5e:	bf00      	nop
 8000b60:	3768      	adds	r7, #104	@ 0x68
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40016800 	.word	0x40016800
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40021400 	.word	0x40021400
 8000b74:	40020000 	.word	0x40020000
 8000b78:	40020400 	.word	0x40020400
 8000b7c:	40021800 	.word	0x40021800
 8000b80:	40020800 	.word	0x40020800
 8000b84:	40020c00 	.word	0x40020c00

08000b88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	@ 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a19      	ldr	r2, [pc, #100]	@ (8000c0c <HAL_SPI_MspInit+0x84>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d12c      	bne.n	8000c04 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	4b18      	ldr	r3, [pc, #96]	@ (8000c10 <HAL_SPI_MspInit+0x88>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bb2:	4a17      	ldr	r2, [pc, #92]	@ (8000c10 <HAL_SPI_MspInit+0x88>)
 8000bb4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000bb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bba:	4b15      	ldr	r3, [pc, #84]	@ (8000c10 <HAL_SPI_MspInit+0x88>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	4b11      	ldr	r3, [pc, #68]	@ (8000c10 <HAL_SPI_MspInit+0x88>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	4a10      	ldr	r2, [pc, #64]	@ (8000c10 <HAL_SPI_MspInit+0x88>)
 8000bd0:	f043 0320 	orr.w	r3, r3, #32
 8000bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c10 <HAL_SPI_MspInit+0x88>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	f003 0320 	and.w	r3, r3, #32
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000be2:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000bf4:	2305      	movs	r3, #5
 8000bf6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4805      	ldr	r0, [pc, #20]	@ (8000c14 <HAL_SPI_MspInit+0x8c>)
 8000c00:	f002 f8c2 	bl	8002d88 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8000c04:	bf00      	nop
 8000c06:	3728      	adds	r7, #40	@ 0x28
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40015000 	.word	0x40015000
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40021400 	.word	0x40021400

08000c18 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a08      	ldr	r2, [pc, #32]	@ (8000c48 <HAL_SPI_MspDeInit+0x30>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d10a      	bne.n	8000c40 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8000c2a:	4b08      	ldr	r3, [pc, #32]	@ (8000c4c <HAL_SPI_MspDeInit+0x34>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c2e:	4a07      	ldr	r2, [pc, #28]	@ (8000c4c <HAL_SPI_MspDeInit+0x34>)
 8000c30:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000c34:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 8000c36:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8000c3a:	4805      	ldr	r0, [pc, #20]	@ (8000c50 <HAL_SPI_MspDeInit+0x38>)
 8000c3c:	f002 fa50 	bl	80030e0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40015000 	.word	0x40015000
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40021400 	.word	0x40021400

08000c54 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000c68:	4b3b      	ldr	r3, [pc, #236]	@ (8000d58 <HAL_FMC_MspInit+0x104>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d16f      	bne.n	8000d50 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000c70:	4b39      	ldr	r3, [pc, #228]	@ (8000d58 <HAL_FMC_MspInit+0x104>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	603b      	str	r3, [r7, #0]
 8000c7a:	4b38      	ldr	r3, [pc, #224]	@ (8000d5c <HAL_FMC_MspInit+0x108>)
 8000c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c7e:	4a37      	ldr	r2, [pc, #220]	@ (8000d5c <HAL_FMC_MspInit+0x108>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6393      	str	r3, [r2, #56]	@ 0x38
 8000c86:	4b35      	ldr	r3, [pc, #212]	@ (8000d5c <HAL_FMC_MspInit+0x108>)
 8000c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c92:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000c96:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ca4:	230c      	movs	r3, #12
 8000ca6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	4619      	mov	r1, r3
 8000cac:	482c      	ldr	r0, [pc, #176]	@ (8000d60 <HAL_FMC_MspInit+0x10c>)
 8000cae:	f002 f86b 	bl	8002d88 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cc2:	230c      	movs	r3, #12
 8000cc4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4826      	ldr	r0, [pc, #152]	@ (8000d64 <HAL_FMC_MspInit+0x110>)
 8000ccc:	f002 f85c 	bl	8002d88 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000cd0:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000cd4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ce2:	230c      	movs	r3, #12
 8000ce4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	4619      	mov	r1, r3
 8000cea:	481f      	ldr	r0, [pc, #124]	@ (8000d68 <HAL_FMC_MspInit+0x114>)
 8000cec:	f002 f84c 	bl	8002d88 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000cf0:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000cf4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d02:	230c      	movs	r3, #12
 8000d04:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4818      	ldr	r0, [pc, #96]	@ (8000d6c <HAL_FMC_MspInit+0x118>)
 8000d0c:	f002 f83c 	bl	8002d88 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000d10:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000d14:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d22:	230c      	movs	r3, #12
 8000d24:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4811      	ldr	r0, [pc, #68]	@ (8000d70 <HAL_FMC_MspInit+0x11c>)
 8000d2c:	f002 f82c 	bl	8002d88 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000d30:	2360      	movs	r3, #96	@ 0x60
 8000d32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d40:	230c      	movs	r3, #12
 8000d42:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	4619      	mov	r1, r3
 8000d48:	480a      	ldr	r0, [pc, #40]	@ (8000d74 <HAL_FMC_MspInit+0x120>)
 8000d4a:	f002 f81d 	bl	8002d88 <HAL_GPIO_Init>
 8000d4e:	e000      	b.n	8000d52 <HAL_FMC_MspInit+0xfe>
    return;
 8000d50:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000d52:	3718      	adds	r7, #24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	2000013c 	.word	0x2000013c
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40021400 	.word	0x40021400
 8000d64:	40020800 	.word	0x40020800
 8000d68:	40021800 	.word	0x40021800
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	40020c00 	.word	0x40020c00
 8000d74:	40020400 	.word	0x40020400

08000d78 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000d80:	f7ff ff68 	bl	8000c54 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <NMI_Handler+0x4>

08000d94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <HardFault_Handler+0x4>

08000d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <MemManage_Handler+0x4>

08000da4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <BusFault_Handler+0x4>

08000dac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <UsageFault_Handler+0x4>

08000db4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de2:	f001 fa31 	bl	8002248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df4:	4a14      	ldr	r2, [pc, #80]	@ (8000e48 <_sbrk+0x5c>)
 8000df6:	4b15      	ldr	r3, [pc, #84]	@ (8000e4c <_sbrk+0x60>)
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e00:	4b13      	ldr	r3, [pc, #76]	@ (8000e50 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d102      	bne.n	8000e0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e08:	4b11      	ldr	r3, [pc, #68]	@ (8000e50 <_sbrk+0x64>)
 8000e0a:	4a12      	ldr	r2, [pc, #72]	@ (8000e54 <_sbrk+0x68>)
 8000e0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e0e:	4b10      	ldr	r3, [pc, #64]	@ (8000e50 <_sbrk+0x64>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d207      	bcs.n	8000e2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e1c:	f004 fbbc 	bl	8005598 <__errno>
 8000e20:	4603      	mov	r3, r0
 8000e22:	220c      	movs	r2, #12
 8000e24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2a:	e009      	b.n	8000e40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e2c:	4b08      	ldr	r3, [pc, #32]	@ (8000e50 <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e32:	4b07      	ldr	r3, [pc, #28]	@ (8000e50 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	4a05      	ldr	r2, [pc, #20]	@ (8000e50 <_sbrk+0x64>)
 8000e3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20030000 	.word	0x20030000
 8000e4c:	00000400 	.word	0x00000400
 8000e50:	20000140 	.word	0x20000140
 8000e54:	200004e8 	.word	0x200004e8

08000e58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e5c:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <SystemInit+0x20>)
 8000e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e62:	4a05      	ldr	r2, [pc, #20]	@ (8000e78 <SystemInit+0x20>)
 8000e64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000eb4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e80:	f7ff ffea 	bl	8000e58 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e84:	480c      	ldr	r0, [pc, #48]	@ (8000eb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e86:	490d      	ldr	r1, [pc, #52]	@ (8000ebc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e88:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e8c:	e002      	b.n	8000e94 <LoopCopyDataInit>

08000e8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e92:	3304      	adds	r3, #4

08000e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e98:	d3f9      	bcc.n	8000e8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000ec8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea0:	e001      	b.n	8000ea6 <LoopFillZerobss>

08000ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea4:	3204      	adds	r2, #4

08000ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ea6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea8:	d3fb      	bcc.n	8000ea2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000eaa:	f004 fb7b 	bl	80055a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eae:	f7ff fb67 	bl	8000580 <main>
  bx  lr    
 8000eb2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000eb4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000eb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ebc:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 8000ec0:	080079dc 	.word	0x080079dc
  ldr r2, =_sbss
 8000ec4:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 8000ec8:	200004e4 	.word	0x200004e4

08000ecc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ecc:	e7fe      	b.n	8000ecc <ADC_IRQHandler>

08000ece <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000ed2:	f000 fa5d 	bl	8001390 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8000ed6:	20ca      	movs	r0, #202	@ 0xca
 8000ed8:	f000 f95d 	bl	8001196 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8000edc:	20c3      	movs	r0, #195	@ 0xc3
 8000ede:	f000 f967 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8000ee2:	2008      	movs	r0, #8
 8000ee4:	f000 f964 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8000ee8:	2050      	movs	r0, #80	@ 0x50
 8000eea:	f000 f961 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8000eee:	20cf      	movs	r0, #207	@ 0xcf
 8000ef0:	f000 f951 	bl	8001196 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f000 f95b 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8000efa:	20c1      	movs	r0, #193	@ 0xc1
 8000efc:	f000 f958 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8000f00:	2030      	movs	r0, #48	@ 0x30
 8000f02:	f000 f955 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8000f06:	20ed      	movs	r0, #237	@ 0xed
 8000f08:	f000 f945 	bl	8001196 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8000f0c:	2064      	movs	r0, #100	@ 0x64
 8000f0e:	f000 f94f 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8000f12:	2003      	movs	r0, #3
 8000f14:	f000 f94c 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8000f18:	2012      	movs	r0, #18
 8000f1a:	f000 f949 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8000f1e:	2081      	movs	r0, #129	@ 0x81
 8000f20:	f000 f946 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8000f24:	20e8      	movs	r0, #232	@ 0xe8
 8000f26:	f000 f936 	bl	8001196 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8000f2a:	2085      	movs	r0, #133	@ 0x85
 8000f2c:	f000 f940 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000f30:	2000      	movs	r0, #0
 8000f32:	f000 f93d 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000f36:	2078      	movs	r0, #120	@ 0x78
 8000f38:	f000 f93a 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8000f3c:	20cb      	movs	r0, #203	@ 0xcb
 8000f3e:	f000 f92a 	bl	8001196 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8000f42:	2039      	movs	r0, #57	@ 0x39
 8000f44:	f000 f934 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8000f48:	202c      	movs	r0, #44	@ 0x2c
 8000f4a:	f000 f931 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f000 f92e 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8000f54:	2034      	movs	r0, #52	@ 0x34
 8000f56:	f000 f92b 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8000f5a:	2002      	movs	r0, #2
 8000f5c:	f000 f928 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8000f60:	20f7      	movs	r0, #247	@ 0xf7
 8000f62:	f000 f918 	bl	8001196 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8000f66:	2020      	movs	r0, #32
 8000f68:	f000 f922 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8000f6c:	20ea      	movs	r0, #234	@ 0xea
 8000f6e:	f000 f912 	bl	8001196 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000f72:	2000      	movs	r0, #0
 8000f74:	f000 f91c 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f000 f919 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8000f7e:	20b1      	movs	r0, #177	@ 0xb1
 8000f80:	f000 f909 	bl	8001196 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000f84:	2000      	movs	r0, #0
 8000f86:	f000 f913 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000f8a:	201b      	movs	r0, #27
 8000f8c:	f000 f910 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000f90:	20b6      	movs	r0, #182	@ 0xb6
 8000f92:	f000 f900 	bl	8001196 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000f96:	200a      	movs	r0, #10
 8000f98:	f000 f90a 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8000f9c:	20a2      	movs	r0, #162	@ 0xa2
 8000f9e:	f000 f907 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8000fa2:	20c0      	movs	r0, #192	@ 0xc0
 8000fa4:	f000 f8f7 	bl	8001196 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000fa8:	2010      	movs	r0, #16
 8000faa:	f000 f901 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8000fae:	20c1      	movs	r0, #193	@ 0xc1
 8000fb0:	f000 f8f1 	bl	8001196 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000fb4:	2010      	movs	r0, #16
 8000fb6:	f000 f8fb 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8000fba:	20c5      	movs	r0, #197	@ 0xc5
 8000fbc:	f000 f8eb 	bl	8001196 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8000fc0:	2045      	movs	r0, #69	@ 0x45
 8000fc2:	f000 f8f5 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8000fc6:	2015      	movs	r0, #21
 8000fc8:	f000 f8f2 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8000fcc:	20c7      	movs	r0, #199	@ 0xc7
 8000fce:	f000 f8e2 	bl	8001196 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8000fd2:	2090      	movs	r0, #144	@ 0x90
 8000fd4:	f000 f8ec 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8000fd8:	2036      	movs	r0, #54	@ 0x36
 8000fda:	f000 f8dc 	bl	8001196 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8000fde:	20c8      	movs	r0, #200	@ 0xc8
 8000fe0:	f000 f8e6 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8000fe4:	20f2      	movs	r0, #242	@ 0xf2
 8000fe6:	f000 f8d6 	bl	8001196 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000fea:	2000      	movs	r0, #0
 8000fec:	f000 f8e0 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8000ff0:	20b0      	movs	r0, #176	@ 0xb0
 8000ff2:	f000 f8d0 	bl	8001196 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8000ff6:	20c2      	movs	r0, #194	@ 0xc2
 8000ff8:	f000 f8da 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000ffc:	20b6      	movs	r0, #182	@ 0xb6
 8000ffe:	f000 f8ca 	bl	8001196 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001002:	200a      	movs	r0, #10
 8001004:	f000 f8d4 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001008:	20a7      	movs	r0, #167	@ 0xa7
 800100a:	f000 f8d1 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 800100e:	2027      	movs	r0, #39	@ 0x27
 8001010:	f000 f8ce 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001014:	2004      	movs	r0, #4
 8001016:	f000 f8cb 	bl	80011b0 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 800101a:	202a      	movs	r0, #42	@ 0x2a
 800101c:	f000 f8bb 	bl	8001196 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001020:	2000      	movs	r0, #0
 8001022:	f000 f8c5 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001026:	2000      	movs	r0, #0
 8001028:	f000 f8c2 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800102c:	2000      	movs	r0, #0
 800102e:	f000 f8bf 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001032:	20ef      	movs	r0, #239	@ 0xef
 8001034:	f000 f8bc 	bl	80011b0 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001038:	202b      	movs	r0, #43	@ 0x2b
 800103a:	f000 f8ac 	bl	8001196 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800103e:	2000      	movs	r0, #0
 8001040:	f000 f8b6 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001044:	2000      	movs	r0, #0
 8001046:	f000 f8b3 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 800104a:	2001      	movs	r0, #1
 800104c:	f000 f8b0 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001050:	203f      	movs	r0, #63	@ 0x3f
 8001052:	f000 f8ad 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001056:	20f6      	movs	r0, #246	@ 0xf6
 8001058:	f000 f89d 	bl	8001196 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800105c:	2001      	movs	r0, #1
 800105e:	f000 f8a7 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001062:	2000      	movs	r0, #0
 8001064:	f000 f8a4 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001068:	2006      	movs	r0, #6
 800106a:	f000 f8a1 	bl	80011b0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 800106e:	202c      	movs	r0, #44	@ 0x2c
 8001070:	f000 f891 	bl	8001196 <ili9341_WriteReg>
  LCD_Delay(200);
 8001074:	20c8      	movs	r0, #200	@ 0xc8
 8001076:	f000 fa79 	bl	800156c <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 800107a:	2026      	movs	r0, #38	@ 0x26
 800107c:	f000 f88b 	bl	8001196 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001080:	2001      	movs	r0, #1
 8001082:	f000 f895 	bl	80011b0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001086:	20e0      	movs	r0, #224	@ 0xe0
 8001088:	f000 f885 	bl	8001196 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 800108c:	200f      	movs	r0, #15
 800108e:	f000 f88f 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001092:	2029      	movs	r0, #41	@ 0x29
 8001094:	f000 f88c 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001098:	2024      	movs	r0, #36	@ 0x24
 800109a:	f000 f889 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800109e:	200c      	movs	r0, #12
 80010a0:	f000 f886 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80010a4:	200e      	movs	r0, #14
 80010a6:	f000 f883 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80010aa:	2009      	movs	r0, #9
 80010ac:	f000 f880 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80010b0:	204e      	movs	r0, #78	@ 0x4e
 80010b2:	f000 f87d 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80010b6:	2078      	movs	r0, #120	@ 0x78
 80010b8:	f000 f87a 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80010bc:	203c      	movs	r0, #60	@ 0x3c
 80010be:	f000 f877 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80010c2:	2009      	movs	r0, #9
 80010c4:	f000 f874 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80010c8:	2013      	movs	r0, #19
 80010ca:	f000 f871 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80010ce:	2005      	movs	r0, #5
 80010d0:	f000 f86e 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80010d4:	2017      	movs	r0, #23
 80010d6:	f000 f86b 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80010da:	2011      	movs	r0, #17
 80010dc:	f000 f868 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80010e0:	2000      	movs	r0, #0
 80010e2:	f000 f865 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80010e6:	20e1      	movs	r0, #225	@ 0xe1
 80010e8:	f000 f855 	bl	8001196 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80010ec:	2000      	movs	r0, #0
 80010ee:	f000 f85f 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80010f2:	2016      	movs	r0, #22
 80010f4:	f000 f85c 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80010f8:	201b      	movs	r0, #27
 80010fa:	f000 f859 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80010fe:	2004      	movs	r0, #4
 8001100:	f000 f856 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001104:	2011      	movs	r0, #17
 8001106:	f000 f853 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 800110a:	2007      	movs	r0, #7
 800110c:	f000 f850 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001110:	2031      	movs	r0, #49	@ 0x31
 8001112:	f000 f84d 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001116:	2033      	movs	r0, #51	@ 0x33
 8001118:	f000 f84a 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 800111c:	2042      	movs	r0, #66	@ 0x42
 800111e:	f000 f847 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001122:	2005      	movs	r0, #5
 8001124:	f000 f844 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001128:	200c      	movs	r0, #12
 800112a:	f000 f841 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 800112e:	200a      	movs	r0, #10
 8001130:	f000 f83e 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001134:	2028      	movs	r0, #40	@ 0x28
 8001136:	f000 f83b 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 800113a:	202f      	movs	r0, #47	@ 0x2f
 800113c:	f000 f838 	bl	80011b0 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001140:	200f      	movs	r0, #15
 8001142:	f000 f835 	bl	80011b0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001146:	2011      	movs	r0, #17
 8001148:	f000 f825 	bl	8001196 <ili9341_WriteReg>
  LCD_Delay(200);
 800114c:	20c8      	movs	r0, #200	@ 0xc8
 800114e:	f000 fa0d 	bl	800156c <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001152:	2029      	movs	r0, #41	@ 0x29
 8001154:	f000 f81f 	bl	8001196 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001158:	202c      	movs	r0, #44	@ 0x2c
 800115a:	f000 f81c 	bl	8001196 <ili9341_WriteReg>
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}

08001162 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001166:	f000 f913 	bl	8001390 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 800116a:	2103      	movs	r1, #3
 800116c:	20d3      	movs	r0, #211	@ 0xd3
 800116e:	f000 f82c 	bl	80011ca <ili9341_ReadData>
 8001172:	4603      	mov	r3, r0
 8001174:	b29b      	uxth	r3, r3
}
 8001176:	4618      	mov	r0, r3
 8001178:	bd80      	pop	{r7, pc}

0800117a <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800117e:	2029      	movs	r0, #41	@ 0x29
 8001180:	f000 f809 	bl	8001196 <ili9341_WriteReg>
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}

08001188 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 800118c:	2028      	movs	r0, #40	@ 0x28
 800118e:	f000 f802 	bl	8001196 <ili9341_WriteReg>
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}

08001196 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	4603      	mov	r3, r0
 800119e:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 f98e 	bl	80014c4 <LCD_IO_WriteReg>
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80011ba:	88fb      	ldrh	r3, [r7, #6]
 80011bc:	4618      	mov	r0, r3
 80011be:	f000 f95f 	bl	8001480 <LCD_IO_WriteData>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	4603      	mov	r3, r0
 80011d2:	460a      	mov	r2, r1
 80011d4:	80fb      	strh	r3, [r7, #6]
 80011d6:	4613      	mov	r3, r2
 80011d8:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80011da:	797a      	ldrb	r2, [r7, #5]
 80011dc:	88fb      	ldrh	r3, [r7, #6]
 80011de:	4611      	mov	r1, r2
 80011e0:	4618      	mov	r0, r3
 80011e2:	f000 f991 	bl	8001508 <LCD_IO_ReadData>
 80011e6:	4603      	mov	r3, r0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80011f4:	23f0      	movs	r3, #240	@ 0xf0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001204:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 8001208:	4618      	mov	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
	...

08001214 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001218:	4819      	ldr	r0, [pc, #100]	@ (8001280 <SPIx_Init+0x6c>)
 800121a:	f003 ff2b 	bl	8005074 <HAL_SPI_GetState>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d12b      	bne.n	800127c <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001224:	4b16      	ldr	r3, [pc, #88]	@ (8001280 <SPIx_Init+0x6c>)
 8001226:	4a17      	ldr	r2, [pc, #92]	@ (8001284 <SPIx_Init+0x70>)
 8001228:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800122a:	4b15      	ldr	r3, [pc, #84]	@ (8001280 <SPIx_Init+0x6c>)
 800122c:	2218      	movs	r2, #24
 800122e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001230:	4b13      	ldr	r3, [pc, #76]	@ (8001280 <SPIx_Init+0x6c>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001236:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <SPIx_Init+0x6c>)
 8001238:	2200      	movs	r2, #0
 800123a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800123c:	4b10      	ldr	r3, [pc, #64]	@ (8001280 <SPIx_Init+0x6c>)
 800123e:	2200      	movs	r2, #0
 8001240:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001242:	4b0f      	ldr	r3, [pc, #60]	@ (8001280 <SPIx_Init+0x6c>)
 8001244:	2200      	movs	r2, #0
 8001246:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001248:	4b0d      	ldr	r3, [pc, #52]	@ (8001280 <SPIx_Init+0x6c>)
 800124a:	2207      	movs	r2, #7
 800124c:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800124e:	4b0c      	ldr	r3, [pc, #48]	@ (8001280 <SPIx_Init+0x6c>)
 8001250:	2200      	movs	r2, #0
 8001252:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001254:	4b0a      	ldr	r3, [pc, #40]	@ (8001280 <SPIx_Init+0x6c>)
 8001256:	2200      	movs	r2, #0
 8001258:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800125a:	4b09      	ldr	r3, [pc, #36]	@ (8001280 <SPIx_Init+0x6c>)
 800125c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001260:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001262:	4b07      	ldr	r3, [pc, #28]	@ (8001280 <SPIx_Init+0x6c>)
 8001264:	2200      	movs	r2, #0
 8001266:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001268:	4b05      	ldr	r3, [pc, #20]	@ (8001280 <SPIx_Init+0x6c>)
 800126a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800126e:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8001270:	4803      	ldr	r0, [pc, #12]	@ (8001280 <SPIx_Init+0x6c>)
 8001272:	f000 f853 	bl	800131c <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001276:	4802      	ldr	r0, [pc, #8]	@ (8001280 <SPIx_Init+0x6c>)
 8001278:	f003 fa45 	bl	8004706 <HAL_SPI_Init>
  } 
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000144 	.word	0x20000144
 8001284:	40015000 	.word	0x40015000

08001288 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001292:	2300      	movs	r3, #0
 8001294:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	b29a      	uxth	r2, r3
 800129a:	4b09      	ldr	r3, [pc, #36]	@ (80012c0 <SPIx_Read+0x38>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f107 0108 	add.w	r1, r7, #8
 80012a2:	4808      	ldr	r0, [pc, #32]	@ (80012c4 <SPIx_Read+0x3c>)
 80012a4:	f003 fc24 	bl	8004af0 <HAL_SPI_Receive>
 80012a8:	4603      	mov	r3, r0
 80012aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80012b2:	f000 f827 	bl	8001304 <SPIx_Error>
  }
  
  return readvalue;
 80012b6:	68bb      	ldr	r3, [r7, #8]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	200000b4 	.word	0x200000b4
 80012c4:	20000144 	.word	0x20000144

080012c8 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80012d2:	2300      	movs	r3, #0
 80012d4:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80012d6:	4b09      	ldr	r3, [pc, #36]	@ (80012fc <SPIx_Write+0x34>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	1db9      	adds	r1, r7, #6
 80012dc:	2201      	movs	r2, #1
 80012de:	4808      	ldr	r0, [pc, #32]	@ (8001300 <SPIx_Write+0x38>)
 80012e0:	f003 fac2 	bl	8004868 <HAL_SPI_Transmit>
 80012e4:	4603      	mov	r3, r0
 80012e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80012e8:	7bfb      	ldrb	r3, [r7, #15]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80012ee:	f000 f809 	bl	8001304 <SPIx_Error>
  }
}
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200000b4 	.word	0x200000b4
 8001300:	20000144 	.word	0x20000144

08001304 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001308:	4803      	ldr	r0, [pc, #12]	@ (8001318 <SPIx_Error+0x14>)
 800130a:	f003 fa85 	bl	8004818 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 800130e:	f7ff ff81 	bl	8001214 <SPIx_Init>
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000144 	.word	0x20000144

0800131c <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	@ 0x28
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001324:	2300      	movs	r3, #0
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	4b17      	ldr	r3, [pc, #92]	@ (8001388 <SPIx_MspInit+0x6c>)
 800132a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132c:	4a16      	ldr	r2, [pc, #88]	@ (8001388 <SPIx_MspInit+0x6c>)
 800132e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001332:	6453      	str	r3, [r2, #68]	@ 0x44
 8001334:	4b14      	ldr	r3, [pc, #80]	@ (8001388 <SPIx_MspInit+0x6c>)
 8001336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001338:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	4b10      	ldr	r3, [pc, #64]	@ (8001388 <SPIx_MspInit+0x6c>)
 8001346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001348:	4a0f      	ldr	r2, [pc, #60]	@ (8001388 <SPIx_MspInit+0x6c>)
 800134a:	f043 0320 	orr.w	r3, r3, #32
 800134e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001350:	4b0d      	ldr	r3, [pc, #52]	@ (8001388 <SPIx_MspInit+0x6c>)
 8001352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001354:	f003 0320 	and.w	r3, r3, #32
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 800135c:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001360:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001362:	2302      	movs	r3, #2
 8001364:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001366:	2302      	movs	r3, #2
 8001368:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800136a:	2301      	movs	r3, #1
 800136c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800136e:	2305      	movs	r3, #5
 8001370:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8001372:	f107 0314 	add.w	r3, r7, #20
 8001376:	4619      	mov	r1, r3
 8001378:	4804      	ldr	r0, [pc, #16]	@ (800138c <SPIx_MspInit+0x70>)
 800137a:	f001 fd05 	bl	8002d88 <HAL_GPIO_Init>
}
 800137e:	bf00      	nop
 8001380:	3728      	adds	r7, #40	@ 0x28
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40023800 	.word	0x40023800
 800138c:	40021400 	.word	0x40021400

08001390 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8001396:	4b36      	ldr	r3, [pc, #216]	@ (8001470 <LCD_IO_Init+0xe0>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d164      	bne.n	8001468 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 800139e:	4b34      	ldr	r3, [pc, #208]	@ (8001470 <LCD_IO_Init+0xe0>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80013a4:	2300      	movs	r3, #0
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	4b32      	ldr	r3, [pc, #200]	@ (8001474 <LCD_IO_Init+0xe4>)
 80013aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ac:	4a31      	ldr	r2, [pc, #196]	@ (8001474 <LCD_IO_Init+0xe4>)
 80013ae:	f043 0308 	orr.w	r3, r3, #8
 80013b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b4:	4b2f      	ldr	r3, [pc, #188]	@ (8001474 <LCD_IO_Init+0xe4>)
 80013b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b8:	f003 0308 	and.w	r3, r3, #8
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80013c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80013c6:	2301      	movs	r3, #1
 80013c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80013ce:	2302      	movs	r3, #2
 80013d0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80013d2:	f107 030c 	add.w	r3, r7, #12
 80013d6:	4619      	mov	r1, r3
 80013d8:	4827      	ldr	r0, [pc, #156]	@ (8001478 <LCD_IO_Init+0xe8>)
 80013da:	f001 fcd5 	bl	8002d88 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	4b24      	ldr	r3, [pc, #144]	@ (8001474 <LCD_IO_Init+0xe4>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	4a23      	ldr	r2, [pc, #140]	@ (8001474 <LCD_IO_Init+0xe4>)
 80013e8:	f043 0308 	orr.w	r3, r3, #8
 80013ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ee:	4b21      	ldr	r3, [pc, #132]	@ (8001474 <LCD_IO_Init+0xe4>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f2:	f003 0308 	and.w	r3, r3, #8
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80013fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001400:	2301      	movs	r3, #1
 8001402:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001408:	2302      	movs	r3, #2
 800140a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800140c:	f107 030c 	add.w	r3, r7, #12
 8001410:	4619      	mov	r1, r3
 8001412:	4819      	ldr	r0, [pc, #100]	@ (8001478 <LCD_IO_Init+0xe8>)
 8001414:	f001 fcb8 	bl	8002d88 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001418:	2300      	movs	r3, #0
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	4b15      	ldr	r3, [pc, #84]	@ (8001474 <LCD_IO_Init+0xe4>)
 800141e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001420:	4a14      	ldr	r2, [pc, #80]	@ (8001474 <LCD_IO_Init+0xe4>)
 8001422:	f043 0304 	orr.w	r3, r3, #4
 8001426:	6313      	str	r3, [r2, #48]	@ 0x30
 8001428:	4b12      	ldr	r3, [pc, #72]	@ (8001474 <LCD_IO_Init+0xe4>)
 800142a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142c:	f003 0304 	and.w	r3, r3, #4
 8001430:	603b      	str	r3, [r7, #0]
 8001432:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001434:	2304      	movs	r3, #4
 8001436:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001438:	2301      	movs	r3, #1
 800143a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001440:	2302      	movs	r3, #2
 8001442:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001444:	f107 030c 	add.w	r3, r7, #12
 8001448:	4619      	mov	r1, r3
 800144a:	480c      	ldr	r0, [pc, #48]	@ (800147c <LCD_IO_Init+0xec>)
 800144c:	f001 fc9c 	bl	8002d88 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001450:	2200      	movs	r2, #0
 8001452:	2104      	movs	r1, #4
 8001454:	4809      	ldr	r0, [pc, #36]	@ (800147c <LCD_IO_Init+0xec>)
 8001456:	f001 ff67 	bl	8003328 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800145a:	2201      	movs	r2, #1
 800145c:	2104      	movs	r1, #4
 800145e:	4807      	ldr	r0, [pc, #28]	@ (800147c <LCD_IO_Init+0xec>)
 8001460:	f001 ff62 	bl	8003328 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8001464:	f7ff fed6 	bl	8001214 <SPIx_Init>
  }
}
 8001468:	bf00      	nop
 800146a:	3720      	adds	r7, #32
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	2000019c 	.word	0x2000019c
 8001474:	40023800 	.word	0x40023800
 8001478:	40020c00 	.word	0x40020c00
 800147c:	40020800 	.word	0x40020800

08001480 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800148a:	2201      	movs	r2, #1
 800148c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001490:	480a      	ldr	r0, [pc, #40]	@ (80014bc <LCD_IO_WriteData+0x3c>)
 8001492:	f001 ff49 	bl	8003328 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8001496:	2200      	movs	r2, #0
 8001498:	2104      	movs	r1, #4
 800149a:	4809      	ldr	r0, [pc, #36]	@ (80014c0 <LCD_IO_WriteData+0x40>)
 800149c:	f001 ff44 	bl	8003328 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80014a0:	88fb      	ldrh	r3, [r7, #6]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff ff10 	bl	80012c8 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80014a8:	2201      	movs	r2, #1
 80014aa:	2104      	movs	r1, #4
 80014ac:	4804      	ldr	r0, [pc, #16]	@ (80014c0 <LCD_IO_WriteData+0x40>)
 80014ae:	f001 ff3b 	bl	8003328 <HAL_GPIO_WritePin>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40020c00 	.word	0x40020c00
 80014c0:	40020800 	.word	0x40020800

080014c4 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80014ce:	2200      	movs	r2, #0
 80014d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014d4:	480a      	ldr	r0, [pc, #40]	@ (8001500 <LCD_IO_WriteReg+0x3c>)
 80014d6:	f001 ff27 	bl	8003328 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80014da:	2200      	movs	r2, #0
 80014dc:	2104      	movs	r1, #4
 80014de:	4809      	ldr	r0, [pc, #36]	@ (8001504 <LCD_IO_WriteReg+0x40>)
 80014e0:	f001 ff22 	bl	8003328 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff feed 	bl	80012c8 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80014ee:	2201      	movs	r2, #1
 80014f0:	2104      	movs	r1, #4
 80014f2:	4804      	ldr	r0, [pc, #16]	@ (8001504 <LCD_IO_WriteReg+0x40>)
 80014f4:	f001 ff18 	bl	8003328 <HAL_GPIO_WritePin>
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40020c00 	.word	0x40020c00
 8001504:	40020800 	.word	0x40020800

08001508 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	460a      	mov	r2, r1
 8001512:	80fb      	strh	r3, [r7, #6]
 8001514:	4613      	mov	r3, r2
 8001516:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 800151c:	2200      	movs	r2, #0
 800151e:	2104      	movs	r1, #4
 8001520:	4810      	ldr	r0, [pc, #64]	@ (8001564 <LCD_IO_ReadData+0x5c>)
 8001522:	f001 ff01 	bl	8003328 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001526:	2200      	movs	r2, #0
 8001528:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800152c:	480e      	ldr	r0, [pc, #56]	@ (8001568 <LCD_IO_ReadData+0x60>)
 800152e:	f001 fefb 	bl	8003328 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8001532:	88fb      	ldrh	r3, [r7, #6]
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fec7 	bl	80012c8 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 800153a:	797b      	ldrb	r3, [r7, #5]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fea3 	bl	8001288 <SPIx_Read>
 8001542:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001544:	2201      	movs	r2, #1
 8001546:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800154a:	4807      	ldr	r0, [pc, #28]	@ (8001568 <LCD_IO_ReadData+0x60>)
 800154c:	f001 feec 	bl	8003328 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001550:	2201      	movs	r2, #1
 8001552:	2104      	movs	r1, #4
 8001554:	4803      	ldr	r0, [pc, #12]	@ (8001564 <LCD_IO_ReadData+0x5c>)
 8001556:	f001 fee7 	bl	8003328 <HAL_GPIO_WritePin>
  
  return readvalue;
 800155a:	68fb      	ldr	r3, [r7, #12]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40020800 	.word	0x40020800
 8001568:	40020c00 	.word	0x40020c00

0800156c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f000 fe87 	bl	8002288 <HAL_Delay>
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8001588:	4b2d      	ldr	r3, [pc, #180]	@ (8001640 <BSP_LCD_Init+0xbc>)
 800158a:	4a2e      	ldr	r2, [pc, #184]	@ (8001644 <BSP_LCD_Init+0xc0>)
 800158c:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 800158e:	4b2c      	ldr	r3, [pc, #176]	@ (8001640 <BSP_LCD_Init+0xbc>)
 8001590:	2209      	movs	r2, #9
 8001592:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8001594:	4b2a      	ldr	r3, [pc, #168]	@ (8001640 <BSP_LCD_Init+0xbc>)
 8001596:	2201      	movs	r2, #1
 8001598:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 800159a:	4b29      	ldr	r3, [pc, #164]	@ (8001640 <BSP_LCD_Init+0xbc>)
 800159c:	221d      	movs	r2, #29
 800159e:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80015a0:	4b27      	ldr	r3, [pc, #156]	@ (8001640 <BSP_LCD_Init+0xbc>)
 80015a2:	2203      	movs	r2, #3
 80015a4:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 80015a6:	4b26      	ldr	r3, [pc, #152]	@ (8001640 <BSP_LCD_Init+0xbc>)
 80015a8:	f240 120d 	movw	r2, #269	@ 0x10d
 80015ac:	625a      	str	r2, [r3, #36]	@ 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80015ae:	4b24      	ldr	r3, [pc, #144]	@ (8001640 <BSP_LCD_Init+0xbc>)
 80015b0:	f240 1243 	movw	r2, #323	@ 0x143
 80015b4:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80015b6:	4b22      	ldr	r3, [pc, #136]	@ (8001640 <BSP_LCD_Init+0xbc>)
 80015b8:	f240 1217 	movw	r2, #279	@ 0x117
 80015bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80015be:	4b20      	ldr	r3, [pc, #128]	@ (8001640 <BSP_LCD_Init+0xbc>)
 80015c0:	f240 1247 	movw	r2, #327	@ 0x147
 80015c4:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 80015c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001640 <BSP_LCD_Init+0xbc>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80015ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001640 <BSP_LCD_Init+0xbc>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80015d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001640 <BSP_LCD_Init+0xbc>)
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80015de:	4b1a      	ldr	r3, [pc, #104]	@ (8001648 <BSP_LCD_Init+0xc4>)
 80015e0:	2208      	movs	r2, #8
 80015e2:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80015e4:	4b18      	ldr	r3, [pc, #96]	@ (8001648 <BSP_LCD_Init+0xc4>)
 80015e6:	22c0      	movs	r2, #192	@ 0xc0
 80015e8:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80015ea:	4b17      	ldr	r3, [pc, #92]	@ (8001648 <BSP_LCD_Init+0xc4>)
 80015ec:	2204      	movs	r2, #4
 80015ee:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80015f0:	4b15      	ldr	r3, [pc, #84]	@ (8001648 <BSP_LCD_Init+0xc4>)
 80015f2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80015f6:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80015f8:	4813      	ldr	r0, [pc, #76]	@ (8001648 <BSP_LCD_Init+0xc4>)
 80015fa:	f002 fe33 	bl	8004264 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80015fe:	4b10      	ldr	r3, [pc, #64]	@ (8001640 <BSP_LCD_Init+0xbc>)
 8001600:	2200      	movs	r2, #0
 8001602:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001604:	4b0e      	ldr	r3, [pc, #56]	@ (8001640 <BSP_LCD_Init+0xbc>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800160a:	4b0d      	ldr	r3, [pc, #52]	@ (8001640 <BSP_LCD_Init+0xbc>)
 800160c:	2200      	movs	r2, #0
 800160e:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001610:	4b0b      	ldr	r3, [pc, #44]	@ (8001640 <BSP_LCD_Init+0xbc>)
 8001612:	2200      	movs	r2, #0
 8001614:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8001616:	f000 fa0d 	bl	8001a34 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 800161a:	4809      	ldr	r0, [pc, #36]	@ (8001640 <BSP_LCD_Init+0xbc>)
 800161c:	f001 fe9e 	bl	800335c <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8001620:	4b0a      	ldr	r3, [pc, #40]	@ (800164c <BSP_LCD_Init+0xc8>)
 8001622:	4a0b      	ldr	r2, [pc, #44]	@ (8001650 <BSP_LCD_Init+0xcc>)
 8001624:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8001626:	4b09      	ldr	r3, [pc, #36]	@ (800164c <BSP_LCD_Init+0xc8>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 800162e:	f000 fbef 	bl	8001e10 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001632:	4808      	ldr	r0, [pc, #32]	@ (8001654 <BSP_LCD_Init+0xd0>)
 8001634:	f000 f88c 	bl	8001750 <BSP_LCD_SetFont>

  return LCD_OK;
 8001638:	2300      	movs	r3, #0
}  
 800163a:	4618      	mov	r0, r3
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200001a0 	.word	0x200001a0
 8001644:	40016800 	.word	0x40016800
 8001648:	20000288 	.word	0x20000288
 800164c:	200002d4 	.word	0x200002d4
 8001650:	2000007c 	.word	0x2000007c
 8001654:	200000b8 	.word	0x200000b8

08001658 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 800165c:	4b03      	ldr	r3, [pc, #12]	@ (800166c <BSP_LCD_GetXSize+0x14>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001662:	4798      	blx	r3
 8001664:	4603      	mov	r3, r0
}
 8001666:	4618      	mov	r0, r3
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200002d4 	.word	0x200002d4

08001670 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8001674:	4b03      	ldr	r3, [pc, #12]	@ (8001684 <BSP_LCD_GetYSize+0x14>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800167a:	4798      	blx	r3
 800167c:	4603      	mov	r3, r0
}
 800167e:	4618      	mov	r0, r3
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200002d4 	.word	0x200002d4

08001688 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8001688:	b580      	push	{r7, lr}
 800168a:	b090      	sub	sp, #64	@ 0x40
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	6039      	str	r1, [r7, #0]
 8001692:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001698:	f7ff ffde 	bl	8001658 <BSP_LCD_GetXSize>
 800169c:	4603      	mov	r3, r0
 800169e:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80016a4:	f7ff ffe4 	bl	8001670 <BSP_LCD_GetYSize>
 80016a8:	4603      	mov	r3, r0
 80016aa:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80016ac:	2300      	movs	r3, #0
 80016ae:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 80016b4:	23ff      	movs	r3, #255	@ 0xff
 80016b6:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80016ce:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80016d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80016d4:	2307      	movs	r3, #7
 80016d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80016d8:	f7ff ffbe 	bl	8001658 <BSP_LCD_GetXSize>
 80016dc:	4603      	mov	r3, r0
 80016de:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80016e0:	f7ff ffc6 	bl	8001670 <BSP_LCD_GetYSize>
 80016e4:	4603      	mov	r3, r0
 80016e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80016e8:	88fa      	ldrh	r2, [r7, #6]
 80016ea:	f107 030c 	add.w	r3, r7, #12
 80016ee:	4619      	mov	r1, r3
 80016f0:	4814      	ldr	r0, [pc, #80]	@ (8001744 <BSP_LCD_LayerDefaultInit+0xbc>)
 80016f2:	f001 ff03 	bl	80034fc <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80016f6:	88fa      	ldrh	r2, [r7, #6]
 80016f8:	4913      	ldr	r1, [pc, #76]	@ (8001748 <BSP_LCD_LayerDefaultInit+0xc0>)
 80016fa:	4613      	mov	r3, r2
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	4413      	add	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	440b      	add	r3, r1
 8001704:	3304      	adds	r3, #4
 8001706:	f04f 32ff 	mov.w	r2, #4294967295
 800170a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 800170c:	88fa      	ldrh	r2, [r7, #6]
 800170e:	490e      	ldr	r1, [pc, #56]	@ (8001748 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001710:	4613      	mov	r3, r2
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	4413      	add	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	440b      	add	r3, r1
 800171a:	3308      	adds	r3, #8
 800171c:	4a0b      	ldr	r2, [pc, #44]	@ (800174c <BSP_LCD_LayerDefaultInit+0xc4>)
 800171e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8001720:	88fa      	ldrh	r2, [r7, #6]
 8001722:	4909      	ldr	r1, [pc, #36]	@ (8001748 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001724:	4613      	mov	r3, r2
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	4413      	add	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	440b      	add	r3, r1
 800172e:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8001732:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8001734:	4803      	ldr	r0, [pc, #12]	@ (8001744 <BSP_LCD_LayerDefaultInit+0xbc>)
 8001736:	f001 ff1f 	bl	8003578 <HAL_LTDC_EnableDither>
}
 800173a:	bf00      	nop
 800173c:	3740      	adds	r7, #64	@ 0x40
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200001a0 	.word	0x200001a0
 8001748:	200002bc 	.word	0x200002bc
 800174c:	200000b8 	.word	0x200000b8

08001750 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8001758:	4b08      	ldr	r3, [pc, #32]	@ (800177c <BSP_LCD_SetFont+0x2c>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4908      	ldr	r1, [pc, #32]	@ (8001780 <BSP_LCD_SetFont+0x30>)
 800175e:	4613      	mov	r3, r2
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	4413      	add	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	440b      	add	r3, r1
 8001768:	3308      	adds	r3, #8
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	601a      	str	r2, [r3, #0]
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	200002b8 	.word	0x200002b8
 8001780:	200002bc 	.word	0x200002bc

08001784 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8001788:	4b07      	ldr	r3, [pc, #28]	@ (80017a8 <BSP_LCD_GetFont+0x24>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4907      	ldr	r1, [pc, #28]	@ (80017ac <BSP_LCD_GetFont+0x28>)
 800178e:	4613      	mov	r3, r2
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	4413      	add	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	440b      	add	r3, r1
 8001798:	3308      	adds	r3, #8
 800179a:	681b      	ldr	r3, [r3, #0]
}
 800179c:	4618      	mov	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	200002b8 	.word	0x200002b8
 80017ac:	200002bc 	.word	0x200002bc

080017b0 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80017b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af02      	add	r7, sp, #8
 80017b6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80017b8:	4b0f      	ldr	r3, [pc, #60]	@ (80017f8 <BSP_LCD_Clear+0x48>)
 80017ba:	681c      	ldr	r4, [r3, #0]
 80017bc:	4b0e      	ldr	r3, [pc, #56]	@ (80017f8 <BSP_LCD_Clear+0x48>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a0e      	ldr	r2, [pc, #56]	@ (80017fc <BSP_LCD_Clear+0x4c>)
 80017c2:	2134      	movs	r1, #52	@ 0x34
 80017c4:	fb01 f303 	mul.w	r3, r1, r3
 80017c8:	4413      	add	r3, r2
 80017ca:	335c      	adds	r3, #92	@ 0x5c
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	461e      	mov	r6, r3
 80017d0:	f7ff ff42 	bl	8001658 <BSP_LCD_GetXSize>
 80017d4:	4605      	mov	r5, r0
 80017d6:	f7ff ff4b 	bl	8001670 <BSP_LCD_GetYSize>
 80017da:	4602      	mov	r2, r0
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	9301      	str	r3, [sp, #4]
 80017e0:	2300      	movs	r3, #0
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	4613      	mov	r3, r2
 80017e6:	462a      	mov	r2, r5
 80017e8:	4631      	mov	r1, r6
 80017ea:	4620      	mov	r0, r4
 80017ec:	f000 fad8 	bl	8001da0 <FillBuffer>
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017f8:	200002b8 	.word	0x200002b8
 80017fc:	200001a0 	.word	0x200001a0

08001800 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001800:	b590      	push	{r4, r7, lr}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	80fb      	strh	r3, [r7, #6]
 800180a:	460b      	mov	r3, r1
 800180c:	80bb      	strh	r3, [r7, #4]
 800180e:	4613      	mov	r3, r2
 8001810:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001812:	4b1b      	ldr	r3, [pc, #108]	@ (8001880 <BSP_LCD_DisplayChar+0x80>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	491b      	ldr	r1, [pc, #108]	@ (8001884 <BSP_LCD_DisplayChar+0x84>)
 8001818:	4613      	mov	r3, r2
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	4413      	add	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	440b      	add	r3, r1
 8001822:	3308      	adds	r3, #8
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6819      	ldr	r1, [r3, #0]
 8001828:	78fb      	ldrb	r3, [r7, #3]
 800182a:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800182e:	4b14      	ldr	r3, [pc, #80]	@ (8001880 <BSP_LCD_DisplayChar+0x80>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	4c14      	ldr	r4, [pc, #80]	@ (8001884 <BSP_LCD_DisplayChar+0x84>)
 8001834:	4613      	mov	r3, r2
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	4413      	add	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4423      	add	r3, r4
 800183e:	3308      	adds	r3, #8
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001844:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001848:	4b0d      	ldr	r3, [pc, #52]	@ (8001880 <BSP_LCD_DisplayChar+0x80>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	4c0d      	ldr	r4, [pc, #52]	@ (8001884 <BSP_LCD_DisplayChar+0x84>)
 800184e:	4613      	mov	r3, r2
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	4413      	add	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4423      	add	r3, r4
 8001858:	3308      	adds	r3, #8
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	889b      	ldrh	r3, [r3, #4]
 800185e:	3307      	adds	r3, #7
 8001860:	2b00      	cmp	r3, #0
 8001862:	da00      	bge.n	8001866 <BSP_LCD_DisplayChar+0x66>
 8001864:	3307      	adds	r3, #7
 8001866:	10db      	asrs	r3, r3, #3
 8001868:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800186c:	18ca      	adds	r2, r1, r3
 800186e:	88b9      	ldrh	r1, [r7, #4]
 8001870:	88fb      	ldrh	r3, [r7, #6]
 8001872:	4618      	mov	r0, r3
 8001874:	f000 f9da 	bl	8001c2c <DrawChar>
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	bd90      	pop	{r4, r7, pc}
 8001880:	200002b8 	.word	0x200002b8
 8001884:	200002bc 	.word	0x200002bc

08001888 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8001888:	b5b0      	push	{r4, r5, r7, lr}
 800188a:	b088      	sub	sp, #32
 800188c:	af00      	add	r7, sp, #0
 800188e:	60ba      	str	r2, [r7, #8]
 8001890:	461a      	mov	r2, r3
 8001892:	4603      	mov	r3, r0
 8001894:	81fb      	strh	r3, [r7, #14]
 8001896:	460b      	mov	r3, r1
 8001898:	81bb      	strh	r3, [r7, #12]
 800189a:	4613      	mov	r3, r2
 800189c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800189e:	2301      	movs	r3, #1
 80018a0:	83fb      	strh	r3, [r7, #30]
 80018a2:	2300      	movs	r3, #0
 80018a4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80018a6:	2300      	movs	r3, #0
 80018a8:	61bb      	str	r3, [r7, #24]
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80018b2:	e002      	b.n	80018ba <BSP_LCD_DisplayStringAt+0x32>
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	3301      	adds	r3, #1
 80018b8:	61bb      	str	r3, [r7, #24]
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	1c5a      	adds	r2, r3, #1
 80018be:	617a      	str	r2, [r7, #20]
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f6      	bne.n	80018b4 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80018c6:	f7ff fec7 	bl	8001658 <BSP_LCD_GetXSize>
 80018ca:	4601      	mov	r1, r0
 80018cc:	4b4b      	ldr	r3, [pc, #300]	@ (80019fc <BSP_LCD_DisplayStringAt+0x174>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	484b      	ldr	r0, [pc, #300]	@ (8001a00 <BSP_LCD_DisplayStringAt+0x178>)
 80018d2:	4613      	mov	r3, r2
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4413      	add	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4403      	add	r3, r0
 80018dc:	3308      	adds	r3, #8
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	889b      	ldrh	r3, [r3, #4]
 80018e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80018e6:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	d01c      	beq.n	8001928 <BSP_LCD_DisplayStringAt+0xa0>
 80018ee:	2b03      	cmp	r3, #3
 80018f0:	dc33      	bgt.n	800195a <BSP_LCD_DisplayStringAt+0xd2>
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d002      	beq.n	80018fc <BSP_LCD_DisplayStringAt+0x74>
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d019      	beq.n	800192e <BSP_LCD_DisplayStringAt+0xa6>
 80018fa:	e02e      	b.n	800195a <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	1ad1      	subs	r1, r2, r3
 8001902:	4b3e      	ldr	r3, [pc, #248]	@ (80019fc <BSP_LCD_DisplayStringAt+0x174>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	483e      	ldr	r0, [pc, #248]	@ (8001a00 <BSP_LCD_DisplayStringAt+0x178>)
 8001908:	4613      	mov	r3, r2
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	4413      	add	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4403      	add	r3, r0
 8001912:	3308      	adds	r3, #8
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	889b      	ldrh	r3, [r3, #4]
 8001918:	fb01 f303 	mul.w	r3, r1, r3
 800191c:	085b      	lsrs	r3, r3, #1
 800191e:	b29a      	uxth	r2, r3
 8001920:	89fb      	ldrh	r3, [r7, #14]
 8001922:	4413      	add	r3, r2
 8001924:	83fb      	strh	r3, [r7, #30]
      break;
 8001926:	e01b      	b.n	8001960 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8001928:	89fb      	ldrh	r3, [r7, #14]
 800192a:	83fb      	strh	r3, [r7, #30]
      break;
 800192c:	e018      	b.n	8001960 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	b299      	uxth	r1, r3
 8001936:	4b31      	ldr	r3, [pc, #196]	@ (80019fc <BSP_LCD_DisplayStringAt+0x174>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	4831      	ldr	r0, [pc, #196]	@ (8001a00 <BSP_LCD_DisplayStringAt+0x178>)
 800193c:	4613      	mov	r3, r2
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	4413      	add	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4403      	add	r3, r0
 8001946:	3308      	adds	r3, #8
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	889b      	ldrh	r3, [r3, #4]
 800194c:	fb11 f303 	smulbb	r3, r1, r3
 8001950:	b29a      	uxth	r2, r3
 8001952:	89fb      	ldrh	r3, [r7, #14]
 8001954:	4413      	add	r3, r2
 8001956:	83fb      	strh	r3, [r7, #30]
      break;
 8001958:	e002      	b.n	8001960 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 800195a:	89fb      	ldrh	r3, [r7, #14]
 800195c:	83fb      	strh	r3, [r7, #30]
      break;
 800195e:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001960:	e01a      	b.n	8001998 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	781a      	ldrb	r2, [r3, #0]
 8001966:	89b9      	ldrh	r1, [r7, #12]
 8001968:	8bfb      	ldrh	r3, [r7, #30]
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff ff48 	bl	8001800 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001970:	4b22      	ldr	r3, [pc, #136]	@ (80019fc <BSP_LCD_DisplayStringAt+0x174>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4922      	ldr	r1, [pc, #136]	@ (8001a00 <BSP_LCD_DisplayStringAt+0x178>)
 8001976:	4613      	mov	r3, r2
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	4413      	add	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	440b      	add	r3, r1
 8001980:	3308      	adds	r3, #8
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	889a      	ldrh	r2, [r3, #4]
 8001986:	8bfb      	ldrh	r3, [r7, #30]
 8001988:	4413      	add	r3, r2
 800198a:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	3301      	adds	r3, #1
 8001990:	60bb      	str	r3, [r7, #8]
    i++;
 8001992:	8bbb      	ldrh	r3, [r7, #28]
 8001994:	3301      	adds	r3, #1
 8001996:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	bf14      	ite	ne
 80019a0:	2301      	movne	r3, #1
 80019a2:	2300      	moveq	r3, #0
 80019a4:	b2dc      	uxtb	r4, r3
 80019a6:	f7ff fe57 	bl	8001658 <BSP_LCD_GetXSize>
 80019aa:	8bb9      	ldrh	r1, [r7, #28]
 80019ac:	4b13      	ldr	r3, [pc, #76]	@ (80019fc <BSP_LCD_DisplayStringAt+0x174>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4d13      	ldr	r5, [pc, #76]	@ (8001a00 <BSP_LCD_DisplayStringAt+0x178>)
 80019b2:	4613      	mov	r3, r2
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	4413      	add	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	442b      	add	r3, r5
 80019bc:	3308      	adds	r3, #8
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	889b      	ldrh	r3, [r3, #4]
 80019c2:	fb01 f303 	mul.w	r3, r1, r3
 80019c6:	1ac3      	subs	r3, r0, r3
 80019c8:	b299      	uxth	r1, r3
 80019ca:	4b0c      	ldr	r3, [pc, #48]	@ (80019fc <BSP_LCD_DisplayStringAt+0x174>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	480c      	ldr	r0, [pc, #48]	@ (8001a00 <BSP_LCD_DisplayStringAt+0x178>)
 80019d0:	4613      	mov	r3, r2
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	4413      	add	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4403      	add	r3, r0
 80019da:	3308      	adds	r3, #8
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	889b      	ldrh	r3, [r3, #4]
 80019e0:	4299      	cmp	r1, r3
 80019e2:	bf2c      	ite	cs
 80019e4:	2301      	movcs	r3, #1
 80019e6:	2300      	movcc	r3, #0
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	4023      	ands	r3, r4
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1b7      	bne.n	8001962 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 80019f2:	bf00      	nop
 80019f4:	bf00      	nop
 80019f6:	3720      	adds	r7, #32
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bdb0      	pop	{r4, r5, r7, pc}
 80019fc:	200002b8 	.word	0x200002b8
 8001a00:	200002bc 	.word	0x200002bc

08001a04 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	6039      	str	r1, [r7, #0]
 8001a0e:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8001a10:	f7ff feb8 	bl	8001784 <BSP_LCD_GetFont>
 8001a14:	4603      	mov	r3, r0
 8001a16:	88db      	ldrh	r3, [r3, #6]
 8001a18:	88fa      	ldrh	r2, [r7, #6]
 8001a1a:	fb12 f303 	smulbb	r3, r2, r3
 8001a1e:	b299      	uxth	r1, r3
 8001a20:	2303      	movs	r3, #3
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	2000      	movs	r0, #0
 8001a26:	f7ff ff2f 	bl	8001888 <BSP_LCD_DisplayStringAt>
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08e      	sub	sp, #56	@ 0x38
 8001a38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	623b      	str	r3, [r7, #32]
 8001a3e:	4b61      	ldr	r3, [pc, #388]	@ (8001bc4 <BSP_LCD_MspInit+0x190>)
 8001a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a42:	4a60      	ldr	r2, [pc, #384]	@ (8001bc4 <BSP_LCD_MspInit+0x190>)
 8001a44:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001a48:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a4a:	4b5e      	ldr	r3, [pc, #376]	@ (8001bc4 <BSP_LCD_MspInit+0x190>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a52:	623b      	str	r3, [r7, #32]
 8001a54:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8001a56:	2300      	movs	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]
 8001a5a:	4b5a      	ldr	r3, [pc, #360]	@ (8001bc4 <BSP_LCD_MspInit+0x190>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5e:	4a59      	ldr	r2, [pc, #356]	@ (8001bc4 <BSP_LCD_MspInit+0x190>)
 8001a60:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a66:	4b57      	ldr	r3, [pc, #348]	@ (8001bc4 <BSP_LCD_MspInit+0x190>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001a6e:	61fb      	str	r3, [r7, #28]
 8001a70:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	61bb      	str	r3, [r7, #24]
 8001a76:	4b53      	ldr	r3, [pc, #332]	@ (8001bc4 <BSP_LCD_MspInit+0x190>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7a:	4a52      	ldr	r2, [pc, #328]	@ (8001bc4 <BSP_LCD_MspInit+0x190>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a82:	4b50      	ldr	r3, [pc, #320]	@ (8001bc4 <BSP_LCD_MspInit+0x190>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	61bb      	str	r3, [r7, #24]
 8001a8c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	4b4c      	ldr	r3, [pc, #304]	@ (8001bc4 <BSP_LCD_MspInit+0x190>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a96:	4a4b      	ldr	r2, [pc, #300]	@ (8001bc4 <BSP_LCD_MspInit+0x190>)
 8001a98:	f043 0302 	orr.w	r3, r3, #2
 8001a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a9e:	4b49      	ldr	r3, [pc, #292]	@ (8001bc4 <BSP_LCD_MspInit+0x190>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	4b45      	ldr	r3, [pc, #276]	@ (8001bc4 <BSP_LCD_MspInit+0x190>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	4a44      	ldr	r2, [pc, #272]	@ (8001bc4 <BSP_LCD_MspInit+0x190>)
 8001ab4:	f043 0304 	orr.w	r3, r3, #4
 8001ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aba:	4b42      	ldr	r3, [pc, #264]	@ (8001bc4 <BSP_LCD_MspInit+0x190>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	f003 0304 	and.w	r3, r3, #4
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	4b3e      	ldr	r3, [pc, #248]	@ (8001bc4 <BSP_LCD_MspInit+0x190>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ace:	4a3d      	ldr	r2, [pc, #244]	@ (8001bc4 <BSP_LCD_MspInit+0x190>)
 8001ad0:	f043 0308 	orr.w	r3, r3, #8
 8001ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ad6:	4b3b      	ldr	r3, [pc, #236]	@ (8001bc4 <BSP_LCD_MspInit+0x190>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	4b37      	ldr	r3, [pc, #220]	@ (8001bc4 <BSP_LCD_MspInit+0x190>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aea:	4a36      	ldr	r2, [pc, #216]	@ (8001bc4 <BSP_LCD_MspInit+0x190>)
 8001aec:	f043 0320 	orr.w	r3, r3, #32
 8001af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af2:	4b34      	ldr	r3, [pc, #208]	@ (8001bc4 <BSP_LCD_MspInit+0x190>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	f003 0320 	and.w	r3, r3, #32
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	4b30      	ldr	r3, [pc, #192]	@ (8001bc4 <BSP_LCD_MspInit+0x190>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b06:	4a2f      	ldr	r2, [pc, #188]	@ (8001bc4 <BSP_LCD_MspInit+0x190>)
 8001b08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b0e:	4b2d      	ldr	r3, [pc, #180]	@ (8001bc4 <BSP_LCD_MspInit+0x190>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8001b1a:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001b1e:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001b20:	2302      	movs	r3, #2
 8001b22:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001b2c:	230e      	movs	r3, #14
 8001b2e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001b30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b34:	4619      	mov	r1, r3
 8001b36:	4824      	ldr	r0, [pc, #144]	@ (8001bc8 <BSP_LCD_MspInit+0x194>)
 8001b38:	f001 f926 	bl	8002d88 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001b3c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001b40:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001b42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b46:	4619      	mov	r1, r3
 8001b48:	4820      	ldr	r0, [pc, #128]	@ (8001bcc <BSP_LCD_MspInit+0x198>)
 8001b4a:	f001 f91d 	bl	8002d88 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001b4e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001b52:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001b54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b58:	4619      	mov	r1, r3
 8001b5a:	481d      	ldr	r0, [pc, #116]	@ (8001bd0 <BSP_LCD_MspInit+0x19c>)
 8001b5c:	f001 f914 	bl	8002d88 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001b60:	2348      	movs	r3, #72	@ 0x48
 8001b62:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001b64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b68:	4619      	mov	r1, r3
 8001b6a:	481a      	ldr	r0, [pc, #104]	@ (8001bd4 <BSP_LCD_MspInit+0x1a0>)
 8001b6c:	f001 f90c 	bl	8002d88 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001b70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b74:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8001b76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4816      	ldr	r0, [pc, #88]	@ (8001bd8 <BSP_LCD_MspInit+0x1a4>)
 8001b7e:	f001 f903 	bl	8002d88 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001b82:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001b86:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001b88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4813      	ldr	r0, [pc, #76]	@ (8001bdc <BSP_LCD_MspInit+0x1a8>)
 8001b90:	f001 f8fa 	bl	8002d88 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001b94:	2303      	movs	r3, #3
 8001b96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001b98:	2309      	movs	r3, #9
 8001b9a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001b9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	480a      	ldr	r0, [pc, #40]	@ (8001bcc <BSP_LCD_MspInit+0x198>)
 8001ba4:	f001 f8f0 	bl	8002d88 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001ba8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001bac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001bae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4809      	ldr	r0, [pc, #36]	@ (8001bdc <BSP_LCD_MspInit+0x1a8>)
 8001bb6:	f001 f8e7 	bl	8002d88 <HAL_GPIO_Init>
}
 8001bba:	bf00      	nop
 8001bbc:	3738      	adds	r7, #56	@ 0x38
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40020000 	.word	0x40020000
 8001bcc:	40020400 	.word	0x40020400
 8001bd0:	40020800 	.word	0x40020800
 8001bd4:	40020c00 	.word	0x40020c00
 8001bd8:	40021400 	.word	0x40021400
 8001bdc:	40021800 	.word	0x40021800

08001be0 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001be0:	b5b0      	push	{r4, r5, r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	603a      	str	r2, [r7, #0]
 8001bea:	80fb      	strh	r3, [r7, #6]
 8001bec:	460b      	mov	r3, r1
 8001bee:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8001c24 <BSP_LCD_DrawPixel+0x44>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a0c      	ldr	r2, [pc, #48]	@ (8001c28 <BSP_LCD_DrawPixel+0x48>)
 8001bf6:	2134      	movs	r1, #52	@ 0x34
 8001bf8:	fb01 f303 	mul.w	r3, r1, r3
 8001bfc:	4413      	add	r3, r2
 8001bfe:	335c      	adds	r3, #92	@ 0x5c
 8001c00:	681c      	ldr	r4, [r3, #0]
 8001c02:	88bd      	ldrh	r5, [r7, #4]
 8001c04:	f7ff fd28 	bl	8001658 <BSP_LCD_GetXSize>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	fb03 f205 	mul.w	r2, r3, r5
 8001c0e:	88fb      	ldrh	r3, [r7, #6]
 8001c10:	4413      	add	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4423      	add	r3, r4
 8001c16:	461a      	mov	r2, r3
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	6013      	str	r3, [r2, #0]
}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bdb0      	pop	{r4, r5, r7, pc}
 8001c24:	200002b8 	.word	0x200002b8
 8001c28:	200001a0 	.word	0x200001a0

08001c2c <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	603a      	str	r2, [r7, #0]
 8001c36:	80fb      	strh	r3, [r7, #6]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	61fb      	str	r3, [r7, #28]
 8001c40:	2300      	movs	r3, #0
 8001c42:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8001c48:	4b53      	ldr	r3, [pc, #332]	@ (8001d98 <DrawChar+0x16c>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4953      	ldr	r1, [pc, #332]	@ (8001d9c <DrawChar+0x170>)
 8001c4e:	4613      	mov	r3, r2
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	4413      	add	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	440b      	add	r3, r1
 8001c58:	3308      	adds	r3, #8
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	88db      	ldrh	r3, [r3, #6]
 8001c5e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8001c60:	4b4d      	ldr	r3, [pc, #308]	@ (8001d98 <DrawChar+0x16c>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	494d      	ldr	r1, [pc, #308]	@ (8001d9c <DrawChar+0x170>)
 8001c66:	4613      	mov	r3, r2
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	4413      	add	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	440b      	add	r3, r1
 8001c70:	3308      	adds	r3, #8
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	889b      	ldrh	r3, [r3, #4]
 8001c76:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8001c78:	8a3b      	ldrh	r3, [r7, #16]
 8001c7a:	3307      	adds	r3, #7
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	da00      	bge.n	8001c82 <DrawChar+0x56>
 8001c80:	3307      	adds	r3, #7
 8001c82:	10db      	asrs	r3, r3, #3
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	8a3b      	ldrh	r3, [r7, #16]
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
 8001c96:	e076      	b.n	8001d86 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8001c98:	8a3b      	ldrh	r3, [r7, #16]
 8001c9a:	3307      	adds	r3, #7
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	da00      	bge.n	8001ca2 <DrawChar+0x76>
 8001ca0:	3307      	adds	r3, #7
 8001ca2:	10db      	asrs	r3, r3, #3
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	fb02 f303 	mul.w	r3, r2, r3
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	4413      	add	r3, r2
 8001cb0:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8001cb2:	8a3b      	ldrh	r3, [r7, #16]
 8001cb4:	3307      	adds	r3, #7
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	da00      	bge.n	8001cbc <DrawChar+0x90>
 8001cba:	3307      	adds	r3, #7
 8001cbc:	10db      	asrs	r3, r3, #3
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d002      	beq.n	8001cc8 <DrawChar+0x9c>
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d004      	beq.n	8001cd0 <DrawChar+0xa4>
 8001cc6:	e00c      	b.n	8001ce2 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	617b      	str	r3, [r7, #20]
      break;
 8001cce:	e016      	b.n	8001cfe <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	021b      	lsls	r3, r3, #8
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	3201      	adds	r2, #1
 8001cda:	7812      	ldrb	r2, [r2, #0]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	617b      	str	r3, [r7, #20]
      break;
 8001ce0:	e00d      	b.n	8001cfe <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	041a      	lsls	r2, r3, #16
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	3301      	adds	r3, #1
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	021b      	lsls	r3, r3, #8
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	3202      	adds	r2, #2
 8001cf6:	7812      	ldrb	r2, [r2, #0]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	617b      	str	r3, [r7, #20]
      break;
 8001cfc:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61bb      	str	r3, [r7, #24]
 8001d02:	e036      	b.n	8001d72 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8001d04:	8a3a      	ldrh	r2, [r7, #16]
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	1ad2      	subs	r2, r2, r3
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	2201      	movs	r2, #1
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	461a      	mov	r2, r3
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d012      	beq.n	8001d46 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	4413      	add	r3, r2
 8001d28:	b298      	uxth	r0, r3
 8001d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001d98 <DrawChar+0x16c>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	491b      	ldr	r1, [pc, #108]	@ (8001d9c <DrawChar+0x170>)
 8001d30:	4613      	mov	r3, r2
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	4413      	add	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	440b      	add	r3, r1
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	88bb      	ldrh	r3, [r7, #4]
 8001d3e:	4619      	mov	r1, r3
 8001d40:	f7ff ff4e 	bl	8001be0 <BSP_LCD_DrawPixel>
 8001d44:	e012      	b.n	8001d6c <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	88fb      	ldrh	r3, [r7, #6]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	b298      	uxth	r0, r3
 8001d50:	4b11      	ldr	r3, [pc, #68]	@ (8001d98 <DrawChar+0x16c>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	4911      	ldr	r1, [pc, #68]	@ (8001d9c <DrawChar+0x170>)
 8001d56:	4613      	mov	r3, r2
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	4413      	add	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	440b      	add	r3, r1
 8001d60:	3304      	adds	r3, #4
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	88bb      	ldrh	r3, [r7, #4]
 8001d66:	4619      	mov	r1, r3
 8001d68:	f7ff ff3a 	bl	8001be0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	61bb      	str	r3, [r7, #24]
 8001d72:	8a3b      	ldrh	r3, [r7, #16]
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d3c4      	bcc.n	8001d04 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8001d7a:	88bb      	ldrh	r3, [r7, #4]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	3301      	adds	r3, #1
 8001d84:	61fb      	str	r3, [r7, #28]
 8001d86:	8a7b      	ldrh	r3, [r7, #18]
 8001d88:	69fa      	ldr	r2, [r7, #28]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d384      	bcc.n	8001c98 <DrawChar+0x6c>
  }
}
 8001d8e:	bf00      	nop
 8001d90:	bf00      	nop
 8001d92:	3720      	adds	r7, #32
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	200002b8 	.word	0x200002b8
 8001d9c:	200002bc 	.word	0x200002bc

08001da0 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af02      	add	r7, sp, #8
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
 8001dac:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8001dae:	4b16      	ldr	r3, [pc, #88]	@ (8001e08 <FillBuffer+0x68>)
 8001db0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001db4:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8001db6:	4b14      	ldr	r3, [pc, #80]	@ (8001e08 <FillBuffer+0x68>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8001dbc:	4a12      	ldr	r2, [pc, #72]	@ (8001e08 <FillBuffer+0x68>)
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8001dc2:	4b11      	ldr	r3, [pc, #68]	@ (8001e08 <FillBuffer+0x68>)
 8001dc4:	4a11      	ldr	r2, [pc, #68]	@ (8001e0c <FillBuffer+0x6c>)
 8001dc6:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8001dc8:	480f      	ldr	r0, [pc, #60]	@ (8001e08 <FillBuffer+0x68>)
 8001dca:	f000 fd51 	bl	8002870 <HAL_DMA2D_Init>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d115      	bne.n	8001e00 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8001dd4:	68f9      	ldr	r1, [r7, #12]
 8001dd6:	480c      	ldr	r0, [pc, #48]	@ (8001e08 <FillBuffer+0x68>)
 8001dd8:	f000 fea8 	bl	8002b2c <HAL_DMA2D_ConfigLayer>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10e      	bne.n	8001e00 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	69f9      	ldr	r1, [r7, #28]
 8001dec:	4806      	ldr	r0, [pc, #24]	@ (8001e08 <FillBuffer+0x68>)
 8001dee:	f000 fd88 	bl	8002902 <HAL_DMA2D_Start>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d103      	bne.n	8001e00 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8001df8:	210a      	movs	r1, #10
 8001dfa:	4803      	ldr	r0, [pc, #12]	@ (8001e08 <FillBuffer+0x68>)
 8001dfc:	f000 fdac 	bl	8002958 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8001e00:	bf00      	nop
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20000248 	.word	0x20000248
 8001e0c:	4002b000 	.word	0x4002b000

08001e10 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001e14:	4b29      	ldr	r3, [pc, #164]	@ (8001ebc <BSP_SDRAM_Init+0xac>)
 8001e16:	4a2a      	ldr	r2, [pc, #168]	@ (8001ec0 <BSP_SDRAM_Init+0xb0>)
 8001e18:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8001e1a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ec4 <BSP_SDRAM_Init+0xb4>)
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8001e20:	4b28      	ldr	r3, [pc, #160]	@ (8001ec4 <BSP_SDRAM_Init+0xb4>)
 8001e22:	2207      	movs	r2, #7
 8001e24:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8001e26:	4b27      	ldr	r3, [pc, #156]	@ (8001ec4 <BSP_SDRAM_Init+0xb4>)
 8001e28:	2204      	movs	r2, #4
 8001e2a:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8001e2c:	4b25      	ldr	r3, [pc, #148]	@ (8001ec4 <BSP_SDRAM_Init+0xb4>)
 8001e2e:	2207      	movs	r2, #7
 8001e30:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8001e32:	4b24      	ldr	r3, [pc, #144]	@ (8001ec4 <BSP_SDRAM_Init+0xb4>)
 8001e34:	2202      	movs	r2, #2
 8001e36:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8001e38:	4b22      	ldr	r3, [pc, #136]	@ (8001ec4 <BSP_SDRAM_Init+0xb4>)
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8001e3e:	4b21      	ldr	r3, [pc, #132]	@ (8001ec4 <BSP_SDRAM_Init+0xb4>)
 8001e40:	2202      	movs	r2, #2
 8001e42:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8001e44:	4b1d      	ldr	r3, [pc, #116]	@ (8001ebc <BSP_SDRAM_Init+0xac>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001e4a:	4b1c      	ldr	r3, [pc, #112]	@ (8001ebc <BSP_SDRAM_Init+0xac>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001e50:	4b1a      	ldr	r3, [pc, #104]	@ (8001ebc <BSP_SDRAM_Init+0xac>)
 8001e52:	2204      	movs	r2, #4
 8001e54:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8001e56:	4b19      	ldr	r3, [pc, #100]	@ (8001ebc <BSP_SDRAM_Init+0xac>)
 8001e58:	2210      	movs	r2, #16
 8001e5a:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001e5c:	4b17      	ldr	r3, [pc, #92]	@ (8001ebc <BSP_SDRAM_Init+0xac>)
 8001e5e:	2240      	movs	r2, #64	@ 0x40
 8001e60:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8001e62:	4b16      	ldr	r3, [pc, #88]	@ (8001ebc <BSP_SDRAM_Init+0xac>)
 8001e64:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001e68:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001e6a:	4b14      	ldr	r3, [pc, #80]	@ (8001ebc <BSP_SDRAM_Init+0xac>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001e70:	4b12      	ldr	r3, [pc, #72]	@ (8001ebc <BSP_SDRAM_Init+0xac>)
 8001e72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e76:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8001e78:	4b10      	ldr	r3, [pc, #64]	@ (8001ebc <BSP_SDRAM_Init+0xac>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8001e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001ebc <BSP_SDRAM_Init+0xac>)
 8001e80:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e84:	629a      	str	r2, [r3, #40]	@ 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8001e86:	2100      	movs	r1, #0
 8001e88:	480c      	ldr	r0, [pc, #48]	@ (8001ebc <BSP_SDRAM_Init+0xac>)
 8001e8a:	f000 f87f 	bl	8001f8c <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8001e8e:	490d      	ldr	r1, [pc, #52]	@ (8001ec4 <BSP_SDRAM_Init+0xb4>)
 8001e90:	480a      	ldr	r0, [pc, #40]	@ (8001ebc <BSP_SDRAM_Init+0xac>)
 8001e92:	f002 fba7 	bl	80045e4 <HAL_SDRAM_Init>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8001e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec8 <BSP_SDRAM_Init+0xb8>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	701a      	strb	r2, [r3, #0]
 8001ea2:	e002      	b.n	8001eaa <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8001ea4:	4b08      	ldr	r3, [pc, #32]	@ (8001ec8 <BSP_SDRAM_Init+0xb8>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001eaa:	f240 506a 	movw	r0, #1386	@ 0x56a
 8001eae:	f000 f80d 	bl	8001ecc <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8001eb2:	4b05      	ldr	r3, [pc, #20]	@ (8001ec8 <BSP_SDRAM_Init+0xb8>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	200002d8 	.word	0x200002d8
 8001ec0:	a0000140 	.word	0xa0000140
 8001ec4:	2000030c 	.word	0x2000030c
 8001ec8:	200000c0 	.word	0x200000c0

08001ecc <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8001ed8:	4b2a      	ldr	r3, [pc, #168]	@ (8001f84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001eda:	2201      	movs	r2, #1
 8001edc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001ede:	4b29      	ldr	r3, [pc, #164]	@ (8001f84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ee0:	2208      	movs	r2, #8
 8001ee2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8001ee4:	4b27      	ldr	r3, [pc, #156]	@ (8001f84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8001eea:	4b26      	ldr	r3, [pc, #152]	@ (8001f84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001ef0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ef4:	4923      	ldr	r1, [pc, #140]	@ (8001f84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ef6:	4824      	ldr	r0, [pc, #144]	@ (8001f88 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001ef8:	f002 fba8 	bl	800464c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001efc:	2001      	movs	r0, #1
 8001efe:	f000 f9c3 	bl	8002288 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8001f02:	4b20      	ldr	r3, [pc, #128]	@ (8001f84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f04:	2202      	movs	r2, #2
 8001f06:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001f08:	4b1e      	ldr	r3, [pc, #120]	@ (8001f84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f0a:	2208      	movs	r2, #8
 8001f0c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8001f0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001f84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f10:	2201      	movs	r2, #1
 8001f12:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8001f14:	4b1b      	ldr	r3, [pc, #108]	@ (8001f84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8001f1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f1e:	4919      	ldr	r1, [pc, #100]	@ (8001f84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f20:	4819      	ldr	r0, [pc, #100]	@ (8001f88 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001f22:	f002 fb93 	bl	800464c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001f26:	4b17      	ldr	r3, [pc, #92]	@ (8001f84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f28:	2203      	movs	r2, #3
 8001f2a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001f2c:	4b15      	ldr	r3, [pc, #84]	@ (8001f84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f2e:	2208      	movs	r2, #8
 8001f30:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8001f32:	4b14      	ldr	r3, [pc, #80]	@ (8001f84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f34:	2204      	movs	r2, #4
 8001f36:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8001f38:	4b12      	ldr	r3, [pc, #72]	@ (8001f84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001f3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f42:	4910      	ldr	r1, [pc, #64]	@ (8001f84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f44:	4810      	ldr	r0, [pc, #64]	@ (8001f88 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001f46:	f002 fb81 	bl	800464c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8001f4a:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8001f4e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8001f50:	4b0c      	ldr	r3, [pc, #48]	@ (8001f84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f52:	2204      	movs	r2, #4
 8001f54:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001f56:	4b0b      	ldr	r3, [pc, #44]	@ (8001f84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f58:	2208      	movs	r2, #8
 8001f5a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8001f5c:	4b09      	ldr	r3, [pc, #36]	@ (8001f84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	4a07      	ldr	r2, [pc, #28]	@ (8001f84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f66:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001f68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f6c:	4905      	ldr	r1, [pc, #20]	@ (8001f84 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001f6e:	4806      	ldr	r0, [pc, #24]	@ (8001f88 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001f70:	f002 fb6c 	bl	800464c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	4804      	ldr	r0, [pc, #16]	@ (8001f88 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001f78:	f002 fb9d 	bl	80046b6 <HAL_SDRAM_ProgramRefreshRate>
}
 8001f7c:	bf00      	nop
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20000328 	.word	0x20000328
 8001f88:	200002d8 	.word	0x200002d8

08001f8c <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b090      	sub	sp, #64	@ 0x40
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 80ec 	beq.w	8002176 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fa2:	4b77      	ldr	r3, [pc, #476]	@ (8002180 <BSP_SDRAM_MspInit+0x1f4>)
 8001fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fa6:	4a76      	ldr	r2, [pc, #472]	@ (8002180 <BSP_SDRAM_MspInit+0x1f4>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6393      	str	r3, [r2, #56]	@ 0x38
 8001fae:	4b74      	ldr	r3, [pc, #464]	@ (8002180 <BSP_SDRAM_MspInit+0x1f4>)
 8001fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fbe:	4b70      	ldr	r3, [pc, #448]	@ (8002180 <BSP_SDRAM_MspInit+0x1f4>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc2:	4a6f      	ldr	r2, [pc, #444]	@ (8002180 <BSP_SDRAM_MspInit+0x1f4>)
 8001fc4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fca:	4b6d      	ldr	r3, [pc, #436]	@ (8002180 <BSP_SDRAM_MspInit+0x1f4>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	623b      	str	r3, [r7, #32]
 8001fda:	4b69      	ldr	r3, [pc, #420]	@ (8002180 <BSP_SDRAM_MspInit+0x1f4>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	4a68      	ldr	r2, [pc, #416]	@ (8002180 <BSP_SDRAM_MspInit+0x1f4>)
 8001fe0:	f043 0302 	orr.w	r3, r3, #2
 8001fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fe6:	4b66      	ldr	r3, [pc, #408]	@ (8002180 <BSP_SDRAM_MspInit+0x1f4>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	623b      	str	r3, [r7, #32]
 8001ff0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61fb      	str	r3, [r7, #28]
 8001ff6:	4b62      	ldr	r3, [pc, #392]	@ (8002180 <BSP_SDRAM_MspInit+0x1f4>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffa:	4a61      	ldr	r2, [pc, #388]	@ (8002180 <BSP_SDRAM_MspInit+0x1f4>)
 8001ffc:	f043 0304 	orr.w	r3, r3, #4
 8002000:	6313      	str	r3, [r2, #48]	@ 0x30
 8002002:	4b5f      	ldr	r3, [pc, #380]	@ (8002180 <BSP_SDRAM_MspInit+0x1f4>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002006:	f003 0304 	and.w	r3, r3, #4
 800200a:	61fb      	str	r3, [r7, #28]
 800200c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	61bb      	str	r3, [r7, #24]
 8002012:	4b5b      	ldr	r3, [pc, #364]	@ (8002180 <BSP_SDRAM_MspInit+0x1f4>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002016:	4a5a      	ldr	r2, [pc, #360]	@ (8002180 <BSP_SDRAM_MspInit+0x1f4>)
 8002018:	f043 0308 	orr.w	r3, r3, #8
 800201c:	6313      	str	r3, [r2, #48]	@ 0x30
 800201e:	4b58      	ldr	r3, [pc, #352]	@ (8002180 <BSP_SDRAM_MspInit+0x1f4>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	61bb      	str	r3, [r7, #24]
 8002028:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
 800202e:	4b54      	ldr	r3, [pc, #336]	@ (8002180 <BSP_SDRAM_MspInit+0x1f4>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002032:	4a53      	ldr	r2, [pc, #332]	@ (8002180 <BSP_SDRAM_MspInit+0x1f4>)
 8002034:	f043 0310 	orr.w	r3, r3, #16
 8002038:	6313      	str	r3, [r2, #48]	@ 0x30
 800203a:	4b51      	ldr	r3, [pc, #324]	@ (8002180 <BSP_SDRAM_MspInit+0x1f4>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203e:	f003 0310 	and.w	r3, r3, #16
 8002042:	617b      	str	r3, [r7, #20]
 8002044:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	4b4d      	ldr	r3, [pc, #308]	@ (8002180 <BSP_SDRAM_MspInit+0x1f4>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204e:	4a4c      	ldr	r2, [pc, #304]	@ (8002180 <BSP_SDRAM_MspInit+0x1f4>)
 8002050:	f043 0320 	orr.w	r3, r3, #32
 8002054:	6313      	str	r3, [r2, #48]	@ 0x30
 8002056:	4b4a      	ldr	r3, [pc, #296]	@ (8002180 <BSP_SDRAM_MspInit+0x1f4>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205a:	f003 0320 	and.w	r3, r3, #32
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	4b46      	ldr	r3, [pc, #280]	@ (8002180 <BSP_SDRAM_MspInit+0x1f4>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206a:	4a45      	ldr	r2, [pc, #276]	@ (8002180 <BSP_SDRAM_MspInit+0x1f4>)
 800206c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002070:	6313      	str	r3, [r2, #48]	@ 0x30
 8002072:	4b43      	ldr	r3, [pc, #268]	@ (8002180 <BSP_SDRAM_MspInit+0x1f4>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002076:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800207e:	2302      	movs	r3, #2
 8002080:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002082:	2302      	movs	r3, #2
 8002084:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 800208a:	230c      	movs	r3, #12
 800208c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800208e:	2360      	movs	r3, #96	@ 0x60
 8002090:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8002092:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002096:	4619      	mov	r1, r3
 8002098:	483a      	ldr	r0, [pc, #232]	@ (8002184 <BSP_SDRAM_MspInit+0x1f8>)
 800209a:	f000 fe75 	bl	8002d88 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 800209e:	2301      	movs	r3, #1
 80020a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80020a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020a6:	4619      	mov	r1, r3
 80020a8:	4837      	ldr	r0, [pc, #220]	@ (8002188 <BSP_SDRAM_MspInit+0x1fc>)
 80020aa:	f000 fe6d 	bl	8002d88 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80020ae:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80020b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80020b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020b8:	4619      	mov	r1, r3
 80020ba:	4834      	ldr	r0, [pc, #208]	@ (800218c <BSP_SDRAM_MspInit+0x200>)
 80020bc:	f000 fe64 	bl	8002d88 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80020c0:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80020c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80020c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020ca:	4619      	mov	r1, r3
 80020cc:	4830      	ldr	r0, [pc, #192]	@ (8002190 <BSP_SDRAM_MspInit+0x204>)
 80020ce:	f000 fe5b 	bl	8002d88 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80020d2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80020d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80020d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020dc:	4619      	mov	r1, r3
 80020de:	482d      	ldr	r0, [pc, #180]	@ (8002194 <BSP_SDRAM_MspInit+0x208>)
 80020e0:	f000 fe52 	bl	8002d88 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80020e4:	f248 1333 	movw	r3, #33075	@ 0x8133
 80020e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80020ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020ee:	4619      	mov	r1, r3
 80020f0:	4829      	ldr	r0, [pc, #164]	@ (8002198 <BSP_SDRAM_MspInit+0x20c>)
 80020f2:	f000 fe49 	bl	8002d88 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80020f6:	4b29      	ldr	r3, [pc, #164]	@ (800219c <BSP_SDRAM_MspInit+0x210>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80020fc:	4b27      	ldr	r3, [pc, #156]	@ (800219c <BSP_SDRAM_MspInit+0x210>)
 80020fe:	2280      	movs	r2, #128	@ 0x80
 8002100:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002102:	4b26      	ldr	r3, [pc, #152]	@ (800219c <BSP_SDRAM_MspInit+0x210>)
 8002104:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002108:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800210a:	4b24      	ldr	r3, [pc, #144]	@ (800219c <BSP_SDRAM_MspInit+0x210>)
 800210c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002110:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002112:	4b22      	ldr	r3, [pc, #136]	@ (800219c <BSP_SDRAM_MspInit+0x210>)
 8002114:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002118:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800211a:	4b20      	ldr	r3, [pc, #128]	@ (800219c <BSP_SDRAM_MspInit+0x210>)
 800211c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002120:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8002122:	4b1e      	ldr	r3, [pc, #120]	@ (800219c <BSP_SDRAM_MspInit+0x210>)
 8002124:	2200      	movs	r2, #0
 8002126:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002128:	4b1c      	ldr	r3, [pc, #112]	@ (800219c <BSP_SDRAM_MspInit+0x210>)
 800212a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800212e:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002130:	4b1a      	ldr	r3, [pc, #104]	@ (800219c <BSP_SDRAM_MspInit+0x210>)
 8002132:	2200      	movs	r2, #0
 8002134:	625a      	str	r2, [r3, #36]	@ 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002136:	4b19      	ldr	r3, [pc, #100]	@ (800219c <BSP_SDRAM_MspInit+0x210>)
 8002138:	2203      	movs	r2, #3
 800213a:	629a      	str	r2, [r3, #40]	@ 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800213c:	4b17      	ldr	r3, [pc, #92]	@ (800219c <BSP_SDRAM_MspInit+0x210>)
 800213e:	2200      	movs	r2, #0
 8002140:	62da      	str	r2, [r3, #44]	@ 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002142:	4b16      	ldr	r3, [pc, #88]	@ (800219c <BSP_SDRAM_MspInit+0x210>)
 8002144:	2200      	movs	r2, #0
 8002146:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002148:	4b14      	ldr	r3, [pc, #80]	@ (800219c <BSP_SDRAM_MspInit+0x210>)
 800214a:	4a15      	ldr	r2, [pc, #84]	@ (80021a0 <BSP_SDRAM_MspInit+0x214>)
 800214c:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a12      	ldr	r2, [pc, #72]	@ (800219c <BSP_SDRAM_MspInit+0x210>)
 8002152:	631a      	str	r2, [r3, #48]	@ 0x30
 8002154:	4a11      	ldr	r2, [pc, #68]	@ (800219c <BSP_SDRAM_MspInit+0x210>)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 800215a:	4810      	ldr	r0, [pc, #64]	@ (800219c <BSP_SDRAM_MspInit+0x210>)
 800215c:	f000 fa78 	bl	8002650 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8002160:	480e      	ldr	r0, [pc, #56]	@ (800219c <BSP_SDRAM_MspInit+0x210>)
 8002162:	f000 f9c7 	bl	80024f4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002166:	2200      	movs	r2, #0
 8002168:	210f      	movs	r1, #15
 800216a:	2038      	movs	r0, #56	@ 0x38
 800216c:	f000 f98b 	bl	8002486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002170:	2038      	movs	r0, #56	@ 0x38
 8002172:	f000 f9a4 	bl	80024be <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8002176:	bf00      	nop
 8002178:	3740      	adds	r7, #64	@ 0x40
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40023800 	.word	0x40023800
 8002184:	40020400 	.word	0x40020400
 8002188:	40020800 	.word	0x40020800
 800218c:	40020c00 	.word	0x40020c00
 8002190:	40021000 	.word	0x40021000
 8002194:	40021400 	.word	0x40021400
 8002198:	40021800 	.word	0x40021800
 800219c:	20000338 	.word	0x20000338
 80021a0:	40026410 	.word	0x40026410

080021a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021a8:	4b0e      	ldr	r3, [pc, #56]	@ (80021e4 <HAL_Init+0x40>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a0d      	ldr	r2, [pc, #52]	@ (80021e4 <HAL_Init+0x40>)
 80021ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021b4:	4b0b      	ldr	r3, [pc, #44]	@ (80021e4 <HAL_Init+0x40>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a0a      	ldr	r2, [pc, #40]	@ (80021e4 <HAL_Init+0x40>)
 80021ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021c0:	4b08      	ldr	r3, [pc, #32]	@ (80021e4 <HAL_Init+0x40>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a07      	ldr	r2, [pc, #28]	@ (80021e4 <HAL_Init+0x40>)
 80021c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021cc:	2003      	movs	r0, #3
 80021ce:	f000 f94f 	bl	8002470 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021d2:	200f      	movs	r0, #15
 80021d4:	f000 f808 	bl	80021e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021d8:	f7fe fb64 	bl	80008a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40023c00 	.word	0x40023c00

080021e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021f0:	4b12      	ldr	r3, [pc, #72]	@ (800223c <HAL_InitTick+0x54>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	4b12      	ldr	r3, [pc, #72]	@ (8002240 <HAL_InitTick+0x58>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	4619      	mov	r1, r3
 80021fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002202:	fbb2 f3f3 	udiv	r3, r2, r3
 8002206:	4618      	mov	r0, r3
 8002208:	f000 f967 	bl	80024da <HAL_SYSTICK_Config>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e00e      	b.n	8002234 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b0f      	cmp	r3, #15
 800221a:	d80a      	bhi.n	8002232 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800221c:	2200      	movs	r2, #0
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	f04f 30ff 	mov.w	r0, #4294967295
 8002224:	f000 f92f 	bl	8002486 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002228:	4a06      	ldr	r2, [pc, #24]	@ (8002244 <HAL_InitTick+0x5c>)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
 8002230:	e000      	b.n	8002234 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
}
 8002234:	4618      	mov	r0, r3
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000078 	.word	0x20000078
 8002240:	200000c8 	.word	0x200000c8
 8002244:	200000c4 	.word	0x200000c4

08002248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800224c:	4b06      	ldr	r3, [pc, #24]	@ (8002268 <HAL_IncTick+0x20>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	461a      	mov	r2, r3
 8002252:	4b06      	ldr	r3, [pc, #24]	@ (800226c <HAL_IncTick+0x24>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4413      	add	r3, r2
 8002258:	4a04      	ldr	r2, [pc, #16]	@ (800226c <HAL_IncTick+0x24>)
 800225a:	6013      	str	r3, [r2, #0]
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	200000c8 	.word	0x200000c8
 800226c:	20000398 	.word	0x20000398

08002270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return uwTick;
 8002274:	4b03      	ldr	r3, [pc, #12]	@ (8002284 <HAL_GetTick+0x14>)
 8002276:	681b      	ldr	r3, [r3, #0]
}
 8002278:	4618      	mov	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000398 	.word	0x20000398

08002288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002290:	f7ff ffee 	bl	8002270 <HAL_GetTick>
 8002294:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a0:	d005      	beq.n	80022ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022a2:	4b0a      	ldr	r3, [pc, #40]	@ (80022cc <HAL_Delay+0x44>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	461a      	mov	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4413      	add	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022ae:	bf00      	nop
 80022b0:	f7ff ffde 	bl	8002270 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d8f7      	bhi.n	80022b0 <HAL_Delay+0x28>
  {
  }
}
 80022c0:	bf00      	nop
 80022c2:	bf00      	nop
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	200000c8 	.word	0x200000c8

080022d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002314 <__NVIC_SetPriorityGrouping+0x44>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022ec:	4013      	ands	r3, r2
 80022ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002302:	4a04      	ldr	r2, [pc, #16]	@ (8002314 <__NVIC_SetPriorityGrouping+0x44>)
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	60d3      	str	r3, [r2, #12]
}
 8002308:	bf00      	nop
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800231c:	4b04      	ldr	r3, [pc, #16]	@ (8002330 <__NVIC_GetPriorityGrouping+0x18>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	0a1b      	lsrs	r3, r3, #8
 8002322:	f003 0307 	and.w	r3, r3, #7
}
 8002326:	4618      	mov	r0, r3
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800233e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002342:	2b00      	cmp	r3, #0
 8002344:	db0b      	blt.n	800235e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	f003 021f 	and.w	r2, r3, #31
 800234c:	4907      	ldr	r1, [pc, #28]	@ (800236c <__NVIC_EnableIRQ+0x38>)
 800234e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002352:	095b      	lsrs	r3, r3, #5
 8002354:	2001      	movs	r0, #1
 8002356:	fa00 f202 	lsl.w	r2, r0, r2
 800235a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	e000e100 	.word	0xe000e100

08002370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	6039      	str	r1, [r7, #0]
 800237a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800237c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002380:	2b00      	cmp	r3, #0
 8002382:	db0a      	blt.n	800239a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	b2da      	uxtb	r2, r3
 8002388:	490c      	ldr	r1, [pc, #48]	@ (80023bc <__NVIC_SetPriority+0x4c>)
 800238a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238e:	0112      	lsls	r2, r2, #4
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	440b      	add	r3, r1
 8002394:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002398:	e00a      	b.n	80023b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	b2da      	uxtb	r2, r3
 800239e:	4908      	ldr	r1, [pc, #32]	@ (80023c0 <__NVIC_SetPriority+0x50>)
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	3b04      	subs	r3, #4
 80023a8:	0112      	lsls	r2, r2, #4
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	440b      	add	r3, r1
 80023ae:	761a      	strb	r2, [r3, #24]
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	e000e100 	.word	0xe000e100
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b089      	sub	sp, #36	@ 0x24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f1c3 0307 	rsb	r3, r3, #7
 80023de:	2b04      	cmp	r3, #4
 80023e0:	bf28      	it	cs
 80023e2:	2304      	movcs	r3, #4
 80023e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	3304      	adds	r3, #4
 80023ea:	2b06      	cmp	r3, #6
 80023ec:	d902      	bls.n	80023f4 <NVIC_EncodePriority+0x30>
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	3b03      	subs	r3, #3
 80023f2:	e000      	b.n	80023f6 <NVIC_EncodePriority+0x32>
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f8:	f04f 32ff 	mov.w	r2, #4294967295
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43da      	mvns	r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	401a      	ands	r2, r3
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800240c:	f04f 31ff 	mov.w	r1, #4294967295
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	fa01 f303 	lsl.w	r3, r1, r3
 8002416:	43d9      	mvns	r1, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800241c:	4313      	orrs	r3, r2
         );
}
 800241e:	4618      	mov	r0, r3
 8002420:	3724      	adds	r7, #36	@ 0x24
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
	...

0800242c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3b01      	subs	r3, #1
 8002438:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800243c:	d301      	bcc.n	8002442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800243e:	2301      	movs	r3, #1
 8002440:	e00f      	b.n	8002462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002442:	4a0a      	ldr	r2, [pc, #40]	@ (800246c <SysTick_Config+0x40>)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3b01      	subs	r3, #1
 8002448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800244a:	210f      	movs	r1, #15
 800244c:	f04f 30ff 	mov.w	r0, #4294967295
 8002450:	f7ff ff8e 	bl	8002370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002454:	4b05      	ldr	r3, [pc, #20]	@ (800246c <SysTick_Config+0x40>)
 8002456:	2200      	movs	r2, #0
 8002458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800245a:	4b04      	ldr	r3, [pc, #16]	@ (800246c <SysTick_Config+0x40>)
 800245c:	2207      	movs	r2, #7
 800245e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	e000e010 	.word	0xe000e010

08002470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f7ff ff29 	bl	80022d0 <__NVIC_SetPriorityGrouping>
}
 800247e:	bf00      	nop
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002486:	b580      	push	{r7, lr}
 8002488:	b086      	sub	sp, #24
 800248a:	af00      	add	r7, sp, #0
 800248c:	4603      	mov	r3, r0
 800248e:	60b9      	str	r1, [r7, #8]
 8002490:	607a      	str	r2, [r7, #4]
 8002492:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002498:	f7ff ff3e 	bl	8002318 <__NVIC_GetPriorityGrouping>
 800249c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	68b9      	ldr	r1, [r7, #8]
 80024a2:	6978      	ldr	r0, [r7, #20]
 80024a4:	f7ff ff8e 	bl	80023c4 <NVIC_EncodePriority>
 80024a8:	4602      	mov	r2, r0
 80024aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ae:	4611      	mov	r1, r2
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff ff5d 	bl	8002370 <__NVIC_SetPriority>
}
 80024b6:	bf00      	nop
 80024b8:	3718      	adds	r7, #24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b082      	sub	sp, #8
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	4603      	mov	r3, r0
 80024c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff ff31 	bl	8002334 <__NVIC_EnableIRQ>
}
 80024d2:	bf00      	nop
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7ff ffa2 	bl	800242c <SysTick_Config>
 80024e8:	4603      	mov	r3, r0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
	...

080024f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002500:	f7ff feb6 	bl	8002270 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e099      	b.n	8002644 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2202      	movs	r2, #2
 8002514:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0201 	bic.w	r2, r2, #1
 800252e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002530:	e00f      	b.n	8002552 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002532:	f7ff fe9d 	bl	8002270 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b05      	cmp	r3, #5
 800253e:	d908      	bls.n	8002552 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2220      	movs	r2, #32
 8002544:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2203      	movs	r2, #3
 800254a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e078      	b.n	8002644 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1e8      	bne.n	8002532 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	4b38      	ldr	r3, [pc, #224]	@ (800264c <HAL_DMA_Init+0x158>)
 800256c:	4013      	ands	r3, r2
 800256e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800257e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800258a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002596:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a8:	2b04      	cmp	r3, #4
 80025aa:	d107      	bne.n	80025bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b4:	4313      	orrs	r3, r2
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	697a      	ldr	r2, [r7, #20]
 80025c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	f023 0307 	bic.w	r3, r3, #7
 80025d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d8:	697a      	ldr	r2, [r7, #20]
 80025da:	4313      	orrs	r3, r2
 80025dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	d117      	bne.n	8002616 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00e      	beq.n	8002616 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f8bd 	bl	8002778 <DMA_CheckFifoParam>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d008      	beq.n	8002616 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2240      	movs	r2, #64	@ 0x40
 8002608:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002612:	2301      	movs	r3, #1
 8002614:	e016      	b.n	8002644 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f874 	bl	800270c <DMA_CalcBaseAndBitshift>
 8002624:	4603      	mov	r3, r0
 8002626:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800262c:	223f      	movs	r2, #63	@ 0x3f
 800262e:	409a      	lsls	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	f010803f 	.word	0xf010803f

08002650 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e050      	b.n	8002704 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d101      	bne.n	8002672 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800266e:	2302      	movs	r3, #2
 8002670:	e048      	b.n	8002704 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 0201 	bic.w	r2, r2, #1
 8002680:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2200      	movs	r2, #0
 8002690:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2200      	movs	r2, #0
 8002698:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2200      	movs	r2, #0
 80026a0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2200      	movs	r2, #0
 80026a8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2221      	movs	r2, #33	@ 0x21
 80026b0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f82a 	bl	800270c <DMA_CalcBaseAndBitshift>
 80026b8:	4603      	mov	r3, r0
 80026ba:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e4:	223f      	movs	r2, #63	@ 0x3f
 80026e6:	409a      	lsls	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	b2db      	uxtb	r3, r3
 800271a:	3b10      	subs	r3, #16
 800271c:	4a14      	ldr	r2, [pc, #80]	@ (8002770 <DMA_CalcBaseAndBitshift+0x64>)
 800271e:	fba2 2303 	umull	r2, r3, r2, r3
 8002722:	091b      	lsrs	r3, r3, #4
 8002724:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002726:	4a13      	ldr	r2, [pc, #76]	@ (8002774 <DMA_CalcBaseAndBitshift+0x68>)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	4413      	add	r3, r2
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	461a      	mov	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2b03      	cmp	r3, #3
 8002738:	d909      	bls.n	800274e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002742:	f023 0303 	bic.w	r3, r3, #3
 8002746:	1d1a      	adds	r2, r3, #4
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	659a      	str	r2, [r3, #88]	@ 0x58
 800274c:	e007      	b.n	800275e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002756:	f023 0303 	bic.w	r3, r3, #3
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002762:	4618      	mov	r0, r3
 8002764:	3714      	adds	r7, #20
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	aaaaaaab 	.word	0xaaaaaaab
 8002774:	08007990 	.word	0x08007990

08002778 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002780:	2300      	movs	r3, #0
 8002782:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002788:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d11f      	bne.n	80027d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	2b03      	cmp	r3, #3
 8002796:	d856      	bhi.n	8002846 <DMA_CheckFifoParam+0xce>
 8002798:	a201      	add	r2, pc, #4	@ (adr r2, 80027a0 <DMA_CheckFifoParam+0x28>)
 800279a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800279e:	bf00      	nop
 80027a0:	080027b1 	.word	0x080027b1
 80027a4:	080027c3 	.word	0x080027c3
 80027a8:	080027b1 	.word	0x080027b1
 80027ac:	08002847 	.word	0x08002847
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d046      	beq.n	800284a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027c0:	e043      	b.n	800284a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80027ca:	d140      	bne.n	800284e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027d0:	e03d      	b.n	800284e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027da:	d121      	bne.n	8002820 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2b03      	cmp	r3, #3
 80027e0:	d837      	bhi.n	8002852 <DMA_CheckFifoParam+0xda>
 80027e2:	a201      	add	r2, pc, #4	@ (adr r2, 80027e8 <DMA_CheckFifoParam+0x70>)
 80027e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e8:	080027f9 	.word	0x080027f9
 80027ec:	080027ff 	.word	0x080027ff
 80027f0:	080027f9 	.word	0x080027f9
 80027f4:	08002811 	.word	0x08002811
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	73fb      	strb	r3, [r7, #15]
      break;
 80027fc:	e030      	b.n	8002860 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002802:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d025      	beq.n	8002856 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800280e:	e022      	b.n	8002856 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002814:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002818:	d11f      	bne.n	800285a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800281e:	e01c      	b.n	800285a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d903      	bls.n	800282e <DMA_CheckFifoParam+0xb6>
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	2b03      	cmp	r3, #3
 800282a:	d003      	beq.n	8002834 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800282c:	e018      	b.n	8002860 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	73fb      	strb	r3, [r7, #15]
      break;
 8002832:	e015      	b.n	8002860 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002838:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00e      	beq.n	800285e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	73fb      	strb	r3, [r7, #15]
      break;
 8002844:	e00b      	b.n	800285e <DMA_CheckFifoParam+0xe6>
      break;
 8002846:	bf00      	nop
 8002848:	e00a      	b.n	8002860 <DMA_CheckFifoParam+0xe8>
      break;
 800284a:	bf00      	nop
 800284c:	e008      	b.n	8002860 <DMA_CheckFifoParam+0xe8>
      break;
 800284e:	bf00      	nop
 8002850:	e006      	b.n	8002860 <DMA_CheckFifoParam+0xe8>
      break;
 8002852:	bf00      	nop
 8002854:	e004      	b.n	8002860 <DMA_CheckFifoParam+0xe8>
      break;
 8002856:	bf00      	nop
 8002858:	e002      	b.n	8002860 <DMA_CheckFifoParam+0xe8>
      break;   
 800285a:	bf00      	nop
 800285c:	e000      	b.n	8002860 <DMA_CheckFifoParam+0xe8>
      break;
 800285e:	bf00      	nop
    }
  } 
  
  return status; 
 8002860:	7bfb      	ldrb	r3, [r7, #15]
}
 8002862:	4618      	mov	r0, r3
 8002864:	3714      	adds	r7, #20
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop

08002870 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e03b      	b.n	80028fa <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d106      	bne.n	800289c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7fe f82c 	bl	80008f4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2202      	movs	r2, #2
 80028a0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028c0:	f023 0107 	bic.w	r1, r3, #7
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80028da:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	68d1      	ldr	r1, [r2, #12]
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6812      	ldr	r2, [r2, #0]
 80028e6:	430b      	orrs	r3, r1
 80028e8:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b086      	sub	sp, #24
 8002906:	af02      	add	r7, sp, #8
 8002908:	60f8      	str	r0, [r7, #12]
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	607a      	str	r2, [r7, #4]
 800290e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <HAL_DMA2D_Start+0x1c>
 800291a:	2302      	movs	r3, #2
 800291c:	e018      	b.n	8002950 <HAL_DMA2D_Start+0x4e>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2202      	movs	r2, #2
 800292a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	68b9      	ldr	r1, [r7, #8]
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f000 f989 	bl	8002c50 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f042 0201 	orr.w	r2, r2, #1
 800294c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b00      	cmp	r3, #0
 8002972:	d056      	beq.n	8002a22 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002974:	f7ff fc7c 	bl	8002270 <HAL_GetTick>
 8002978:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800297a:	e04b      	b.n	8002a14 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800298a:	2b00      	cmp	r3, #0
 800298c:	d023      	beq.n	80029d6 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f003 0320 	and.w	r3, r3, #32
 8002994:	2b00      	cmp	r3, #0
 8002996:	d005      	beq.n	80029a4 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800299c:	f043 0202 	orr.w	r2, r3, #2
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d005      	beq.n	80029ba <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b2:	f043 0201 	orr.w	r2, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2221      	movs	r2, #33	@ 0x21
 80029c0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2204      	movs	r2, #4
 80029c6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e0a5      	b.n	8002b22 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029dc:	d01a      	beq.n	8002a14 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80029de:	f7ff fc47 	bl	8002270 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d302      	bcc.n	80029f4 <HAL_DMA2D_PollForTransfer+0x9c>
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10f      	bne.n	8002a14 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029f8:	f043 0220 	orr.w	r2, r3, #32
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2203      	movs	r2, #3
 8002a04:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e086      	b.n	8002b22 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0ac      	beq.n	800297c <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	f003 0320 	and.w	r3, r3, #32
 8002a2c:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a34:	f003 0320 	and.w	r3, r3, #32
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d061      	beq.n	8002b08 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a44:	f7ff fc14 	bl	8002270 <HAL_GetTick>
 8002a48:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002a4a:	e056      	b.n	8002afa <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d02e      	beq.n	8002abc <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f003 0308 	and.w	r3, r3, #8
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d005      	beq.n	8002a74 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a6c:	f043 0204 	orr.w	r2, r3, #4
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f003 0320 	and.w	r3, r3, #32
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d005      	beq.n	8002a8a <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a82:	f043 0202 	orr.w	r2, r3, #2
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d005      	beq.n	8002aa0 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a98:	f043 0201 	orr.w	r2, r3, #1
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2229      	movs	r2, #41	@ 0x29
 8002aa6:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2204      	movs	r2, #4
 8002aac:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e032      	b.n	8002b22 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac2:	d01a      	beq.n	8002afa <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ac4:	f7ff fbd4 	bl	8002270 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d302      	bcc.n	8002ada <HAL_DMA2D_PollForTransfer+0x182>
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10f      	bne.n	8002afa <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ade:	f043 0220 	orr.w	r2, r3, #32
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2203      	movs	r2, #3
 8002aea:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e013      	b.n	8002b22 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 0310 	and.w	r3, r3, #16
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0a1      	beq.n	8002a4c <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2212      	movs	r2, #18
 8002b0e:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
	...

08002b2c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b087      	sub	sp, #28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <HAL_DMA2D_ConfigLayer+0x20>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e079      	b.n	8002c40 <HAL_DMA2D_ConfigLayer+0x114>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2202      	movs	r2, #2
 8002b58:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	3318      	adds	r3, #24
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	4413      	add	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	041b      	lsls	r3, r3, #16
 8002b72:	4313      	orrs	r3, r2
 8002b74:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002b76:	4b35      	ldr	r3, [pc, #212]	@ (8002c4c <HAL_DMA2D_ConfigLayer+0x120>)
 8002b78:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b0a      	cmp	r3, #10
 8002b80:	d003      	beq.n	8002b8a <HAL_DMA2D_ConfigLayer+0x5e>
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b09      	cmp	r3, #9
 8002b88:	d107      	bne.n	8002b9a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	e005      	b.n	8002ba6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	061b      	lsls	r3, r3, #24
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d120      	bne.n	8002bee <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	ea02 0103 	and.w	r1, r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	6812      	ldr	r2, [r2, #0]
 8002bcc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b0a      	cmp	r3, #10
 8002bd4:	d003      	beq.n	8002bde <HAL_DMA2D_ConfigLayer+0xb2>
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b09      	cmp	r3, #9
 8002bdc:	d127      	bne.n	8002c2e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002bea:	629a      	str	r2, [r3, #40]	@ 0x28
 8002bec:	e01f      	b.n	8002c2e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	69da      	ldr	r2, [r3, #28]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	ea02 0103 	and.w	r1, r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	6812      	ldr	r2, [r2, #0]
 8002c0e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	2b0a      	cmp	r3, #10
 8002c16:	d003      	beq.n	8002c20 <HAL_DMA2D_ConfigLayer+0xf4>
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b09      	cmp	r3, #9
 8002c1e:	d106      	bne.n	8002c2e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	68da      	ldr	r2, [r3, #12]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002c2c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	371c      	adds	r7, #28
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	ff03000f 	.word	0xff03000f

08002c50 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b08b      	sub	sp, #44	@ 0x2c
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
 8002c5c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c64:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	041a      	lsls	r2, r3, #16
 8002c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002c88:	d174      	bne.n	8002d74 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002c90:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002c98:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002ca0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d108      	bne.n	8002cc2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	6a3b      	ldr	r3, [r7, #32]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cc0:	e053      	b.n	8002d6a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d106      	bne.n	8002cd8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cd6:	e048      	b.n	8002d6a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d111      	bne.n	8002d04 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	0cdb      	lsrs	r3, r3, #19
 8002ce4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	0a9b      	lsrs	r3, r3, #10
 8002cea:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	08db      	lsrs	r3, r3, #3
 8002cf0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	015a      	lsls	r2, r3, #5
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	02db      	lsls	r3, r3, #11
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d02:	e032      	b.n	8002d6a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	2b03      	cmp	r3, #3
 8002d0a:	d117      	bne.n	8002d3c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	0fdb      	lsrs	r3, r3, #31
 8002d10:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	0cdb      	lsrs	r3, r3, #19
 8002d16:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	0adb      	lsrs	r3, r3, #11
 8002d1c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	08db      	lsrs	r3, r3, #3
 8002d22:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	015a      	lsls	r2, r3, #5
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	029b      	lsls	r3, r3, #10
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	03db      	lsls	r3, r3, #15
 8002d32:	4313      	orrs	r3, r2
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d3a:	e016      	b.n	8002d6a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	0f1b      	lsrs	r3, r3, #28
 8002d40:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	0d1b      	lsrs	r3, r3, #20
 8002d46:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	0b1b      	lsrs	r3, r3, #12
 8002d4c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	091b      	lsrs	r3, r3, #4
 8002d52:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	011a      	lsls	r2, r3, #4
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	021b      	lsls	r3, r3, #8
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	031b      	lsls	r3, r3, #12
 8002d62:	4313      	orrs	r3, r2
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d70:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002d72:	e003      	b.n	8002d7c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	60da      	str	r2, [r3, #12]
}
 8002d7c:	bf00      	nop
 8002d7e:	372c      	adds	r7, #44	@ 0x2c
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b089      	sub	sp, #36	@ 0x24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d92:	2300      	movs	r3, #0
 8002d94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d96:	2300      	movs	r3, #0
 8002d98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61fb      	str	r3, [r7, #28]
 8002da2:	e177      	b.n	8003094 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002da4:	2201      	movs	r2, #1
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	4013      	ands	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	f040 8166 	bne.w	800308e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f003 0303 	and.w	r3, r3, #3
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d005      	beq.n	8002dda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d130      	bne.n	8002e3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	2203      	movs	r2, #3
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	43db      	mvns	r3, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4013      	ands	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	68da      	ldr	r2, [r3, #12]
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e10:	2201      	movs	r2, #1
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	091b      	lsrs	r3, r3, #4
 8002e26:	f003 0201 	and.w	r2, r3, #1
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f003 0303 	and.w	r3, r3, #3
 8002e44:	2b03      	cmp	r3, #3
 8002e46:	d017      	beq.n	8002e78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	2203      	movs	r2, #3
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f003 0303 	and.w	r3, r3, #3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d123      	bne.n	8002ecc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	08da      	lsrs	r2, r3, #3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	3208      	adds	r2, #8
 8002e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	f003 0307 	and.w	r3, r3, #7
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	220f      	movs	r2, #15
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	691a      	ldr	r2, [r3, #16]
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	08da      	lsrs	r2, r3, #3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	3208      	adds	r2, #8
 8002ec6:	69b9      	ldr	r1, [r7, #24]
 8002ec8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	2203      	movs	r2, #3
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	43db      	mvns	r3, r3
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f003 0203 	and.w	r2, r3, #3
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 80c0 	beq.w	800308e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	4b66      	ldr	r3, [pc, #408]	@ (80030ac <HAL_GPIO_Init+0x324>)
 8002f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f16:	4a65      	ldr	r2, [pc, #404]	@ (80030ac <HAL_GPIO_Init+0x324>)
 8002f18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f1e:	4b63      	ldr	r3, [pc, #396]	@ (80030ac <HAL_GPIO_Init+0x324>)
 8002f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f2a:	4a61      	ldr	r2, [pc, #388]	@ (80030b0 <HAL_GPIO_Init+0x328>)
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	089b      	lsrs	r3, r3, #2
 8002f30:	3302      	adds	r3, #2
 8002f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	f003 0303 	and.w	r3, r3, #3
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	220f      	movs	r2, #15
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	43db      	mvns	r3, r3
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a58      	ldr	r2, [pc, #352]	@ (80030b4 <HAL_GPIO_Init+0x32c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d037      	beq.n	8002fc6 <HAL_GPIO_Init+0x23e>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a57      	ldr	r2, [pc, #348]	@ (80030b8 <HAL_GPIO_Init+0x330>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d031      	beq.n	8002fc2 <HAL_GPIO_Init+0x23a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a56      	ldr	r2, [pc, #344]	@ (80030bc <HAL_GPIO_Init+0x334>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d02b      	beq.n	8002fbe <HAL_GPIO_Init+0x236>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a55      	ldr	r2, [pc, #340]	@ (80030c0 <HAL_GPIO_Init+0x338>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d025      	beq.n	8002fba <HAL_GPIO_Init+0x232>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a54      	ldr	r2, [pc, #336]	@ (80030c4 <HAL_GPIO_Init+0x33c>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d01f      	beq.n	8002fb6 <HAL_GPIO_Init+0x22e>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a53      	ldr	r2, [pc, #332]	@ (80030c8 <HAL_GPIO_Init+0x340>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d019      	beq.n	8002fb2 <HAL_GPIO_Init+0x22a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a52      	ldr	r2, [pc, #328]	@ (80030cc <HAL_GPIO_Init+0x344>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d013      	beq.n	8002fae <HAL_GPIO_Init+0x226>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a51      	ldr	r2, [pc, #324]	@ (80030d0 <HAL_GPIO_Init+0x348>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d00d      	beq.n	8002faa <HAL_GPIO_Init+0x222>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a50      	ldr	r2, [pc, #320]	@ (80030d4 <HAL_GPIO_Init+0x34c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d007      	beq.n	8002fa6 <HAL_GPIO_Init+0x21e>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a4f      	ldr	r2, [pc, #316]	@ (80030d8 <HAL_GPIO_Init+0x350>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d101      	bne.n	8002fa2 <HAL_GPIO_Init+0x21a>
 8002f9e:	2309      	movs	r3, #9
 8002fa0:	e012      	b.n	8002fc8 <HAL_GPIO_Init+0x240>
 8002fa2:	230a      	movs	r3, #10
 8002fa4:	e010      	b.n	8002fc8 <HAL_GPIO_Init+0x240>
 8002fa6:	2308      	movs	r3, #8
 8002fa8:	e00e      	b.n	8002fc8 <HAL_GPIO_Init+0x240>
 8002faa:	2307      	movs	r3, #7
 8002fac:	e00c      	b.n	8002fc8 <HAL_GPIO_Init+0x240>
 8002fae:	2306      	movs	r3, #6
 8002fb0:	e00a      	b.n	8002fc8 <HAL_GPIO_Init+0x240>
 8002fb2:	2305      	movs	r3, #5
 8002fb4:	e008      	b.n	8002fc8 <HAL_GPIO_Init+0x240>
 8002fb6:	2304      	movs	r3, #4
 8002fb8:	e006      	b.n	8002fc8 <HAL_GPIO_Init+0x240>
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e004      	b.n	8002fc8 <HAL_GPIO_Init+0x240>
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	e002      	b.n	8002fc8 <HAL_GPIO_Init+0x240>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e000      	b.n	8002fc8 <HAL_GPIO_Init+0x240>
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	69fa      	ldr	r2, [r7, #28]
 8002fca:	f002 0203 	and.w	r2, r2, #3
 8002fce:	0092      	lsls	r2, r2, #2
 8002fd0:	4093      	lsls	r3, r2
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fd8:	4935      	ldr	r1, [pc, #212]	@ (80030b0 <HAL_GPIO_Init+0x328>)
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	089b      	lsrs	r3, r3, #2
 8002fde:	3302      	adds	r3, #2
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fe6:	4b3d      	ldr	r3, [pc, #244]	@ (80030dc <HAL_GPIO_Init+0x354>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	4313      	orrs	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800300a:	4a34      	ldr	r2, [pc, #208]	@ (80030dc <HAL_GPIO_Init+0x354>)
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003010:	4b32      	ldr	r3, [pc, #200]	@ (80030dc <HAL_GPIO_Init+0x354>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	43db      	mvns	r3, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4013      	ands	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	4313      	orrs	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003034:	4a29      	ldr	r2, [pc, #164]	@ (80030dc <HAL_GPIO_Init+0x354>)
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800303a:	4b28      	ldr	r3, [pc, #160]	@ (80030dc <HAL_GPIO_Init+0x354>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	43db      	mvns	r3, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4013      	ands	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800305e:	4a1f      	ldr	r2, [pc, #124]	@ (80030dc <HAL_GPIO_Init+0x354>)
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003064:	4b1d      	ldr	r3, [pc, #116]	@ (80030dc <HAL_GPIO_Init+0x354>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	43db      	mvns	r3, r3
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	4013      	ands	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	4313      	orrs	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003088:	4a14      	ldr	r2, [pc, #80]	@ (80030dc <HAL_GPIO_Init+0x354>)
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	3301      	adds	r3, #1
 8003092:	61fb      	str	r3, [r7, #28]
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	2b0f      	cmp	r3, #15
 8003098:	f67f ae84 	bls.w	8002da4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800309c:	bf00      	nop
 800309e:	bf00      	nop
 80030a0:	3724      	adds	r7, #36	@ 0x24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	40023800 	.word	0x40023800
 80030b0:	40013800 	.word	0x40013800
 80030b4:	40020000 	.word	0x40020000
 80030b8:	40020400 	.word	0x40020400
 80030bc:	40020800 	.word	0x40020800
 80030c0:	40020c00 	.word	0x40020c00
 80030c4:	40021000 	.word	0x40021000
 80030c8:	40021400 	.word	0x40021400
 80030cc:	40021800 	.word	0x40021800
 80030d0:	40021c00 	.word	0x40021c00
 80030d4:	40022000 	.word	0x40022000
 80030d8:	40022400 	.word	0x40022400
 80030dc:	40013c00 	.word	0x40013c00

080030e0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b087      	sub	sp, #28
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030f6:	2300      	movs	r3, #0
 80030f8:	617b      	str	r3, [r7, #20]
 80030fa:	e0d9      	b.n	80032b0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030fc:	2201      	movs	r2, #1
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	4013      	ands	r3, r2
 800310c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	429a      	cmp	r2, r3
 8003114:	f040 80c9 	bne.w	80032aa <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003118:	4a6b      	ldr	r2, [pc, #428]	@ (80032c8 <HAL_GPIO_DeInit+0x1e8>)
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	089b      	lsrs	r3, r3, #2
 800311e:	3302      	adds	r3, #2
 8003120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003124:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f003 0303 	and.w	r3, r3, #3
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	220f      	movs	r2, #15
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	4013      	ands	r3, r2
 8003138:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a63      	ldr	r2, [pc, #396]	@ (80032cc <HAL_GPIO_DeInit+0x1ec>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d037      	beq.n	80031b2 <HAL_GPIO_DeInit+0xd2>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a62      	ldr	r2, [pc, #392]	@ (80032d0 <HAL_GPIO_DeInit+0x1f0>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d031      	beq.n	80031ae <HAL_GPIO_DeInit+0xce>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a61      	ldr	r2, [pc, #388]	@ (80032d4 <HAL_GPIO_DeInit+0x1f4>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d02b      	beq.n	80031aa <HAL_GPIO_DeInit+0xca>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a60      	ldr	r2, [pc, #384]	@ (80032d8 <HAL_GPIO_DeInit+0x1f8>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d025      	beq.n	80031a6 <HAL_GPIO_DeInit+0xc6>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a5f      	ldr	r2, [pc, #380]	@ (80032dc <HAL_GPIO_DeInit+0x1fc>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d01f      	beq.n	80031a2 <HAL_GPIO_DeInit+0xc2>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a5e      	ldr	r2, [pc, #376]	@ (80032e0 <HAL_GPIO_DeInit+0x200>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d019      	beq.n	800319e <HAL_GPIO_DeInit+0xbe>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a5d      	ldr	r2, [pc, #372]	@ (80032e4 <HAL_GPIO_DeInit+0x204>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d013      	beq.n	800319a <HAL_GPIO_DeInit+0xba>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a5c      	ldr	r2, [pc, #368]	@ (80032e8 <HAL_GPIO_DeInit+0x208>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d00d      	beq.n	8003196 <HAL_GPIO_DeInit+0xb6>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a5b      	ldr	r2, [pc, #364]	@ (80032ec <HAL_GPIO_DeInit+0x20c>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d007      	beq.n	8003192 <HAL_GPIO_DeInit+0xb2>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a5a      	ldr	r2, [pc, #360]	@ (80032f0 <HAL_GPIO_DeInit+0x210>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d101      	bne.n	800318e <HAL_GPIO_DeInit+0xae>
 800318a:	2309      	movs	r3, #9
 800318c:	e012      	b.n	80031b4 <HAL_GPIO_DeInit+0xd4>
 800318e:	230a      	movs	r3, #10
 8003190:	e010      	b.n	80031b4 <HAL_GPIO_DeInit+0xd4>
 8003192:	2308      	movs	r3, #8
 8003194:	e00e      	b.n	80031b4 <HAL_GPIO_DeInit+0xd4>
 8003196:	2307      	movs	r3, #7
 8003198:	e00c      	b.n	80031b4 <HAL_GPIO_DeInit+0xd4>
 800319a:	2306      	movs	r3, #6
 800319c:	e00a      	b.n	80031b4 <HAL_GPIO_DeInit+0xd4>
 800319e:	2305      	movs	r3, #5
 80031a0:	e008      	b.n	80031b4 <HAL_GPIO_DeInit+0xd4>
 80031a2:	2304      	movs	r3, #4
 80031a4:	e006      	b.n	80031b4 <HAL_GPIO_DeInit+0xd4>
 80031a6:	2303      	movs	r3, #3
 80031a8:	e004      	b.n	80031b4 <HAL_GPIO_DeInit+0xd4>
 80031aa:	2302      	movs	r3, #2
 80031ac:	e002      	b.n	80031b4 <HAL_GPIO_DeInit+0xd4>
 80031ae:	2301      	movs	r3, #1
 80031b0:	e000      	b.n	80031b4 <HAL_GPIO_DeInit+0xd4>
 80031b2:	2300      	movs	r3, #0
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	f002 0203 	and.w	r2, r2, #3
 80031ba:	0092      	lsls	r2, r2, #2
 80031bc:	4093      	lsls	r3, r2
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d132      	bne.n	800322a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80031c4:	4b4b      	ldr	r3, [pc, #300]	@ (80032f4 <HAL_GPIO_DeInit+0x214>)
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	43db      	mvns	r3, r3
 80031cc:	4949      	ldr	r1, [pc, #292]	@ (80032f4 <HAL_GPIO_DeInit+0x214>)
 80031ce:	4013      	ands	r3, r2
 80031d0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80031d2:	4b48      	ldr	r3, [pc, #288]	@ (80032f4 <HAL_GPIO_DeInit+0x214>)
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	43db      	mvns	r3, r3
 80031da:	4946      	ldr	r1, [pc, #280]	@ (80032f4 <HAL_GPIO_DeInit+0x214>)
 80031dc:	4013      	ands	r3, r2
 80031de:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80031e0:	4b44      	ldr	r3, [pc, #272]	@ (80032f4 <HAL_GPIO_DeInit+0x214>)
 80031e2:	68da      	ldr	r2, [r3, #12]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	43db      	mvns	r3, r3
 80031e8:	4942      	ldr	r1, [pc, #264]	@ (80032f4 <HAL_GPIO_DeInit+0x214>)
 80031ea:	4013      	ands	r3, r2
 80031ec:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80031ee:	4b41      	ldr	r3, [pc, #260]	@ (80032f4 <HAL_GPIO_DeInit+0x214>)
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	43db      	mvns	r3, r3
 80031f6:	493f      	ldr	r1, [pc, #252]	@ (80032f4 <HAL_GPIO_DeInit+0x214>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	220f      	movs	r2, #15
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800320c:	4a2e      	ldr	r2, [pc, #184]	@ (80032c8 <HAL_GPIO_DeInit+0x1e8>)
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	089b      	lsrs	r3, r3, #2
 8003212:	3302      	adds	r3, #2
 8003214:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	43da      	mvns	r2, r3
 800321c:	482a      	ldr	r0, [pc, #168]	@ (80032c8 <HAL_GPIO_DeInit+0x1e8>)
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	089b      	lsrs	r3, r3, #2
 8003222:	400a      	ands	r2, r1
 8003224:	3302      	adds	r3, #2
 8003226:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	2103      	movs	r1, #3
 8003234:	fa01 f303 	lsl.w	r3, r1, r3
 8003238:	43db      	mvns	r3, r3
 800323a:	401a      	ands	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	08da      	lsrs	r2, r3, #3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3208      	adds	r2, #8
 8003248:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	220f      	movs	r2, #15
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	43db      	mvns	r3, r3
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	08d2      	lsrs	r2, r2, #3
 8003260:	4019      	ands	r1, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	3208      	adds	r2, #8
 8003266:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	2103      	movs	r1, #3
 8003274:	fa01 f303 	lsl.w	r3, r1, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	401a      	ands	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	2101      	movs	r1, #1
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	fa01 f303 	lsl.w	r3, r1, r3
 800328c:	43db      	mvns	r3, r3
 800328e:	401a      	ands	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	2103      	movs	r1, #3
 800329e:	fa01 f303 	lsl.w	r3, r1, r3
 80032a2:	43db      	mvns	r3, r3
 80032a4:	401a      	ands	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	3301      	adds	r3, #1
 80032ae:	617b      	str	r3, [r7, #20]
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2b0f      	cmp	r3, #15
 80032b4:	f67f af22 	bls.w	80030fc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80032b8:	bf00      	nop
 80032ba:	bf00      	nop
 80032bc:	371c      	adds	r7, #28
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	40013800 	.word	0x40013800
 80032cc:	40020000 	.word	0x40020000
 80032d0:	40020400 	.word	0x40020400
 80032d4:	40020800 	.word	0x40020800
 80032d8:	40020c00 	.word	0x40020c00
 80032dc:	40021000 	.word	0x40021000
 80032e0:	40021400 	.word	0x40021400
 80032e4:	40021800 	.word	0x40021800
 80032e8:	40021c00 	.word	0x40021c00
 80032ec:	40022000 	.word	0x40022000
 80032f0:	40022400 	.word	0x40022400
 80032f4:	40013c00 	.word	0x40013c00

080032f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	460b      	mov	r3, r1
 8003302:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	887b      	ldrh	r3, [r7, #2]
 800330a:	4013      	ands	r3, r2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d002      	beq.n	8003316 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003310:	2301      	movs	r3, #1
 8003312:	73fb      	strb	r3, [r7, #15]
 8003314:	e001      	b.n	800331a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003316:	2300      	movs	r3, #0
 8003318:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800331a:	7bfb      	ldrb	r3, [r7, #15]
}
 800331c:	4618      	mov	r0, r3
 800331e:	3714      	adds	r7, #20
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	460b      	mov	r3, r1
 8003332:	807b      	strh	r3, [r7, #2]
 8003334:	4613      	mov	r3, r2
 8003336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003338:	787b      	ldrb	r3, [r7, #1]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800333e:	887a      	ldrh	r2, [r7, #2]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003344:	e003      	b.n	800334e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003346:	887b      	ldrh	r3, [r7, #2]
 8003348:	041a      	lsls	r2, r3, #16
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	619a      	str	r2, [r3, #24]
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
	...

0800335c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e0bf      	b.n	80034ee <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d106      	bne.n	8003388 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7fd fad8 	bl	8000938 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2202      	movs	r2, #2
 800338c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	699a      	ldr	r2, [r3, #24]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800339e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6999      	ldr	r1, [r3, #24]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80033b4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6899      	ldr	r1, [r3, #8]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	4b4a      	ldr	r3, [pc, #296]	@ (80034f8 <HAL_LTDC_Init+0x19c>)
 80033d0:	400b      	ands	r3, r1
 80033d2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	041b      	lsls	r3, r3, #16
 80033da:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6899      	ldr	r1, [r3, #8]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	699a      	ldr	r2, [r3, #24]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	431a      	orrs	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68d9      	ldr	r1, [r3, #12]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	4b3e      	ldr	r3, [pc, #248]	@ (80034f8 <HAL_LTDC_Init+0x19c>)
 80033fe:	400b      	ands	r3, r1
 8003400:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	041b      	lsls	r3, r3, #16
 8003408:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68d9      	ldr	r1, [r3, #12]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a1a      	ldr	r2, [r3, #32]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	431a      	orrs	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6919      	ldr	r1, [r3, #16]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	4b33      	ldr	r3, [pc, #204]	@ (80034f8 <HAL_LTDC_Init+0x19c>)
 800342c:	400b      	ands	r3, r1
 800342e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003434:	041b      	lsls	r3, r3, #16
 8003436:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6919      	ldr	r1, [r3, #16]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	431a      	orrs	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6959      	ldr	r1, [r3, #20]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	4b27      	ldr	r3, [pc, #156]	@ (80034f8 <HAL_LTDC_Init+0x19c>)
 800345a:	400b      	ands	r3, r1
 800345c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003462:	041b      	lsls	r3, r3, #16
 8003464:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6959      	ldr	r1, [r3, #20]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003482:	021b      	lsls	r3, r3, #8
 8003484:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800348c:	041b      	lsls	r3, r3, #16
 800348e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800349e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0206 	orr.w	r2, r2, #6
 80034ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	699a      	ldr	r2, [r3, #24]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0201 	orr.w	r2, r2, #1
 80034da:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	f000f800 	.word	0xf000f800

080034fc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80034fc:	b5b0      	push	{r4, r5, r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800350e:	2b01      	cmp	r3, #1
 8003510:	d101      	bne.n	8003516 <HAL_LTDC_ConfigLayer+0x1a>
 8003512:	2302      	movs	r3, #2
 8003514:	e02c      	b.n	8003570 <HAL_LTDC_ConfigLayer+0x74>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2202      	movs	r2, #2
 8003522:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2134      	movs	r1, #52	@ 0x34
 800352c:	fb01 f303 	mul.w	r3, r1, r3
 8003530:	4413      	add	r3, r2
 8003532:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	4614      	mov	r4, r2
 800353a:	461d      	mov	r5, r3
 800353c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800353e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003540:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003542:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003548:	682b      	ldr	r3, [r5, #0]
 800354a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	68b9      	ldr	r1, [r7, #8]
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f000 f83b 	bl	80035cc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2201      	movs	r2, #1
 800355c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bdb0      	pop	{r4, r5, r7, pc}

08003578 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8003586:	2b01      	cmp	r3, #1
 8003588:	d101      	bne.n	800358e <HAL_LTDC_EnableDither+0x16>
 800358a:	2302      	movs	r3, #2
 800358c:	e016      	b.n	80035bc <HAL_LTDC_EnableDither+0x44>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2202      	movs	r2, #2
 800359a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 800359e:	4b0a      	ldr	r3, [pc, #40]	@ (80035c8 <HAL_LTDC_EnableDither+0x50>)
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	4a09      	ldr	r2, [pc, #36]	@ (80035c8 <HAL_LTDC_EnableDither+0x50>)
 80035a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035a8:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	40016800 	.word	0x40016800

080035cc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b089      	sub	sp, #36	@ 0x24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	0c1b      	lsrs	r3, r3, #16
 80035e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035e8:	4413      	add	r3, r2
 80035ea:	041b      	lsls	r3, r3, #16
 80035ec:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	461a      	mov	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	01db      	lsls	r3, r3, #7
 80035f8:	4413      	add	r3, r2
 80035fa:	3384      	adds	r3, #132	@ 0x84
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	6812      	ldr	r2, [r2, #0]
 8003602:	4611      	mov	r1, r2
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	01d2      	lsls	r2, r2, #7
 8003608:	440a      	add	r2, r1
 800360a:	3284      	adds	r2, #132	@ 0x84
 800360c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003610:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	0c1b      	lsrs	r3, r3, #16
 800361e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003622:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003624:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4619      	mov	r1, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	01db      	lsls	r3, r3, #7
 8003630:	440b      	add	r3, r1
 8003632:	3384      	adds	r3, #132	@ 0x84
 8003634:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800363a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	68da      	ldr	r2, [r3, #12]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800364a:	4413      	add	r3, r2
 800364c:	041b      	lsls	r3, r3, #16
 800364e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	461a      	mov	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	01db      	lsls	r3, r3, #7
 800365a:	4413      	add	r3, r2
 800365c:	3384      	adds	r3, #132	@ 0x84
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	6812      	ldr	r2, [r2, #0]
 8003664:	4611      	mov	r1, r2
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	01d2      	lsls	r2, r2, #7
 800366a:	440a      	add	r2, r1
 800366c:	3284      	adds	r2, #132	@ 0x84
 800366e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003672:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003682:	4413      	add	r3, r2
 8003684:	1c5a      	adds	r2, r3, #1
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4619      	mov	r1, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	01db      	lsls	r3, r3, #7
 8003690:	440b      	add	r3, r1
 8003692:	3384      	adds	r3, #132	@ 0x84
 8003694:	4619      	mov	r1, r3
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	4313      	orrs	r3, r2
 800369a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	461a      	mov	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	01db      	lsls	r3, r3, #7
 80036a6:	4413      	add	r3, r2
 80036a8:	3384      	adds	r3, #132	@ 0x84
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	6812      	ldr	r2, [r2, #0]
 80036b0:	4611      	mov	r1, r2
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	01d2      	lsls	r2, r2, #7
 80036b6:	440a      	add	r2, r1
 80036b8:	3284      	adds	r2, #132	@ 0x84
 80036ba:	f023 0307 	bic.w	r3, r3, #7
 80036be:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	461a      	mov	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	01db      	lsls	r3, r3, #7
 80036ca:	4413      	add	r3, r2
 80036cc:	3384      	adds	r3, #132	@ 0x84
 80036ce:	461a      	mov	r2, r3
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80036dc:	021b      	lsls	r3, r3, #8
 80036de:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80036e6:	041b      	lsls	r3, r3, #16
 80036e8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	061b      	lsls	r3, r3, #24
 80036f0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	461a      	mov	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	01db      	lsls	r3, r3, #7
 80036fc:	4413      	add	r3, r2
 80036fe:	3384      	adds	r3, #132	@ 0x84
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	01db      	lsls	r3, r3, #7
 800370c:	4413      	add	r3, r2
 800370e:	3384      	adds	r3, #132	@ 0x84
 8003710:	461a      	mov	r2, r3
 8003712:	2300      	movs	r3, #0
 8003714:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800371c:	461a      	mov	r2, r3
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	431a      	orrs	r2, r3
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	431a      	orrs	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4619      	mov	r1, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	01db      	lsls	r3, r3, #7
 8003730:	440b      	add	r3, r1
 8003732:	3384      	adds	r3, #132	@ 0x84
 8003734:	4619      	mov	r1, r3
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	4313      	orrs	r3, r2
 800373a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	461a      	mov	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	01db      	lsls	r3, r3, #7
 8003746:	4413      	add	r3, r2
 8003748:	3384      	adds	r3, #132	@ 0x84
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	6812      	ldr	r2, [r2, #0]
 8003750:	4611      	mov	r1, r2
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	01d2      	lsls	r2, r2, #7
 8003756:	440a      	add	r2, r1
 8003758:	3284      	adds	r2, #132	@ 0x84
 800375a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800375e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	461a      	mov	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	01db      	lsls	r3, r3, #7
 800376a:	4413      	add	r3, r2
 800376c:	3384      	adds	r3, #132	@ 0x84
 800376e:	461a      	mov	r2, r3
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	461a      	mov	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	01db      	lsls	r3, r3, #7
 8003780:	4413      	add	r3, r2
 8003782:	3384      	adds	r3, #132	@ 0x84
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	6812      	ldr	r2, [r2, #0]
 800378a:	4611      	mov	r1, r2
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	01d2      	lsls	r2, r2, #7
 8003790:	440a      	add	r2, r1
 8003792:	3284      	adds	r2, #132	@ 0x84
 8003794:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003798:	f023 0307 	bic.w	r3, r3, #7
 800379c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	69da      	ldr	r2, [r3, #28]
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	68f9      	ldr	r1, [r7, #12]
 80037a8:	6809      	ldr	r1, [r1, #0]
 80037aa:	4608      	mov	r0, r1
 80037ac:	6879      	ldr	r1, [r7, #4]
 80037ae:	01c9      	lsls	r1, r1, #7
 80037b0:	4401      	add	r1, r0
 80037b2:	3184      	adds	r1, #132	@ 0x84
 80037b4:	4313      	orrs	r3, r2
 80037b6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	461a      	mov	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	01db      	lsls	r3, r3, #7
 80037c2:	4413      	add	r3, r2
 80037c4:	3384      	adds	r3, #132	@ 0x84
 80037c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	461a      	mov	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	01db      	lsls	r3, r3, #7
 80037d2:	4413      	add	r3, r2
 80037d4:	3384      	adds	r3, #132	@ 0x84
 80037d6:	461a      	mov	r2, r3
 80037d8:	2300      	movs	r3, #0
 80037da:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	461a      	mov	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	01db      	lsls	r3, r3, #7
 80037e6:	4413      	add	r3, r2
 80037e8:	3384      	adds	r3, #132	@ 0x84
 80037ea:	461a      	mov	r2, r3
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f0:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d102      	bne.n	8003800 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80037fa:	2304      	movs	r3, #4
 80037fc:	61fb      	str	r3, [r7, #28]
 80037fe:	e01b      	b.n	8003838 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d102      	bne.n	800380e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003808:	2303      	movs	r3, #3
 800380a:	61fb      	str	r3, [r7, #28]
 800380c:	e014      	b.n	8003838 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	2b04      	cmp	r3, #4
 8003814:	d00b      	beq.n	800382e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800381a:	2b02      	cmp	r3, #2
 800381c:	d007      	beq.n	800382e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003822:	2b03      	cmp	r3, #3
 8003824:	d003      	beq.n	800382e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800382a:	2b07      	cmp	r3, #7
 800382c:	d102      	bne.n	8003834 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800382e:	2302      	movs	r3, #2
 8003830:	61fb      	str	r3, [r7, #28]
 8003832:	e001      	b.n	8003838 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003834:	2301      	movs	r3, #1
 8003836:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	461a      	mov	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	01db      	lsls	r3, r3, #7
 8003842:	4413      	add	r3, r2
 8003844:	3384      	adds	r3, #132	@ 0x84
 8003846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	6812      	ldr	r2, [r2, #0]
 800384c:	4611      	mov	r1, r2
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	01d2      	lsls	r2, r2, #7
 8003852:	440a      	add	r2, r1
 8003854:	3284      	adds	r2, #132	@ 0x84
 8003856:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800385a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003860:	69fa      	ldr	r2, [r7, #28]
 8003862:	fb02 f303 	mul.w	r3, r2, r3
 8003866:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	6859      	ldr	r1, [r3, #4]
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	1acb      	subs	r3, r1, r3
 8003872:	69f9      	ldr	r1, [r7, #28]
 8003874:	fb01 f303 	mul.w	r3, r1, r3
 8003878:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800387a:	68f9      	ldr	r1, [r7, #12]
 800387c:	6809      	ldr	r1, [r1, #0]
 800387e:	4608      	mov	r0, r1
 8003880:	6879      	ldr	r1, [r7, #4]
 8003882:	01c9      	lsls	r1, r1, #7
 8003884:	4401      	add	r1, r0
 8003886:	3184      	adds	r1, #132	@ 0x84
 8003888:	4313      	orrs	r3, r2
 800388a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	461a      	mov	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	01db      	lsls	r3, r3, #7
 8003896:	4413      	add	r3, r2
 8003898:	3384      	adds	r3, #132	@ 0x84
 800389a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	6812      	ldr	r2, [r2, #0]
 80038a0:	4611      	mov	r1, r2
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	01d2      	lsls	r2, r2, #7
 80038a6:	440a      	add	r2, r1
 80038a8:	3284      	adds	r2, #132	@ 0x84
 80038aa:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80038ae:	f023 0307 	bic.w	r3, r3, #7
 80038b2:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	461a      	mov	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	01db      	lsls	r3, r3, #7
 80038be:	4413      	add	r3, r2
 80038c0:	3384      	adds	r3, #132	@ 0x84
 80038c2:	461a      	mov	r2, r3
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	461a      	mov	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	01db      	lsls	r3, r3, #7
 80038d4:	4413      	add	r3, r2
 80038d6:	3384      	adds	r3, #132	@ 0x84
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	6812      	ldr	r2, [r2, #0]
 80038de:	4611      	mov	r1, r2
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	01d2      	lsls	r2, r2, #7
 80038e4:	440a      	add	r2, r1
 80038e6:	3284      	adds	r2, #132	@ 0x84
 80038e8:	f043 0301 	orr.w	r3, r3, #1
 80038ec:	6013      	str	r3, [r2, #0]
}
 80038ee:	bf00      	nop
 80038f0:	3724      	adds	r7, #36	@ 0x24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
	...

080038fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003902:	2300      	movs	r3, #0
 8003904:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003906:	2300      	movs	r3, #0
 8003908:	603b      	str	r3, [r7, #0]
 800390a:	4b20      	ldr	r3, [pc, #128]	@ (800398c <HAL_PWREx_EnableOverDrive+0x90>)
 800390c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390e:	4a1f      	ldr	r2, [pc, #124]	@ (800398c <HAL_PWREx_EnableOverDrive+0x90>)
 8003910:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003914:	6413      	str	r3, [r2, #64]	@ 0x40
 8003916:	4b1d      	ldr	r3, [pc, #116]	@ (800398c <HAL_PWREx_EnableOverDrive+0x90>)
 8003918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800391e:	603b      	str	r3, [r7, #0]
 8003920:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003922:	4b1b      	ldr	r3, [pc, #108]	@ (8003990 <HAL_PWREx_EnableOverDrive+0x94>)
 8003924:	2201      	movs	r2, #1
 8003926:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003928:	f7fe fca2 	bl	8002270 <HAL_GetTick>
 800392c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800392e:	e009      	b.n	8003944 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003930:	f7fe fc9e 	bl	8002270 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800393e:	d901      	bls.n	8003944 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e01f      	b.n	8003984 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003944:	4b13      	ldr	r3, [pc, #76]	@ (8003994 <HAL_PWREx_EnableOverDrive+0x98>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800394c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003950:	d1ee      	bne.n	8003930 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003952:	4b11      	ldr	r3, [pc, #68]	@ (8003998 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003954:	2201      	movs	r2, #1
 8003956:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003958:	f7fe fc8a 	bl	8002270 <HAL_GetTick>
 800395c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800395e:	e009      	b.n	8003974 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003960:	f7fe fc86 	bl	8002270 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800396e:	d901      	bls.n	8003974 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e007      	b.n	8003984 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003974:	4b07      	ldr	r3, [pc, #28]	@ (8003994 <HAL_PWREx_EnableOverDrive+0x98>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800397c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003980:	d1ee      	bne.n	8003960 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3708      	adds	r7, #8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40023800 	.word	0x40023800
 8003990:	420e0040 	.word	0x420e0040
 8003994:	40007000 	.word	0x40007000
 8003998:	420e0044 	.word	0x420e0044

0800399c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e267      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d075      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80039ba:	4b88      	ldr	r3, [pc, #544]	@ (8003bdc <HAL_RCC_OscConfig+0x240>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f003 030c 	and.w	r3, r3, #12
 80039c2:	2b04      	cmp	r3, #4
 80039c4:	d00c      	beq.n	80039e0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039c6:	4b85      	ldr	r3, [pc, #532]	@ (8003bdc <HAL_RCC_OscConfig+0x240>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80039ce:	2b08      	cmp	r3, #8
 80039d0:	d112      	bne.n	80039f8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039d2:	4b82      	ldr	r3, [pc, #520]	@ (8003bdc <HAL_RCC_OscConfig+0x240>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039de:	d10b      	bne.n	80039f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e0:	4b7e      	ldr	r3, [pc, #504]	@ (8003bdc <HAL_RCC_OscConfig+0x240>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d05b      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x108>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d157      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e242      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a00:	d106      	bne.n	8003a10 <HAL_RCC_OscConfig+0x74>
 8003a02:	4b76      	ldr	r3, [pc, #472]	@ (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a75      	ldr	r2, [pc, #468]	@ (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003a08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a0c:	6013      	str	r3, [r2, #0]
 8003a0e:	e01d      	b.n	8003a4c <HAL_RCC_OscConfig+0xb0>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a18:	d10c      	bne.n	8003a34 <HAL_RCC_OscConfig+0x98>
 8003a1a:	4b70      	ldr	r3, [pc, #448]	@ (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a6f      	ldr	r2, [pc, #444]	@ (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003a20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	4b6d      	ldr	r3, [pc, #436]	@ (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a6c      	ldr	r2, [pc, #432]	@ (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003a2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	e00b      	b.n	8003a4c <HAL_RCC_OscConfig+0xb0>
 8003a34:	4b69      	ldr	r3, [pc, #420]	@ (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a68      	ldr	r2, [pc, #416]	@ (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003a3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a3e:	6013      	str	r3, [r2, #0]
 8003a40:	4b66      	ldr	r3, [pc, #408]	@ (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a65      	ldr	r2, [pc, #404]	@ (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003a46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d013      	beq.n	8003a7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a54:	f7fe fc0c 	bl	8002270 <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a5c:	f7fe fc08 	bl	8002270 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b64      	cmp	r3, #100	@ 0x64
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e207      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a6e:	4b5b      	ldr	r3, [pc, #364]	@ (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d0f0      	beq.n	8003a5c <HAL_RCC_OscConfig+0xc0>
 8003a7a:	e014      	b.n	8003aa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7c:	f7fe fbf8 	bl	8002270 <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a84:	f7fe fbf4 	bl	8002270 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b64      	cmp	r3, #100	@ 0x64
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e1f3      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a96:	4b51      	ldr	r3, [pc, #324]	@ (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1f0      	bne.n	8003a84 <HAL_RCC_OscConfig+0xe8>
 8003aa2:	e000      	b.n	8003aa6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d063      	beq.n	8003b7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003ab2:	4b4a      	ldr	r3, [pc, #296]	@ (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 030c 	and.w	r3, r3, #12
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00b      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003abe:	4b47      	ldr	r3, [pc, #284]	@ (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003ac6:	2b08      	cmp	r3, #8
 8003ac8:	d11c      	bne.n	8003b04 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aca:	4b44      	ldr	r3, [pc, #272]	@ (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d116      	bne.n	8003b04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ad6:	4b41      	ldr	r3, [pc, #260]	@ (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d005      	beq.n	8003aee <HAL_RCC_OscConfig+0x152>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d001      	beq.n	8003aee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e1c7      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aee:	4b3b      	ldr	r3, [pc, #236]	@ (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	4937      	ldr	r1, [pc, #220]	@ (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b02:	e03a      	b.n	8003b7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d020      	beq.n	8003b4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b0c:	4b34      	ldr	r3, [pc, #208]	@ (8003be0 <HAL_RCC_OscConfig+0x244>)
 8003b0e:	2201      	movs	r2, #1
 8003b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b12:	f7fe fbad 	bl	8002270 <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b18:	e008      	b.n	8003b2c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b1a:	f7fe fba9 	bl	8002270 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e1a8      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b2c:	4b2b      	ldr	r3, [pc, #172]	@ (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0f0      	beq.n	8003b1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b38:	4b28      	ldr	r3, [pc, #160]	@ (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	4925      	ldr	r1, [pc, #148]	@ (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	600b      	str	r3, [r1, #0]
 8003b4c:	e015      	b.n	8003b7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b4e:	4b24      	ldr	r3, [pc, #144]	@ (8003be0 <HAL_RCC_OscConfig+0x244>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b54:	f7fe fb8c 	bl	8002270 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b5c:	f7fe fb88 	bl	8002270 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e187      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b6e:	4b1b      	ldr	r3, [pc, #108]	@ (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1f0      	bne.n	8003b5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d036      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d016      	beq.n	8003bbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b8e:	4b15      	ldr	r3, [pc, #84]	@ (8003be4 <HAL_RCC_OscConfig+0x248>)
 8003b90:	2201      	movs	r2, #1
 8003b92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b94:	f7fe fb6c 	bl	8002270 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b9c:	f7fe fb68 	bl	8002270 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e167      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bae:	4b0b      	ldr	r3, [pc, #44]	@ (8003bdc <HAL_RCC_OscConfig+0x240>)
 8003bb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0f0      	beq.n	8003b9c <HAL_RCC_OscConfig+0x200>
 8003bba:	e01b      	b.n	8003bf4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bbc:	4b09      	ldr	r3, [pc, #36]	@ (8003be4 <HAL_RCC_OscConfig+0x248>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bc2:	f7fe fb55 	bl	8002270 <HAL_GetTick>
 8003bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bc8:	e00e      	b.n	8003be8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bca:	f7fe fb51 	bl	8002270 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d907      	bls.n	8003be8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e150      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	42470000 	.word	0x42470000
 8003be4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003be8:	4b88      	ldr	r3, [pc, #544]	@ (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003bea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1ea      	bne.n	8003bca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 8097 	beq.w	8003d30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c02:	2300      	movs	r3, #0
 8003c04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c06:	4b81      	ldr	r3, [pc, #516]	@ (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10f      	bne.n	8003c32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c12:	2300      	movs	r3, #0
 8003c14:	60bb      	str	r3, [r7, #8]
 8003c16:	4b7d      	ldr	r3, [pc, #500]	@ (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1a:	4a7c      	ldr	r2, [pc, #496]	@ (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003c1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c20:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c22:	4b7a      	ldr	r3, [pc, #488]	@ (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c2a:	60bb      	str	r3, [r7, #8]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c32:	4b77      	ldr	r3, [pc, #476]	@ (8003e10 <HAL_RCC_OscConfig+0x474>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d118      	bne.n	8003c70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c3e:	4b74      	ldr	r3, [pc, #464]	@ (8003e10 <HAL_RCC_OscConfig+0x474>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a73      	ldr	r2, [pc, #460]	@ (8003e10 <HAL_RCC_OscConfig+0x474>)
 8003c44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c4a:	f7fe fb11 	bl	8002270 <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c50:	e008      	b.n	8003c64 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c52:	f7fe fb0d 	bl	8002270 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e10c      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c64:	4b6a      	ldr	r3, [pc, #424]	@ (8003e10 <HAL_RCC_OscConfig+0x474>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0f0      	beq.n	8003c52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d106      	bne.n	8003c86 <HAL_RCC_OscConfig+0x2ea>
 8003c78:	4b64      	ldr	r3, [pc, #400]	@ (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c7c:	4a63      	ldr	r2, [pc, #396]	@ (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003c7e:	f043 0301 	orr.w	r3, r3, #1
 8003c82:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c84:	e01c      	b.n	8003cc0 <HAL_RCC_OscConfig+0x324>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	2b05      	cmp	r3, #5
 8003c8c:	d10c      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x30c>
 8003c8e:	4b5f      	ldr	r3, [pc, #380]	@ (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c92:	4a5e      	ldr	r2, [pc, #376]	@ (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003c94:	f043 0304 	orr.w	r3, r3, #4
 8003c98:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c9a:	4b5c      	ldr	r3, [pc, #368]	@ (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c9e:	4a5b      	ldr	r2, [pc, #364]	@ (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003ca0:	f043 0301 	orr.w	r3, r3, #1
 8003ca4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ca6:	e00b      	b.n	8003cc0 <HAL_RCC_OscConfig+0x324>
 8003ca8:	4b58      	ldr	r3, [pc, #352]	@ (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cac:	4a57      	ldr	r2, [pc, #348]	@ (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003cae:	f023 0301 	bic.w	r3, r3, #1
 8003cb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cb4:	4b55      	ldr	r3, [pc, #340]	@ (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb8:	4a54      	ldr	r2, [pc, #336]	@ (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003cba:	f023 0304 	bic.w	r3, r3, #4
 8003cbe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d015      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc8:	f7fe fad2 	bl	8002270 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cce:	e00a      	b.n	8003ce6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cd0:	f7fe face 	bl	8002270 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e0cb      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce6:	4b49      	ldr	r3, [pc, #292]	@ (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d0ee      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x334>
 8003cf2:	e014      	b.n	8003d1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cf4:	f7fe fabc 	bl	8002270 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cfa:	e00a      	b.n	8003d12 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cfc:	f7fe fab8 	bl	8002270 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e0b5      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d12:	4b3e      	ldr	r3, [pc, #248]	@ (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1ee      	bne.n	8003cfc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d1e:	7dfb      	ldrb	r3, [r7, #23]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d105      	bne.n	8003d30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d24:	4b39      	ldr	r3, [pc, #228]	@ (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d28:	4a38      	ldr	r2, [pc, #224]	@ (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003d2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d2e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 80a1 	beq.w	8003e7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d3a:	4b34      	ldr	r3, [pc, #208]	@ (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 030c 	and.w	r3, r3, #12
 8003d42:	2b08      	cmp	r3, #8
 8003d44:	d05c      	beq.n	8003e00 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d141      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d4e:	4b31      	ldr	r3, [pc, #196]	@ (8003e14 <HAL_RCC_OscConfig+0x478>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d54:	f7fe fa8c 	bl	8002270 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d5c:	f7fe fa88 	bl	8002270 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e087      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d6e:	4b27      	ldr	r3, [pc, #156]	@ (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1f0      	bne.n	8003d5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69da      	ldr	r2, [r3, #28]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d88:	019b      	lsls	r3, r3, #6
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d90:	085b      	lsrs	r3, r3, #1
 8003d92:	3b01      	subs	r3, #1
 8003d94:	041b      	lsls	r3, r3, #16
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9c:	061b      	lsls	r3, r3, #24
 8003d9e:	491b      	ldr	r1, [pc, #108]	@ (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003da4:	4b1b      	ldr	r3, [pc, #108]	@ (8003e14 <HAL_RCC_OscConfig+0x478>)
 8003da6:	2201      	movs	r2, #1
 8003da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003daa:	f7fe fa61 	bl	8002270 <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003db0:	e008      	b.n	8003dc4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003db2:	f7fe fa5d 	bl	8002270 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e05c      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dc4:	4b11      	ldr	r3, [pc, #68]	@ (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0f0      	beq.n	8003db2 <HAL_RCC_OscConfig+0x416>
 8003dd0:	e054      	b.n	8003e7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd2:	4b10      	ldr	r3, [pc, #64]	@ (8003e14 <HAL_RCC_OscConfig+0x478>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd8:	f7fe fa4a 	bl	8002270 <HAL_GetTick>
 8003ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dde:	e008      	b.n	8003df2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de0:	f7fe fa46 	bl	8002270 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e045      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df2:	4b06      	ldr	r3, [pc, #24]	@ (8003e0c <HAL_RCC_OscConfig+0x470>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1f0      	bne.n	8003de0 <HAL_RCC_OscConfig+0x444>
 8003dfe:	e03d      	b.n	8003e7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d107      	bne.n	8003e18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e038      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	40007000 	.word	0x40007000
 8003e14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e18:	4b1b      	ldr	r3, [pc, #108]	@ (8003e88 <HAL_RCC_OscConfig+0x4ec>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d028      	beq.n	8003e78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d121      	bne.n	8003e78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d11a      	bne.n	8003e78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e48:	4013      	ands	r3, r2
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d111      	bne.n	8003e78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e5e:	085b      	lsrs	r3, r3, #1
 8003e60:	3b01      	subs	r3, #1
 8003e62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d107      	bne.n	8003e78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d001      	beq.n	8003e7c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e000      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3718      	adds	r7, #24
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40023800 	.word	0x40023800

08003e8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e0cc      	b.n	800403a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ea0:	4b68      	ldr	r3, [pc, #416]	@ (8004044 <HAL_RCC_ClockConfig+0x1b8>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 030f 	and.w	r3, r3, #15
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d90c      	bls.n	8003ec8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eae:	4b65      	ldr	r3, [pc, #404]	@ (8004044 <HAL_RCC_ClockConfig+0x1b8>)
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	b2d2      	uxtb	r2, r2
 8003eb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eb6:	4b63      	ldr	r3, [pc, #396]	@ (8004044 <HAL_RCC_ClockConfig+0x1b8>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 030f 	and.w	r3, r3, #15
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d001      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e0b8      	b.n	800403a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d020      	beq.n	8003f16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0304 	and.w	r3, r3, #4
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d005      	beq.n	8003eec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ee0:	4b59      	ldr	r3, [pc, #356]	@ (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	4a58      	ldr	r2, [pc, #352]	@ (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003eea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0308 	and.w	r3, r3, #8
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d005      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ef8:	4b53      	ldr	r3, [pc, #332]	@ (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	4a52      	ldr	r2, [pc, #328]	@ (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003efe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f04:	4b50      	ldr	r3, [pc, #320]	@ (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	494d      	ldr	r1, [pc, #308]	@ (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d044      	beq.n	8003fac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d107      	bne.n	8003f3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f2a:	4b47      	ldr	r3, [pc, #284]	@ (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d119      	bne.n	8003f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e07f      	b.n	800403a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d003      	beq.n	8003f4a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f46:	2b03      	cmp	r3, #3
 8003f48:	d107      	bne.n	8003f5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f4a:	4b3f      	ldr	r3, [pc, #252]	@ (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d109      	bne.n	8003f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e06f      	b.n	800403a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f5a:	4b3b      	ldr	r3, [pc, #236]	@ (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e067      	b.n	800403a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f6a:	4b37      	ldr	r3, [pc, #220]	@ (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f023 0203 	bic.w	r2, r3, #3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	4934      	ldr	r1, [pc, #208]	@ (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f7c:	f7fe f978 	bl	8002270 <HAL_GetTick>
 8003f80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f82:	e00a      	b.n	8003f9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f84:	f7fe f974 	bl	8002270 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e04f      	b.n	800403a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f9a:	4b2b      	ldr	r3, [pc, #172]	@ (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f003 020c 	and.w	r2, r3, #12
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d1eb      	bne.n	8003f84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fac:	4b25      	ldr	r3, [pc, #148]	@ (8004044 <HAL_RCC_ClockConfig+0x1b8>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 030f 	and.w	r3, r3, #15
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d20c      	bcs.n	8003fd4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fba:	4b22      	ldr	r3, [pc, #136]	@ (8004044 <HAL_RCC_ClockConfig+0x1b8>)
 8003fbc:	683a      	ldr	r2, [r7, #0]
 8003fbe:	b2d2      	uxtb	r2, r2
 8003fc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc2:	4b20      	ldr	r3, [pc, #128]	@ (8004044 <HAL_RCC_ClockConfig+0x1b8>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 030f 	and.w	r3, r3, #15
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d001      	beq.n	8003fd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e032      	b.n	800403a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d008      	beq.n	8003ff2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fe0:	4b19      	ldr	r3, [pc, #100]	@ (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	4916      	ldr	r1, [pc, #88]	@ (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0308 	and.w	r3, r3, #8
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d009      	beq.n	8004012 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ffe:	4b12      	ldr	r3, [pc, #72]	@ (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	490e      	ldr	r1, [pc, #56]	@ (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 800400e:	4313      	orrs	r3, r2
 8004010:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004012:	f000 f821 	bl	8004058 <HAL_RCC_GetSysClockFreq>
 8004016:	4602      	mov	r2, r0
 8004018:	4b0b      	ldr	r3, [pc, #44]	@ (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	091b      	lsrs	r3, r3, #4
 800401e:	f003 030f 	and.w	r3, r3, #15
 8004022:	490a      	ldr	r1, [pc, #40]	@ (800404c <HAL_RCC_ClockConfig+0x1c0>)
 8004024:	5ccb      	ldrb	r3, [r1, r3]
 8004026:	fa22 f303 	lsr.w	r3, r2, r3
 800402a:	4a09      	ldr	r2, [pc, #36]	@ (8004050 <HAL_RCC_ClockConfig+0x1c4>)
 800402c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800402e:	4b09      	ldr	r3, [pc, #36]	@ (8004054 <HAL_RCC_ClockConfig+0x1c8>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4618      	mov	r0, r3
 8004034:	f7fe f8d8 	bl	80021e8 <HAL_InitTick>

  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	40023c00 	.word	0x40023c00
 8004048:	40023800 	.word	0x40023800
 800404c:	08005ec8 	.word	0x08005ec8
 8004050:	20000078 	.word	0x20000078
 8004054:	200000c4 	.word	0x200000c4

08004058 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800405c:	b094      	sub	sp, #80	@ 0x50
 800405e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004064:	2300      	movs	r3, #0
 8004066:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800406c:	2300      	movs	r3, #0
 800406e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004070:	4b79      	ldr	r3, [pc, #484]	@ (8004258 <HAL_RCC_GetSysClockFreq+0x200>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f003 030c 	and.w	r3, r3, #12
 8004078:	2b08      	cmp	r3, #8
 800407a:	d00d      	beq.n	8004098 <HAL_RCC_GetSysClockFreq+0x40>
 800407c:	2b08      	cmp	r3, #8
 800407e:	f200 80e1 	bhi.w	8004244 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004082:	2b00      	cmp	r3, #0
 8004084:	d002      	beq.n	800408c <HAL_RCC_GetSysClockFreq+0x34>
 8004086:	2b04      	cmp	r3, #4
 8004088:	d003      	beq.n	8004092 <HAL_RCC_GetSysClockFreq+0x3a>
 800408a:	e0db      	b.n	8004244 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800408c:	4b73      	ldr	r3, [pc, #460]	@ (800425c <HAL_RCC_GetSysClockFreq+0x204>)
 800408e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004090:	e0db      	b.n	800424a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004092:	4b73      	ldr	r3, [pc, #460]	@ (8004260 <HAL_RCC_GetSysClockFreq+0x208>)
 8004094:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004096:	e0d8      	b.n	800424a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004098:	4b6f      	ldr	r3, [pc, #444]	@ (8004258 <HAL_RCC_GetSysClockFreq+0x200>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040a0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040a2:	4b6d      	ldr	r3, [pc, #436]	@ (8004258 <HAL_RCC_GetSysClockFreq+0x200>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d063      	beq.n	8004176 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ae:	4b6a      	ldr	r3, [pc, #424]	@ (8004258 <HAL_RCC_GetSysClockFreq+0x200>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	099b      	lsrs	r3, r3, #6
 80040b4:	2200      	movs	r2, #0
 80040b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80040ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80040c2:	2300      	movs	r3, #0
 80040c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80040c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80040ca:	4622      	mov	r2, r4
 80040cc:	462b      	mov	r3, r5
 80040ce:	f04f 0000 	mov.w	r0, #0
 80040d2:	f04f 0100 	mov.w	r1, #0
 80040d6:	0159      	lsls	r1, r3, #5
 80040d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040dc:	0150      	lsls	r0, r2, #5
 80040de:	4602      	mov	r2, r0
 80040e0:	460b      	mov	r3, r1
 80040e2:	4621      	mov	r1, r4
 80040e4:	1a51      	subs	r1, r2, r1
 80040e6:	6139      	str	r1, [r7, #16]
 80040e8:	4629      	mov	r1, r5
 80040ea:	eb63 0301 	sbc.w	r3, r3, r1
 80040ee:	617b      	str	r3, [r7, #20]
 80040f0:	f04f 0200 	mov.w	r2, #0
 80040f4:	f04f 0300 	mov.w	r3, #0
 80040f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040fc:	4659      	mov	r1, fp
 80040fe:	018b      	lsls	r3, r1, #6
 8004100:	4651      	mov	r1, sl
 8004102:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004106:	4651      	mov	r1, sl
 8004108:	018a      	lsls	r2, r1, #6
 800410a:	4651      	mov	r1, sl
 800410c:	ebb2 0801 	subs.w	r8, r2, r1
 8004110:	4659      	mov	r1, fp
 8004112:	eb63 0901 	sbc.w	r9, r3, r1
 8004116:	f04f 0200 	mov.w	r2, #0
 800411a:	f04f 0300 	mov.w	r3, #0
 800411e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004122:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004126:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800412a:	4690      	mov	r8, r2
 800412c:	4699      	mov	r9, r3
 800412e:	4623      	mov	r3, r4
 8004130:	eb18 0303 	adds.w	r3, r8, r3
 8004134:	60bb      	str	r3, [r7, #8]
 8004136:	462b      	mov	r3, r5
 8004138:	eb49 0303 	adc.w	r3, r9, r3
 800413c:	60fb      	str	r3, [r7, #12]
 800413e:	f04f 0200 	mov.w	r2, #0
 8004142:	f04f 0300 	mov.w	r3, #0
 8004146:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800414a:	4629      	mov	r1, r5
 800414c:	024b      	lsls	r3, r1, #9
 800414e:	4621      	mov	r1, r4
 8004150:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004154:	4621      	mov	r1, r4
 8004156:	024a      	lsls	r2, r1, #9
 8004158:	4610      	mov	r0, r2
 800415a:	4619      	mov	r1, r3
 800415c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800415e:	2200      	movs	r2, #0
 8004160:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004162:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004164:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004168:	f7fc f892 	bl	8000290 <__aeabi_uldivmod>
 800416c:	4602      	mov	r2, r0
 800416e:	460b      	mov	r3, r1
 8004170:	4613      	mov	r3, r2
 8004172:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004174:	e058      	b.n	8004228 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004176:	4b38      	ldr	r3, [pc, #224]	@ (8004258 <HAL_RCC_GetSysClockFreq+0x200>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	099b      	lsrs	r3, r3, #6
 800417c:	2200      	movs	r2, #0
 800417e:	4618      	mov	r0, r3
 8004180:	4611      	mov	r1, r2
 8004182:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004186:	623b      	str	r3, [r7, #32]
 8004188:	2300      	movs	r3, #0
 800418a:	627b      	str	r3, [r7, #36]	@ 0x24
 800418c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004190:	4642      	mov	r2, r8
 8004192:	464b      	mov	r3, r9
 8004194:	f04f 0000 	mov.w	r0, #0
 8004198:	f04f 0100 	mov.w	r1, #0
 800419c:	0159      	lsls	r1, r3, #5
 800419e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041a2:	0150      	lsls	r0, r2, #5
 80041a4:	4602      	mov	r2, r0
 80041a6:	460b      	mov	r3, r1
 80041a8:	4641      	mov	r1, r8
 80041aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80041ae:	4649      	mov	r1, r9
 80041b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80041b4:	f04f 0200 	mov.w	r2, #0
 80041b8:	f04f 0300 	mov.w	r3, #0
 80041bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041c8:	ebb2 040a 	subs.w	r4, r2, sl
 80041cc:	eb63 050b 	sbc.w	r5, r3, fp
 80041d0:	f04f 0200 	mov.w	r2, #0
 80041d4:	f04f 0300 	mov.w	r3, #0
 80041d8:	00eb      	lsls	r3, r5, #3
 80041da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041de:	00e2      	lsls	r2, r4, #3
 80041e0:	4614      	mov	r4, r2
 80041e2:	461d      	mov	r5, r3
 80041e4:	4643      	mov	r3, r8
 80041e6:	18e3      	adds	r3, r4, r3
 80041e8:	603b      	str	r3, [r7, #0]
 80041ea:	464b      	mov	r3, r9
 80041ec:	eb45 0303 	adc.w	r3, r5, r3
 80041f0:	607b      	str	r3, [r7, #4]
 80041f2:	f04f 0200 	mov.w	r2, #0
 80041f6:	f04f 0300 	mov.w	r3, #0
 80041fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041fe:	4629      	mov	r1, r5
 8004200:	028b      	lsls	r3, r1, #10
 8004202:	4621      	mov	r1, r4
 8004204:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004208:	4621      	mov	r1, r4
 800420a:	028a      	lsls	r2, r1, #10
 800420c:	4610      	mov	r0, r2
 800420e:	4619      	mov	r1, r3
 8004210:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004212:	2200      	movs	r2, #0
 8004214:	61bb      	str	r3, [r7, #24]
 8004216:	61fa      	str	r2, [r7, #28]
 8004218:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800421c:	f7fc f838 	bl	8000290 <__aeabi_uldivmod>
 8004220:	4602      	mov	r2, r0
 8004222:	460b      	mov	r3, r1
 8004224:	4613      	mov	r3, r2
 8004226:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004228:	4b0b      	ldr	r3, [pc, #44]	@ (8004258 <HAL_RCC_GetSysClockFreq+0x200>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	0c1b      	lsrs	r3, r3, #16
 800422e:	f003 0303 	and.w	r3, r3, #3
 8004232:	3301      	adds	r3, #1
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004238:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800423a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800423c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004240:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004242:	e002      	b.n	800424a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004244:	4b05      	ldr	r3, [pc, #20]	@ (800425c <HAL_RCC_GetSysClockFreq+0x204>)
 8004246:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004248:	bf00      	nop
    }
  }
  return sysclockfreq;
 800424a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800424c:	4618      	mov	r0, r3
 800424e:	3750      	adds	r7, #80	@ 0x50
 8004250:	46bd      	mov	sp, r7
 8004252:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004256:	bf00      	nop
 8004258:	40023800 	.word	0x40023800
 800425c:	00f42400 	.word	0x00f42400
 8004260:	007a1200 	.word	0x007a1200

08004264 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800426c:	2300      	movs	r3, #0
 800426e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004270:	2300      	movs	r3, #0
 8004272:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10b      	bne.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004288:	2b00      	cmp	r3, #0
 800428a:	d105      	bne.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004294:	2b00      	cmp	r3, #0
 8004296:	d075      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004298:	4b91      	ldr	r3, [pc, #580]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800429a:	2200      	movs	r2, #0
 800429c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800429e:	f7fd ffe7 	bl	8002270 <HAL_GetTick>
 80042a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042a4:	e008      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80042a6:	f7fd ffe3 	bl	8002270 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e189      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042b8:	4b8a      	ldr	r3, [pc, #552]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1f0      	bne.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d009      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	019a      	lsls	r2, r3, #6
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	071b      	lsls	r3, r3, #28
 80042dc:	4981      	ldr	r1, [pc, #516]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d01f      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042f0:	4b7c      	ldr	r3, [pc, #496]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042f6:	0f1b      	lsrs	r3, r3, #28
 80042f8:	f003 0307 	and.w	r3, r3, #7
 80042fc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	019a      	lsls	r2, r3, #6
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	061b      	lsls	r3, r3, #24
 800430a:	431a      	orrs	r2, r3
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	071b      	lsls	r3, r3, #28
 8004310:	4974      	ldr	r1, [pc, #464]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004312:	4313      	orrs	r3, r2
 8004314:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004318:	4b72      	ldr	r3, [pc, #456]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800431a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800431e:	f023 021f 	bic.w	r2, r3, #31
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	3b01      	subs	r3, #1
 8004328:	496e      	ldr	r1, [pc, #440]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800432a:	4313      	orrs	r3, r2
 800432c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00d      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	019a      	lsls	r2, r3, #6
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	061b      	lsls	r3, r3, #24
 8004348:	431a      	orrs	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	071b      	lsls	r3, r3, #28
 8004350:	4964      	ldr	r1, [pc, #400]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004352:	4313      	orrs	r3, r2
 8004354:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004358:	4b61      	ldr	r3, [pc, #388]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800435a:	2201      	movs	r2, #1
 800435c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800435e:	f7fd ff87 	bl	8002270 <HAL_GetTick>
 8004362:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004364:	e008      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004366:	f7fd ff83 	bl	8002270 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d901      	bls.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e129      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004378:	4b5a      	ldr	r3, [pc, #360]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d0f0      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	2b00      	cmp	r3, #0
 800438e:	d105      	bne.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004398:	2b00      	cmp	r3, #0
 800439a:	d079      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800439c:	4b52      	ldr	r3, [pc, #328]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800439e:	2200      	movs	r2, #0
 80043a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043a2:	f7fd ff65 	bl	8002270 <HAL_GetTick>
 80043a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043a8:	e008      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80043aa:	f7fd ff61 	bl	8002270 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d901      	bls.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e107      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043bc:	4b49      	ldr	r3, [pc, #292]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80043c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043c8:	d0ef      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0304 	and.w	r3, r3, #4
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d020      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80043d6:	4b43      	ldr	r3, [pc, #268]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80043d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043dc:	0f1b      	lsrs	r3, r3, #28
 80043de:	f003 0307 	and.w	r3, r3, #7
 80043e2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	019a      	lsls	r2, r3, #6
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	061b      	lsls	r3, r3, #24
 80043f0:	431a      	orrs	r2, r3
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	071b      	lsls	r3, r3, #28
 80043f6:	493b      	ldr	r1, [pc, #236]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80043fe:	4b39      	ldr	r3, [pc, #228]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004400:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004404:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	3b01      	subs	r3, #1
 800440e:	021b      	lsls	r3, r3, #8
 8004410:	4934      	ldr	r1, [pc, #208]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004412:	4313      	orrs	r3, r2
 8004414:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0308 	and.w	r3, r3, #8
 8004420:	2b00      	cmp	r3, #0
 8004422:	d01e      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004424:	4b2f      	ldr	r3, [pc, #188]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800442a:	0e1b      	lsrs	r3, r3, #24
 800442c:	f003 030f 	and.w	r3, r3, #15
 8004430:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	019a      	lsls	r2, r3, #6
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	061b      	lsls	r3, r3, #24
 800443c:	431a      	orrs	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	071b      	lsls	r3, r3, #28
 8004444:	4927      	ldr	r1, [pc, #156]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004446:	4313      	orrs	r3, r2
 8004448:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800444c:	4b25      	ldr	r3, [pc, #148]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800444e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004452:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445a:	4922      	ldr	r1, [pc, #136]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800445c:	4313      	orrs	r3, r2
 800445e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004462:	4b21      	ldr	r3, [pc, #132]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004464:	2201      	movs	r2, #1
 8004466:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004468:	f7fd ff02 	bl	8002270 <HAL_GetTick>
 800446c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800446e:	e008      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004470:	f7fd fefe 	bl	8002270 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d901      	bls.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e0a4      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004482:	4b18      	ldr	r3, [pc, #96]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800448a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800448e:	d1ef      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0320 	and.w	r3, r3, #32
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 808b 	beq.w	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800449e:	2300      	movs	r3, #0
 80044a0:	60fb      	str	r3, [r7, #12]
 80044a2:	4b10      	ldr	r3, [pc, #64]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a6:	4a0f      	ldr	r2, [pc, #60]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80044ae:	4b0d      	ldr	r3, [pc, #52]	@ (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80044ba:	4b0c      	ldr	r3, [pc, #48]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a0b      	ldr	r2, [pc, #44]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80044c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044c4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044c6:	f7fd fed3 	bl	8002270 <HAL_GetTick>
 80044ca:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80044cc:	e010      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ce:	f7fd fecf 	bl	8002270 <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d909      	bls.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e075      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x368>
 80044e0:	42470068 	.word	0x42470068
 80044e4:	40023800 	.word	0x40023800
 80044e8:	42470070 	.word	0x42470070
 80044ec:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80044f0:	4b38      	ldr	r3, [pc, #224]	@ (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d0e8      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044fc:	4b36      	ldr	r3, [pc, #216]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80044fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004500:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004504:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d02f      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x308>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004510:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	429a      	cmp	r2, r3
 8004518:	d028      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800451a:	4b2f      	ldr	r3, [pc, #188]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800451c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800451e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004522:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004524:	4b2d      	ldr	r3, [pc, #180]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004526:	2201      	movs	r2, #1
 8004528:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800452a:	4b2c      	ldr	r3, [pc, #176]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800452c:	2200      	movs	r2, #0
 800452e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004530:	4a29      	ldr	r2, [pc, #164]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004536:	4b28      	ldr	r3, [pc, #160]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b01      	cmp	r3, #1
 8004540:	d114      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004542:	f7fd fe95 	bl	8002270 <HAL_GetTick>
 8004546:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004548:	e00a      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800454a:	f7fd fe91 	bl	8002270 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004558:	4293      	cmp	r3, r2
 800455a:	d901      	bls.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e035      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004560:	4b1d      	ldr	r3, [pc, #116]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d0ee      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004570:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004574:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004578:	d10d      	bne.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800457a:	4b17      	ldr	r3, [pc, #92]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004586:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800458a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800458e:	4912      	ldr	r1, [pc, #72]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004590:	4313      	orrs	r3, r2
 8004592:	608b      	str	r3, [r1, #8]
 8004594:	e005      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004596:	4b10      	ldr	r3, [pc, #64]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	4a0f      	ldr	r2, [pc, #60]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800459c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80045a0:	6093      	str	r3, [r2, #8]
 80045a2:	4b0d      	ldr	r3, [pc, #52]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80045a4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045ae:	490a      	ldr	r1, [pc, #40]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0310 	and.w	r3, r3, #16
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d004      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80045c6:	4b06      	ldr	r3, [pc, #24]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80045c8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3718      	adds	r7, #24
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	40007000 	.word	0x40007000
 80045d8:	40023800 	.word	0x40023800
 80045dc:	42470e40 	.word	0x42470e40
 80045e0:	424711e0 	.word	0x424711e0

080045e4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d101      	bne.n	80045f8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e025      	b.n	8004644 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b00      	cmp	r3, #0
 8004602:	d106      	bne.n	8004612 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f7fc fbb3 	bl	8000d78 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2202      	movs	r2, #2
 8004616:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	3304      	adds	r3, #4
 8004622:	4619      	mov	r1, r3
 8004624:	4610      	mov	r0, r2
 8004626:	f000 fe75 	bl	8005314 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6818      	ldr	r0, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	461a      	mov	r2, r3
 8004634:	6839      	ldr	r1, [r7, #0]
 8004636:	f000 feca 	bl	80053ce <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800465e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8004660:	7dfb      	ldrb	r3, [r7, #23]
 8004662:	2b02      	cmp	r3, #2
 8004664:	d101      	bne.n	800466a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8004666:	2302      	movs	r3, #2
 8004668:	e021      	b.n	80046ae <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800466a:	7dfb      	ldrb	r3, [r7, #23]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d002      	beq.n	8004676 <HAL_SDRAM_SendCommand+0x2a>
 8004670:	7dfb      	ldrb	r3, [r7, #23]
 8004672:	2b05      	cmp	r3, #5
 8004674:	d118      	bne.n	80046a8 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2202      	movs	r2, #2
 800467a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	68b9      	ldr	r1, [r7, #8]
 8004686:	4618      	mov	r0, r3
 8004688:	f000 ff0a 	bl	80054a0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2b02      	cmp	r3, #2
 8004692:	d104      	bne.n	800469e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2205      	movs	r2, #5
 8004698:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800469c:	e006      	b.n	80046ac <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80046a6:	e001      	b.n	80046ac <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e000      	b.n	80046ae <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3718      	adds	r7, #24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b082      	sub	sp, #8
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
 80046be:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d101      	bne.n	80046d0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80046cc:	2302      	movs	r3, #2
 80046ce:	e016      	b.n	80046fe <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d10f      	bne.n	80046fc <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6839      	ldr	r1, [r7, #0]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 ff15 	bl	800551a <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
 80046fa:	e000      	b.n	80046fe <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b082      	sub	sp, #8
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d101      	bne.n	8004718 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e07b      	b.n	8004810 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800471c:	2b00      	cmp	r3, #0
 800471e:	d108      	bne.n	8004732 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004728:	d009      	beq.n	800473e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	61da      	str	r2, [r3, #28]
 8004730:	e005      	b.n	800473e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	d106      	bne.n	800475e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f7fc fa15 	bl	8000b88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2202      	movs	r2, #2
 8004762:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004774:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004790:	431a      	orrs	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	431a      	orrs	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047ae:	431a      	orrs	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	69db      	ldr	r3, [r3, #28]
 80047b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047b8:	431a      	orrs	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047c2:	ea42 0103 	orr.w	r1, r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ca:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	0c1b      	lsrs	r3, r3, #16
 80047dc:	f003 0104 	and.w	r1, r3, #4
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e4:	f003 0210 	and.w	r2, r3, #16
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	430a      	orrs	r2, r1
 80047ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	69da      	ldr	r2, [r3, #28]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3708      	adds	r7, #8
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e01a      	b.n	8004860 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2202      	movs	r2, #2
 800482e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004840:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7fc f9e8 	bl	8000c18 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b088      	sub	sp, #32
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	603b      	str	r3, [r7, #0]
 8004874:	4613      	mov	r3, r2
 8004876:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004878:	f7fd fcfa 	bl	8002270 <HAL_GetTick>
 800487c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800487e:	88fb      	ldrh	r3, [r7, #6]
 8004880:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b01      	cmp	r3, #1
 800488c:	d001      	beq.n	8004892 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800488e:	2302      	movs	r3, #2
 8004890:	e12a      	b.n	8004ae8 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d002      	beq.n	800489e <HAL_SPI_Transmit+0x36>
 8004898:	88fb      	ldrh	r3, [r7, #6]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e122      	b.n	8004ae8 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d101      	bne.n	80048b0 <HAL_SPI_Transmit+0x48>
 80048ac:	2302      	movs	r3, #2
 80048ae:	e11b      	b.n	8004ae8 <HAL_SPI_Transmit+0x280>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2203      	movs	r2, #3
 80048bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	88fa      	ldrh	r2, [r7, #6]
 80048d0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	88fa      	ldrh	r2, [r7, #6]
 80048d6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048fe:	d10f      	bne.n	8004920 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800490e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800491e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800492a:	2b40      	cmp	r3, #64	@ 0x40
 800492c:	d007      	beq.n	800493e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800493c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004946:	d152      	bne.n	80049ee <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d002      	beq.n	8004956 <HAL_SPI_Transmit+0xee>
 8004950:	8b7b      	ldrh	r3, [r7, #26]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d145      	bne.n	80049e2 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800495a:	881a      	ldrh	r2, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004966:	1c9a      	adds	r2, r3, #2
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004970:	b29b      	uxth	r3, r3
 8004972:	3b01      	subs	r3, #1
 8004974:	b29a      	uxth	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800497a:	e032      	b.n	80049e2 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	2b02      	cmp	r3, #2
 8004988:	d112      	bne.n	80049b0 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800498e:	881a      	ldrh	r2, [r3, #0]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800499a:	1c9a      	adds	r2, r3, #2
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	3b01      	subs	r3, #1
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	86da      	strh	r2, [r3, #54]	@ 0x36
 80049ae:	e018      	b.n	80049e2 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049b0:	f7fd fc5e 	bl	8002270 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	683a      	ldr	r2, [r7, #0]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d803      	bhi.n	80049c8 <HAL_SPI_Transmit+0x160>
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c6:	d102      	bne.n	80049ce <HAL_SPI_Transmit+0x166>
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d109      	bne.n	80049e2 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e082      	b.n	8004ae8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1c7      	bne.n	800497c <HAL_SPI_Transmit+0x114>
 80049ec:	e053      	b.n	8004a96 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d002      	beq.n	80049fc <HAL_SPI_Transmit+0x194>
 80049f6:	8b7b      	ldrh	r3, [r7, #26]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d147      	bne.n	8004a8c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	330c      	adds	r3, #12
 8004a06:	7812      	ldrb	r2, [r2, #0]
 8004a08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a0e:	1c5a      	adds	r2, r3, #1
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004a22:	e033      	b.n	8004a8c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d113      	bne.n	8004a5a <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	330c      	adds	r3, #12
 8004a3c:	7812      	ldrb	r2, [r2, #0]
 8004a3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a44:	1c5a      	adds	r2, r3, #1
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004a58:	e018      	b.n	8004a8c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a5a:	f7fd fc09 	bl	8002270 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d803      	bhi.n	8004a72 <HAL_SPI_Transmit+0x20a>
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a70:	d102      	bne.n	8004a78 <HAL_SPI_Transmit+0x210>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d109      	bne.n	8004a8c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e02d      	b.n	8004ae8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1c6      	bne.n	8004a24 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a96:	69fa      	ldr	r2, [r7, #28]
 8004a98:	6839      	ldr	r1, [r7, #0]
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f000 fbe6 	bl	800526c <SPI_EndRxTxTransaction>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d002      	beq.n	8004aac <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2220      	movs	r2, #32
 8004aaa:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10a      	bne.n	8004aca <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	617b      	str	r3, [r7, #20]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	617b      	str	r3, [r7, #20]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	617b      	str	r3, [r7, #20]
 8004ac8:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e000      	b.n	8004ae8 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
  }
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3720      	adds	r7, #32
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b088      	sub	sp, #32
 8004af4:	af02      	add	r7, sp, #8
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	603b      	str	r3, [r7, #0]
 8004afc:	4613      	mov	r3, r2
 8004afe:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d001      	beq.n	8004b10 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004b0c:	2302      	movs	r3, #2
 8004b0e:	e104      	b.n	8004d1a <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b18:	d112      	bne.n	8004b40 <HAL_SPI_Receive+0x50>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10e      	bne.n	8004b40 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2204      	movs	r2, #4
 8004b26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004b2a:	88fa      	ldrh	r2, [r7, #6]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	9300      	str	r3, [sp, #0]
 8004b30:	4613      	mov	r3, r2
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	68b9      	ldr	r1, [r7, #8]
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f000 f8f3 	bl	8004d22 <HAL_SPI_TransmitReceive>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	e0ec      	b.n	8004d1a <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b40:	f7fd fb96 	bl	8002270 <HAL_GetTick>
 8004b44:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d002      	beq.n	8004b52 <HAL_SPI_Receive+0x62>
 8004b4c:	88fb      	ldrh	r3, [r7, #6]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e0e1      	b.n	8004d1a <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d101      	bne.n	8004b64 <HAL_SPI_Receive+0x74>
 8004b60:	2302      	movs	r3, #2
 8004b62:	e0da      	b.n	8004d1a <HAL_SPI_Receive+0x22a>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2204      	movs	r2, #4
 8004b70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	88fa      	ldrh	r2, [r7, #6]
 8004b84:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	88fa      	ldrh	r2, [r7, #6]
 8004b8a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bb2:	d10f      	bne.n	8004bd4 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bc2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004bd2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bde:	2b40      	cmp	r3, #64	@ 0x40
 8004be0:	d007      	beq.n	8004bf2 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004bf0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d170      	bne.n	8004cdc <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004bfa:	e035      	b.n	8004c68 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d115      	bne.n	8004c36 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f103 020c 	add.w	r2, r3, #12
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c16:	7812      	ldrb	r2, [r2, #0]
 8004c18:	b2d2      	uxtb	r2, r2
 8004c1a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c20:	1c5a      	adds	r2, r3, #1
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004c34:	e018      	b.n	8004c68 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c36:	f7fd fb1b 	bl	8002270 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d803      	bhi.n	8004c4e <HAL_SPI_Receive+0x15e>
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4c:	d102      	bne.n	8004c54 <HAL_SPI_Receive+0x164>
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d109      	bne.n	8004c68 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e058      	b.n	8004d1a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1c4      	bne.n	8004bfc <HAL_SPI_Receive+0x10c>
 8004c72:	e038      	b.n	8004ce6 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d113      	bne.n	8004caa <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68da      	ldr	r2, [r3, #12]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c8c:	b292      	uxth	r2, r2
 8004c8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c94:	1c9a      	adds	r2, r3, #2
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004ca8:	e018      	b.n	8004cdc <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004caa:	f7fd fae1 	bl	8002270 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d803      	bhi.n	8004cc2 <HAL_SPI_Receive+0x1d2>
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc0:	d102      	bne.n	8004cc8 <HAL_SPI_Receive+0x1d8>
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d109      	bne.n	8004cdc <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e01e      	b.n	8004d1a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1c6      	bne.n	8004c74 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	6839      	ldr	r1, [r7, #0]
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f000 fa58 	bl	80051a0 <SPI_EndRxTransaction>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d002      	beq.n	8004cfc <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d001      	beq.n	8004d18 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e000      	b.n	8004d1a <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004d18:	2300      	movs	r3, #0
  }
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3718      	adds	r7, #24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b08a      	sub	sp, #40	@ 0x28
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	60f8      	str	r0, [r7, #12]
 8004d2a:	60b9      	str	r1, [r7, #8]
 8004d2c:	607a      	str	r2, [r7, #4]
 8004d2e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d30:	2301      	movs	r3, #1
 8004d32:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d34:	f7fd fa9c 	bl	8002270 <HAL_GetTick>
 8004d38:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d40:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004d48:	887b      	ldrh	r3, [r7, #2]
 8004d4a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d4c:	7ffb      	ldrb	r3, [r7, #31]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d00c      	beq.n	8004d6c <HAL_SPI_TransmitReceive+0x4a>
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d58:	d106      	bne.n	8004d68 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d102      	bne.n	8004d68 <HAL_SPI_TransmitReceive+0x46>
 8004d62:	7ffb      	ldrb	r3, [r7, #31]
 8004d64:	2b04      	cmp	r3, #4
 8004d66:	d001      	beq.n	8004d6c <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004d68:	2302      	movs	r3, #2
 8004d6a:	e17f      	b.n	800506c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d005      	beq.n	8004d7e <HAL_SPI_TransmitReceive+0x5c>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d002      	beq.n	8004d7e <HAL_SPI_TransmitReceive+0x5c>
 8004d78:	887b      	ldrh	r3, [r7, #2]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e174      	b.n	800506c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d101      	bne.n	8004d90 <HAL_SPI_TransmitReceive+0x6e>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	e16d      	b.n	800506c <HAL_SPI_TransmitReceive+0x34a>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b04      	cmp	r3, #4
 8004da2:	d003      	beq.n	8004dac <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2205      	movs	r2, #5
 8004da8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	887a      	ldrh	r2, [r7, #2]
 8004dbc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	887a      	ldrh	r2, [r7, #2]
 8004dc2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	68ba      	ldr	r2, [r7, #8]
 8004dc8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	887a      	ldrh	r2, [r7, #2]
 8004dce:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	887a      	ldrh	r2, [r7, #2]
 8004dd4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dec:	2b40      	cmp	r3, #64	@ 0x40
 8004dee:	d007      	beq.n	8004e00 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004dfe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e08:	d17e      	bne.n	8004f08 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d002      	beq.n	8004e18 <HAL_SPI_TransmitReceive+0xf6>
 8004e12:	8afb      	ldrh	r3, [r7, #22]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d16c      	bne.n	8004ef2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e1c:	881a      	ldrh	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e28:	1c9a      	adds	r2, r3, #2
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	3b01      	subs	r3, #1
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e3c:	e059      	b.n	8004ef2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f003 0302 	and.w	r3, r3, #2
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d11b      	bne.n	8004e84 <HAL_SPI_TransmitReceive+0x162>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d016      	beq.n	8004e84 <HAL_SPI_TransmitReceive+0x162>
 8004e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d113      	bne.n	8004e84 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e60:	881a      	ldrh	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e6c:	1c9a      	adds	r2, r3, #2
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d119      	bne.n	8004ec6 <HAL_SPI_TransmitReceive+0x1a4>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d014      	beq.n	8004ec6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68da      	ldr	r2, [r3, #12]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea6:	b292      	uxth	r2, r2
 8004ea8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eae:	1c9a      	adds	r2, r3, #2
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ec6:	f7fd f9d3 	bl	8002270 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	6a3b      	ldr	r3, [r7, #32]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d80d      	bhi.n	8004ef2 <HAL_SPI_TransmitReceive+0x1d0>
 8004ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004edc:	d009      	beq.n	8004ef2 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e0bc      	b.n	800506c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1a0      	bne.n	8004e3e <HAL_SPI_TransmitReceive+0x11c>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d19b      	bne.n	8004e3e <HAL_SPI_TransmitReceive+0x11c>
 8004f06:	e082      	b.n	800500e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d002      	beq.n	8004f16 <HAL_SPI_TransmitReceive+0x1f4>
 8004f10:	8afb      	ldrh	r3, [r7, #22]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d171      	bne.n	8004ffa <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	330c      	adds	r3, #12
 8004f20:	7812      	ldrb	r2, [r2, #0]
 8004f22:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f28:	1c5a      	adds	r2, r3, #1
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	3b01      	subs	r3, #1
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f3c:	e05d      	b.n	8004ffa <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d11c      	bne.n	8004f86 <HAL_SPI_TransmitReceive+0x264>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d017      	beq.n	8004f86 <HAL_SPI_TransmitReceive+0x264>
 8004f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d114      	bne.n	8004f86 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	330c      	adds	r3, #12
 8004f66:	7812      	ldrb	r2, [r2, #0]
 8004f68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f6e:	1c5a      	adds	r2, r3, #1
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f82:	2300      	movs	r3, #0
 8004f84:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d119      	bne.n	8004fc8 <HAL_SPI_TransmitReceive+0x2a6>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d014      	beq.n	8004fc8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68da      	ldr	r2, [r3, #12]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa8:	b2d2      	uxtb	r2, r2
 8004faa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fb0:	1c5a      	adds	r2, r3, #1
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004fc8:	f7fd f952 	bl	8002270 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	6a3b      	ldr	r3, [r7, #32]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d803      	bhi.n	8004fe0 <HAL_SPI_TransmitReceive+0x2be>
 8004fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fde:	d102      	bne.n	8004fe6 <HAL_SPI_TransmitReceive+0x2c4>
 8004fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d109      	bne.n	8004ffa <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e038      	b.n	800506c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	2b00      	cmp	r3, #0
 8005002:	d19c      	bne.n	8004f3e <HAL_SPI_TransmitReceive+0x21c>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005008:	b29b      	uxth	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d197      	bne.n	8004f3e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800500e:	6a3a      	ldr	r2, [r7, #32]
 8005010:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f000 f92a 	bl	800526c <SPI_EndRxTxTransaction>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d008      	beq.n	8005030 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2220      	movs	r2, #32
 8005022:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e01d      	b.n	800506c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10a      	bne.n	800504e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005038:	2300      	movs	r3, #0
 800503a:	613b      	str	r3, [r7, #16]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	613b      	str	r3, [r7, #16]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	613b      	str	r3, [r7, #16]
 800504c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005062:	2b00      	cmp	r3, #0
 8005064:	d001      	beq.n	800506a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e000      	b.n	800506c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800506a:	2300      	movs	r3, #0
  }
}
 800506c:	4618      	mov	r0, r3
 800506e:	3728      	adds	r7, #40	@ 0x28
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005082:	b2db      	uxtb	r3, r3
}
 8005084:	4618      	mov	r0, r3
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b088      	sub	sp, #32
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	603b      	str	r3, [r7, #0]
 800509c:	4613      	mov	r3, r2
 800509e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80050a0:	f7fd f8e6 	bl	8002270 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050a8:	1a9b      	subs	r3, r3, r2
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	4413      	add	r3, r2
 80050ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80050b0:	f7fd f8de 	bl	8002270 <HAL_GetTick>
 80050b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80050b6:	4b39      	ldr	r3, [pc, #228]	@ (800519c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	015b      	lsls	r3, r3, #5
 80050bc:	0d1b      	lsrs	r3, r3, #20
 80050be:	69fa      	ldr	r2, [r7, #28]
 80050c0:	fb02 f303 	mul.w	r3, r2, r3
 80050c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050c6:	e054      	b.n	8005172 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ce:	d050      	beq.n	8005172 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050d0:	f7fd f8ce 	bl	8002270 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	69fa      	ldr	r2, [r7, #28]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d902      	bls.n	80050e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d13d      	bne.n	8005162 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80050f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050fe:	d111      	bne.n	8005124 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005108:	d004      	beq.n	8005114 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005112:	d107      	bne.n	8005124 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005122:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005128:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800512c:	d10f      	bne.n	800514e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800513c:	601a      	str	r2, [r3, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800514c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e017      	b.n	8005192 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005168:	2300      	movs	r3, #0
 800516a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	3b01      	subs	r3, #1
 8005170:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	689a      	ldr	r2, [r3, #8]
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	4013      	ands	r3, r2
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	429a      	cmp	r2, r3
 8005180:	bf0c      	ite	eq
 8005182:	2301      	moveq	r3, #1
 8005184:	2300      	movne	r3, #0
 8005186:	b2db      	uxtb	r3, r3
 8005188:	461a      	mov	r2, r3
 800518a:	79fb      	ldrb	r3, [r7, #7]
 800518c:	429a      	cmp	r2, r3
 800518e:	d19b      	bne.n	80050c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3720      	adds	r7, #32
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	20000078 	.word	0x20000078

080051a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af02      	add	r7, sp, #8
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051b4:	d111      	bne.n	80051da <SPI_EndRxTransaction+0x3a>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051be:	d004      	beq.n	80051ca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051c8:	d107      	bne.n	80051da <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051d8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051e2:	d12a      	bne.n	800523a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051ec:	d012      	beq.n	8005214 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	9300      	str	r3, [sp, #0]
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	2200      	movs	r2, #0
 80051f6:	2180      	movs	r1, #128	@ 0x80
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f7ff ff49 	bl	8005090 <SPI_WaitFlagStateUntilTimeout>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d02d      	beq.n	8005260 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005208:	f043 0220 	orr.w	r2, r3, #32
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e026      	b.n	8005262 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	2200      	movs	r2, #0
 800521c:	2101      	movs	r1, #1
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f7ff ff36 	bl	8005090 <SPI_WaitFlagStateUntilTimeout>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d01a      	beq.n	8005260 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800522e:	f043 0220 	orr.w	r2, r3, #32
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e013      	b.n	8005262 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	2200      	movs	r2, #0
 8005242:	2101      	movs	r1, #1
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f7ff ff23 	bl	8005090 <SPI_WaitFlagStateUntilTimeout>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d007      	beq.n	8005260 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005254:	f043 0220 	orr.w	r2, r3, #32
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e000      	b.n	8005262 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
	...

0800526c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b088      	sub	sp, #32
 8005270:	af02      	add	r7, sp, #8
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	2201      	movs	r2, #1
 8005280:	2102      	movs	r1, #2
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f7ff ff04 	bl	8005090 <SPI_WaitFlagStateUntilTimeout>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d007      	beq.n	800529e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005292:	f043 0220 	orr.w	r2, r3, #32
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e032      	b.n	8005304 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800529e:	4b1b      	ldr	r3, [pc, #108]	@ (800530c <SPI_EndRxTxTransaction+0xa0>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a1b      	ldr	r2, [pc, #108]	@ (8005310 <SPI_EndRxTxTransaction+0xa4>)
 80052a4:	fba2 2303 	umull	r2, r3, r2, r3
 80052a8:	0d5b      	lsrs	r3, r3, #21
 80052aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80052ae:	fb02 f303 	mul.w	r3, r2, r3
 80052b2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052bc:	d112      	bne.n	80052e4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	9300      	str	r3, [sp, #0]
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	2200      	movs	r2, #0
 80052c6:	2180      	movs	r1, #128	@ 0x80
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f7ff fee1 	bl	8005090 <SPI_WaitFlagStateUntilTimeout>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d016      	beq.n	8005302 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052d8:	f043 0220 	orr.w	r2, r3, #32
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e00f      	b.n	8005304 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00a      	beq.n	8005300 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	3b01      	subs	r3, #1
 80052ee:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052fa:	2b80      	cmp	r3, #128	@ 0x80
 80052fc:	d0f2      	beq.n	80052e4 <SPI_EndRxTxTransaction+0x78>
 80052fe:	e000      	b.n	8005302 <SPI_EndRxTxTransaction+0x96>
        break;
 8005300:	bf00      	nop
  }

  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3718      	adds	r7, #24
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	20000078 	.word	0x20000078
 8005310:	165e9f81 	.word	0x165e9f81

08005314 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d123      	bne.n	800536e <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800532e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	6851      	ldr	r1, [r2, #4]
 8005336:	683a      	ldr	r2, [r7, #0]
 8005338:	6892      	ldr	r2, [r2, #8]
 800533a:	4311      	orrs	r1, r2
 800533c:	683a      	ldr	r2, [r7, #0]
 800533e:	68d2      	ldr	r2, [r2, #12]
 8005340:	4311      	orrs	r1, r2
 8005342:	683a      	ldr	r2, [r7, #0]
 8005344:	6912      	ldr	r2, [r2, #16]
 8005346:	4311      	orrs	r1, r2
 8005348:	683a      	ldr	r2, [r7, #0]
 800534a:	6952      	ldr	r2, [r2, #20]
 800534c:	4311      	orrs	r1, r2
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	6992      	ldr	r2, [r2, #24]
 8005352:	4311      	orrs	r1, r2
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	69d2      	ldr	r2, [r2, #28]
 8005358:	4311      	orrs	r1, r2
 800535a:	683a      	ldr	r2, [r7, #0]
 800535c:	6a12      	ldr	r2, [r2, #32]
 800535e:	4311      	orrs	r1, r2
 8005360:	683a      	ldr	r2, [r7, #0]
 8005362:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005364:	430a      	orrs	r2, r1
 8005366:	431a      	orrs	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	601a      	str	r2, [r3, #0]
 800536c:	e028      	b.n	80053c0 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	69d9      	ldr	r1, [r3, #28]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	4319      	orrs	r1, r3
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005384:	430b      	orrs	r3, r1
 8005386:	431a      	orrs	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005394:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	6851      	ldr	r1, [r2, #4]
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	6892      	ldr	r2, [r2, #8]
 80053a0:	4311      	orrs	r1, r2
 80053a2:	683a      	ldr	r2, [r7, #0]
 80053a4:	68d2      	ldr	r2, [r2, #12]
 80053a6:	4311      	orrs	r1, r2
 80053a8:	683a      	ldr	r2, [r7, #0]
 80053aa:	6912      	ldr	r2, [r2, #16]
 80053ac:	4311      	orrs	r1, r2
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	6952      	ldr	r2, [r2, #20]
 80053b2:	4311      	orrs	r1, r2
 80053b4:	683a      	ldr	r2, [r7, #0]
 80053b6:	6992      	ldr	r2, [r2, #24]
 80053b8:	430a      	orrs	r2, r1
 80053ba:	431a      	orrs	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80053ce:	b480      	push	{r7}
 80053d0:	b085      	sub	sp, #20
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	60f8      	str	r0, [r7, #12]
 80053d6:	60b9      	str	r1, [r7, #8]
 80053d8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d128      	bne.n	8005432 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	1e59      	subs	r1, r3, #1
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	3b01      	subs	r3, #1
 80053f4:	011b      	lsls	r3, r3, #4
 80053f6:	4319      	orrs	r1, r3
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	3b01      	subs	r3, #1
 80053fe:	021b      	lsls	r3, r3, #8
 8005400:	4319      	orrs	r1, r3
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	3b01      	subs	r3, #1
 8005408:	031b      	lsls	r3, r3, #12
 800540a:	4319      	orrs	r1, r3
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	3b01      	subs	r3, #1
 8005412:	041b      	lsls	r3, r3, #16
 8005414:	4319      	orrs	r1, r3
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	3b01      	subs	r3, #1
 800541c:	051b      	lsls	r3, r3, #20
 800541e:	4319      	orrs	r1, r3
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	3b01      	subs	r3, #1
 8005426:	061b      	lsls	r3, r3, #24
 8005428:	430b      	orrs	r3, r1
 800542a:	431a      	orrs	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	609a      	str	r2, [r3, #8]
 8005430:	e02f      	b.n	8005492 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800543a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	68d2      	ldr	r2, [r2, #12]
 8005442:	3a01      	subs	r2, #1
 8005444:	0311      	lsls	r1, r2, #12
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	6952      	ldr	r2, [r2, #20]
 800544a:	3a01      	subs	r2, #1
 800544c:	0512      	lsls	r2, r2, #20
 800544e:	430a      	orrs	r2, r1
 8005450:	431a      	orrs	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	1e59      	subs	r1, r3, #1
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	3b01      	subs	r3, #1
 800546a:	011b      	lsls	r3, r3, #4
 800546c:	4319      	orrs	r1, r3
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	3b01      	subs	r3, #1
 8005474:	021b      	lsls	r3, r3, #8
 8005476:	4319      	orrs	r1, r3
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	3b01      	subs	r3, #1
 800547e:	041b      	lsls	r3, r3, #16
 8005480:	4319      	orrs	r1, r3
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	3b01      	subs	r3, #1
 8005488:	061b      	lsls	r3, r3, #24
 800548a:	430b      	orrs	r3, r1
 800548c:	431a      	orrs	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80054ac:	2300      	movs	r3, #0
 80054ae:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	0d9b      	lsrs	r3, r3, #22
 80054b6:	059b      	lsls	r3, r3, #22
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	6811      	ldr	r1, [r2, #0]
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	6852      	ldr	r2, [r2, #4]
 80054c0:	4311      	orrs	r1, r2
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	6892      	ldr	r2, [r2, #8]
 80054c6:	3a01      	subs	r2, #1
 80054c8:	0152      	lsls	r2, r2, #5
 80054ca:	4311      	orrs	r1, r2
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	68d2      	ldr	r2, [r2, #12]
 80054d0:	0252      	lsls	r2, r2, #9
 80054d2:	430a      	orrs	r2, r1
 80054d4:	431a      	orrs	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 80054da:	f7fc fec9 	bl	8002270 <HAL_GetTick>
 80054de:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80054e0:	e010      	b.n	8005504 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e8:	d00c      	beq.n	8005504 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d007      	beq.n	8005500 <FMC_SDRAM_SendCommand+0x60>
 80054f0:	f7fc febe 	bl	8002270 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d201      	bcs.n	8005504 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e006      	b.n	8005512 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	f003 0320 	and.w	r3, r3, #32
 800550c:	2b20      	cmp	r3, #32
 800550e:	d0e8      	beq.n	80054e2 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3718      	adds	r7, #24
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800551a:	b480      	push	{r7}
 800551c:	b083      	sub	sp, #12
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
 8005522:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800552c:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 8005530:	683a      	ldr	r2, [r7, #0]
 8005532:	0052      	lsls	r2, r2, #1
 8005534:	431a      	orrs	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <siprintf>:
 8005548:	b40e      	push	{r1, r2, r3}
 800554a:	b500      	push	{lr}
 800554c:	b09c      	sub	sp, #112	@ 0x70
 800554e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005550:	9002      	str	r0, [sp, #8]
 8005552:	9006      	str	r0, [sp, #24]
 8005554:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005558:	4809      	ldr	r0, [pc, #36]	@ (8005580 <siprintf+0x38>)
 800555a:	9107      	str	r1, [sp, #28]
 800555c:	9104      	str	r1, [sp, #16]
 800555e:	4909      	ldr	r1, [pc, #36]	@ (8005584 <siprintf+0x3c>)
 8005560:	f853 2b04 	ldr.w	r2, [r3], #4
 8005564:	9105      	str	r1, [sp, #20]
 8005566:	6800      	ldr	r0, [r0, #0]
 8005568:	9301      	str	r3, [sp, #4]
 800556a:	a902      	add	r1, sp, #8
 800556c:	f000 f994 	bl	8005898 <_svfiprintf_r>
 8005570:	9b02      	ldr	r3, [sp, #8]
 8005572:	2200      	movs	r2, #0
 8005574:	701a      	strb	r2, [r3, #0]
 8005576:	b01c      	add	sp, #112	@ 0x70
 8005578:	f85d eb04 	ldr.w	lr, [sp], #4
 800557c:	b003      	add	sp, #12
 800557e:	4770      	bx	lr
 8005580:	200000cc 	.word	0x200000cc
 8005584:	ffff0208 	.word	0xffff0208

08005588 <memset>:
 8005588:	4402      	add	r2, r0
 800558a:	4603      	mov	r3, r0
 800558c:	4293      	cmp	r3, r2
 800558e:	d100      	bne.n	8005592 <memset+0xa>
 8005590:	4770      	bx	lr
 8005592:	f803 1b01 	strb.w	r1, [r3], #1
 8005596:	e7f9      	b.n	800558c <memset+0x4>

08005598 <__errno>:
 8005598:	4b01      	ldr	r3, [pc, #4]	@ (80055a0 <__errno+0x8>)
 800559a:	6818      	ldr	r0, [r3, #0]
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	200000cc 	.word	0x200000cc

080055a4 <__libc_init_array>:
 80055a4:	b570      	push	{r4, r5, r6, lr}
 80055a6:	4d0d      	ldr	r5, [pc, #52]	@ (80055dc <__libc_init_array+0x38>)
 80055a8:	4c0d      	ldr	r4, [pc, #52]	@ (80055e0 <__libc_init_array+0x3c>)
 80055aa:	1b64      	subs	r4, r4, r5
 80055ac:	10a4      	asrs	r4, r4, #2
 80055ae:	2600      	movs	r6, #0
 80055b0:	42a6      	cmp	r6, r4
 80055b2:	d109      	bne.n	80055c8 <__libc_init_array+0x24>
 80055b4:	4d0b      	ldr	r5, [pc, #44]	@ (80055e4 <__libc_init_array+0x40>)
 80055b6:	4c0c      	ldr	r4, [pc, #48]	@ (80055e8 <__libc_init_array+0x44>)
 80055b8:	f000 fc66 	bl	8005e88 <_init>
 80055bc:	1b64      	subs	r4, r4, r5
 80055be:	10a4      	asrs	r4, r4, #2
 80055c0:	2600      	movs	r6, #0
 80055c2:	42a6      	cmp	r6, r4
 80055c4:	d105      	bne.n	80055d2 <__libc_init_array+0x2e>
 80055c6:	bd70      	pop	{r4, r5, r6, pc}
 80055c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80055cc:	4798      	blx	r3
 80055ce:	3601      	adds	r6, #1
 80055d0:	e7ee      	b.n	80055b0 <__libc_init_array+0xc>
 80055d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80055d6:	4798      	blx	r3
 80055d8:	3601      	adds	r6, #1
 80055da:	e7f2      	b.n	80055c2 <__libc_init_array+0x1e>
 80055dc:	080079d4 	.word	0x080079d4
 80055e0:	080079d4 	.word	0x080079d4
 80055e4:	080079d4 	.word	0x080079d4
 80055e8:	080079d8 	.word	0x080079d8

080055ec <__retarget_lock_acquire_recursive>:
 80055ec:	4770      	bx	lr

080055ee <__retarget_lock_release_recursive>:
 80055ee:	4770      	bx	lr

080055f0 <_free_r>:
 80055f0:	b538      	push	{r3, r4, r5, lr}
 80055f2:	4605      	mov	r5, r0
 80055f4:	2900      	cmp	r1, #0
 80055f6:	d041      	beq.n	800567c <_free_r+0x8c>
 80055f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055fc:	1f0c      	subs	r4, r1, #4
 80055fe:	2b00      	cmp	r3, #0
 8005600:	bfb8      	it	lt
 8005602:	18e4      	addlt	r4, r4, r3
 8005604:	f000 f8e0 	bl	80057c8 <__malloc_lock>
 8005608:	4a1d      	ldr	r2, [pc, #116]	@ (8005680 <_free_r+0x90>)
 800560a:	6813      	ldr	r3, [r2, #0]
 800560c:	b933      	cbnz	r3, 800561c <_free_r+0x2c>
 800560e:	6063      	str	r3, [r4, #4]
 8005610:	6014      	str	r4, [r2, #0]
 8005612:	4628      	mov	r0, r5
 8005614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005618:	f000 b8dc 	b.w	80057d4 <__malloc_unlock>
 800561c:	42a3      	cmp	r3, r4
 800561e:	d908      	bls.n	8005632 <_free_r+0x42>
 8005620:	6820      	ldr	r0, [r4, #0]
 8005622:	1821      	adds	r1, r4, r0
 8005624:	428b      	cmp	r3, r1
 8005626:	bf01      	itttt	eq
 8005628:	6819      	ldreq	r1, [r3, #0]
 800562a:	685b      	ldreq	r3, [r3, #4]
 800562c:	1809      	addeq	r1, r1, r0
 800562e:	6021      	streq	r1, [r4, #0]
 8005630:	e7ed      	b.n	800560e <_free_r+0x1e>
 8005632:	461a      	mov	r2, r3
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	b10b      	cbz	r3, 800563c <_free_r+0x4c>
 8005638:	42a3      	cmp	r3, r4
 800563a:	d9fa      	bls.n	8005632 <_free_r+0x42>
 800563c:	6811      	ldr	r1, [r2, #0]
 800563e:	1850      	adds	r0, r2, r1
 8005640:	42a0      	cmp	r0, r4
 8005642:	d10b      	bne.n	800565c <_free_r+0x6c>
 8005644:	6820      	ldr	r0, [r4, #0]
 8005646:	4401      	add	r1, r0
 8005648:	1850      	adds	r0, r2, r1
 800564a:	4283      	cmp	r3, r0
 800564c:	6011      	str	r1, [r2, #0]
 800564e:	d1e0      	bne.n	8005612 <_free_r+0x22>
 8005650:	6818      	ldr	r0, [r3, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	6053      	str	r3, [r2, #4]
 8005656:	4408      	add	r0, r1
 8005658:	6010      	str	r0, [r2, #0]
 800565a:	e7da      	b.n	8005612 <_free_r+0x22>
 800565c:	d902      	bls.n	8005664 <_free_r+0x74>
 800565e:	230c      	movs	r3, #12
 8005660:	602b      	str	r3, [r5, #0]
 8005662:	e7d6      	b.n	8005612 <_free_r+0x22>
 8005664:	6820      	ldr	r0, [r4, #0]
 8005666:	1821      	adds	r1, r4, r0
 8005668:	428b      	cmp	r3, r1
 800566a:	bf04      	itt	eq
 800566c:	6819      	ldreq	r1, [r3, #0]
 800566e:	685b      	ldreq	r3, [r3, #4]
 8005670:	6063      	str	r3, [r4, #4]
 8005672:	bf04      	itt	eq
 8005674:	1809      	addeq	r1, r1, r0
 8005676:	6021      	streq	r1, [r4, #0]
 8005678:	6054      	str	r4, [r2, #4]
 800567a:	e7ca      	b.n	8005612 <_free_r+0x22>
 800567c:	bd38      	pop	{r3, r4, r5, pc}
 800567e:	bf00      	nop
 8005680:	200004e0 	.word	0x200004e0

08005684 <sbrk_aligned>:
 8005684:	b570      	push	{r4, r5, r6, lr}
 8005686:	4e0f      	ldr	r6, [pc, #60]	@ (80056c4 <sbrk_aligned+0x40>)
 8005688:	460c      	mov	r4, r1
 800568a:	6831      	ldr	r1, [r6, #0]
 800568c:	4605      	mov	r5, r0
 800568e:	b911      	cbnz	r1, 8005696 <sbrk_aligned+0x12>
 8005690:	f000 fba6 	bl	8005de0 <_sbrk_r>
 8005694:	6030      	str	r0, [r6, #0]
 8005696:	4621      	mov	r1, r4
 8005698:	4628      	mov	r0, r5
 800569a:	f000 fba1 	bl	8005de0 <_sbrk_r>
 800569e:	1c43      	adds	r3, r0, #1
 80056a0:	d103      	bne.n	80056aa <sbrk_aligned+0x26>
 80056a2:	f04f 34ff 	mov.w	r4, #4294967295
 80056a6:	4620      	mov	r0, r4
 80056a8:	bd70      	pop	{r4, r5, r6, pc}
 80056aa:	1cc4      	adds	r4, r0, #3
 80056ac:	f024 0403 	bic.w	r4, r4, #3
 80056b0:	42a0      	cmp	r0, r4
 80056b2:	d0f8      	beq.n	80056a6 <sbrk_aligned+0x22>
 80056b4:	1a21      	subs	r1, r4, r0
 80056b6:	4628      	mov	r0, r5
 80056b8:	f000 fb92 	bl	8005de0 <_sbrk_r>
 80056bc:	3001      	adds	r0, #1
 80056be:	d1f2      	bne.n	80056a6 <sbrk_aligned+0x22>
 80056c0:	e7ef      	b.n	80056a2 <sbrk_aligned+0x1e>
 80056c2:	bf00      	nop
 80056c4:	200004dc 	.word	0x200004dc

080056c8 <_malloc_r>:
 80056c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056cc:	1ccd      	adds	r5, r1, #3
 80056ce:	f025 0503 	bic.w	r5, r5, #3
 80056d2:	3508      	adds	r5, #8
 80056d4:	2d0c      	cmp	r5, #12
 80056d6:	bf38      	it	cc
 80056d8:	250c      	movcc	r5, #12
 80056da:	2d00      	cmp	r5, #0
 80056dc:	4606      	mov	r6, r0
 80056de:	db01      	blt.n	80056e4 <_malloc_r+0x1c>
 80056e0:	42a9      	cmp	r1, r5
 80056e2:	d904      	bls.n	80056ee <_malloc_r+0x26>
 80056e4:	230c      	movs	r3, #12
 80056e6:	6033      	str	r3, [r6, #0]
 80056e8:	2000      	movs	r0, #0
 80056ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80057c4 <_malloc_r+0xfc>
 80056f2:	f000 f869 	bl	80057c8 <__malloc_lock>
 80056f6:	f8d8 3000 	ldr.w	r3, [r8]
 80056fa:	461c      	mov	r4, r3
 80056fc:	bb44      	cbnz	r4, 8005750 <_malloc_r+0x88>
 80056fe:	4629      	mov	r1, r5
 8005700:	4630      	mov	r0, r6
 8005702:	f7ff ffbf 	bl	8005684 <sbrk_aligned>
 8005706:	1c43      	adds	r3, r0, #1
 8005708:	4604      	mov	r4, r0
 800570a:	d158      	bne.n	80057be <_malloc_r+0xf6>
 800570c:	f8d8 4000 	ldr.w	r4, [r8]
 8005710:	4627      	mov	r7, r4
 8005712:	2f00      	cmp	r7, #0
 8005714:	d143      	bne.n	800579e <_malloc_r+0xd6>
 8005716:	2c00      	cmp	r4, #0
 8005718:	d04b      	beq.n	80057b2 <_malloc_r+0xea>
 800571a:	6823      	ldr	r3, [r4, #0]
 800571c:	4639      	mov	r1, r7
 800571e:	4630      	mov	r0, r6
 8005720:	eb04 0903 	add.w	r9, r4, r3
 8005724:	f000 fb5c 	bl	8005de0 <_sbrk_r>
 8005728:	4581      	cmp	r9, r0
 800572a:	d142      	bne.n	80057b2 <_malloc_r+0xea>
 800572c:	6821      	ldr	r1, [r4, #0]
 800572e:	1a6d      	subs	r5, r5, r1
 8005730:	4629      	mov	r1, r5
 8005732:	4630      	mov	r0, r6
 8005734:	f7ff ffa6 	bl	8005684 <sbrk_aligned>
 8005738:	3001      	adds	r0, #1
 800573a:	d03a      	beq.n	80057b2 <_malloc_r+0xea>
 800573c:	6823      	ldr	r3, [r4, #0]
 800573e:	442b      	add	r3, r5
 8005740:	6023      	str	r3, [r4, #0]
 8005742:	f8d8 3000 	ldr.w	r3, [r8]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	bb62      	cbnz	r2, 80057a4 <_malloc_r+0xdc>
 800574a:	f8c8 7000 	str.w	r7, [r8]
 800574e:	e00f      	b.n	8005770 <_malloc_r+0xa8>
 8005750:	6822      	ldr	r2, [r4, #0]
 8005752:	1b52      	subs	r2, r2, r5
 8005754:	d420      	bmi.n	8005798 <_malloc_r+0xd0>
 8005756:	2a0b      	cmp	r2, #11
 8005758:	d917      	bls.n	800578a <_malloc_r+0xc2>
 800575a:	1961      	adds	r1, r4, r5
 800575c:	42a3      	cmp	r3, r4
 800575e:	6025      	str	r5, [r4, #0]
 8005760:	bf18      	it	ne
 8005762:	6059      	strne	r1, [r3, #4]
 8005764:	6863      	ldr	r3, [r4, #4]
 8005766:	bf08      	it	eq
 8005768:	f8c8 1000 	streq.w	r1, [r8]
 800576c:	5162      	str	r2, [r4, r5]
 800576e:	604b      	str	r3, [r1, #4]
 8005770:	4630      	mov	r0, r6
 8005772:	f000 f82f 	bl	80057d4 <__malloc_unlock>
 8005776:	f104 000b 	add.w	r0, r4, #11
 800577a:	1d23      	adds	r3, r4, #4
 800577c:	f020 0007 	bic.w	r0, r0, #7
 8005780:	1ac2      	subs	r2, r0, r3
 8005782:	bf1c      	itt	ne
 8005784:	1a1b      	subne	r3, r3, r0
 8005786:	50a3      	strne	r3, [r4, r2]
 8005788:	e7af      	b.n	80056ea <_malloc_r+0x22>
 800578a:	6862      	ldr	r2, [r4, #4]
 800578c:	42a3      	cmp	r3, r4
 800578e:	bf0c      	ite	eq
 8005790:	f8c8 2000 	streq.w	r2, [r8]
 8005794:	605a      	strne	r2, [r3, #4]
 8005796:	e7eb      	b.n	8005770 <_malloc_r+0xa8>
 8005798:	4623      	mov	r3, r4
 800579a:	6864      	ldr	r4, [r4, #4]
 800579c:	e7ae      	b.n	80056fc <_malloc_r+0x34>
 800579e:	463c      	mov	r4, r7
 80057a0:	687f      	ldr	r7, [r7, #4]
 80057a2:	e7b6      	b.n	8005712 <_malloc_r+0x4a>
 80057a4:	461a      	mov	r2, r3
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	42a3      	cmp	r3, r4
 80057aa:	d1fb      	bne.n	80057a4 <_malloc_r+0xdc>
 80057ac:	2300      	movs	r3, #0
 80057ae:	6053      	str	r3, [r2, #4]
 80057b0:	e7de      	b.n	8005770 <_malloc_r+0xa8>
 80057b2:	230c      	movs	r3, #12
 80057b4:	6033      	str	r3, [r6, #0]
 80057b6:	4630      	mov	r0, r6
 80057b8:	f000 f80c 	bl	80057d4 <__malloc_unlock>
 80057bc:	e794      	b.n	80056e8 <_malloc_r+0x20>
 80057be:	6005      	str	r5, [r0, #0]
 80057c0:	e7d6      	b.n	8005770 <_malloc_r+0xa8>
 80057c2:	bf00      	nop
 80057c4:	200004e0 	.word	0x200004e0

080057c8 <__malloc_lock>:
 80057c8:	4801      	ldr	r0, [pc, #4]	@ (80057d0 <__malloc_lock+0x8>)
 80057ca:	f7ff bf0f 	b.w	80055ec <__retarget_lock_acquire_recursive>
 80057ce:	bf00      	nop
 80057d0:	200004d8 	.word	0x200004d8

080057d4 <__malloc_unlock>:
 80057d4:	4801      	ldr	r0, [pc, #4]	@ (80057dc <__malloc_unlock+0x8>)
 80057d6:	f7ff bf0a 	b.w	80055ee <__retarget_lock_release_recursive>
 80057da:	bf00      	nop
 80057dc:	200004d8 	.word	0x200004d8

080057e0 <__ssputs_r>:
 80057e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057e4:	688e      	ldr	r6, [r1, #8]
 80057e6:	461f      	mov	r7, r3
 80057e8:	42be      	cmp	r6, r7
 80057ea:	680b      	ldr	r3, [r1, #0]
 80057ec:	4682      	mov	sl, r0
 80057ee:	460c      	mov	r4, r1
 80057f0:	4690      	mov	r8, r2
 80057f2:	d82d      	bhi.n	8005850 <__ssputs_r+0x70>
 80057f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80057f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80057fc:	d026      	beq.n	800584c <__ssputs_r+0x6c>
 80057fe:	6965      	ldr	r5, [r4, #20]
 8005800:	6909      	ldr	r1, [r1, #16]
 8005802:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005806:	eba3 0901 	sub.w	r9, r3, r1
 800580a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800580e:	1c7b      	adds	r3, r7, #1
 8005810:	444b      	add	r3, r9
 8005812:	106d      	asrs	r5, r5, #1
 8005814:	429d      	cmp	r5, r3
 8005816:	bf38      	it	cc
 8005818:	461d      	movcc	r5, r3
 800581a:	0553      	lsls	r3, r2, #21
 800581c:	d527      	bpl.n	800586e <__ssputs_r+0x8e>
 800581e:	4629      	mov	r1, r5
 8005820:	f7ff ff52 	bl	80056c8 <_malloc_r>
 8005824:	4606      	mov	r6, r0
 8005826:	b360      	cbz	r0, 8005882 <__ssputs_r+0xa2>
 8005828:	6921      	ldr	r1, [r4, #16]
 800582a:	464a      	mov	r2, r9
 800582c:	f000 fae8 	bl	8005e00 <memcpy>
 8005830:	89a3      	ldrh	r3, [r4, #12]
 8005832:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005836:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800583a:	81a3      	strh	r3, [r4, #12]
 800583c:	6126      	str	r6, [r4, #16]
 800583e:	6165      	str	r5, [r4, #20]
 8005840:	444e      	add	r6, r9
 8005842:	eba5 0509 	sub.w	r5, r5, r9
 8005846:	6026      	str	r6, [r4, #0]
 8005848:	60a5      	str	r5, [r4, #8]
 800584a:	463e      	mov	r6, r7
 800584c:	42be      	cmp	r6, r7
 800584e:	d900      	bls.n	8005852 <__ssputs_r+0x72>
 8005850:	463e      	mov	r6, r7
 8005852:	6820      	ldr	r0, [r4, #0]
 8005854:	4632      	mov	r2, r6
 8005856:	4641      	mov	r1, r8
 8005858:	f000 faa8 	bl	8005dac <memmove>
 800585c:	68a3      	ldr	r3, [r4, #8]
 800585e:	1b9b      	subs	r3, r3, r6
 8005860:	60a3      	str	r3, [r4, #8]
 8005862:	6823      	ldr	r3, [r4, #0]
 8005864:	4433      	add	r3, r6
 8005866:	6023      	str	r3, [r4, #0]
 8005868:	2000      	movs	r0, #0
 800586a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800586e:	462a      	mov	r2, r5
 8005870:	f000 fad4 	bl	8005e1c <_realloc_r>
 8005874:	4606      	mov	r6, r0
 8005876:	2800      	cmp	r0, #0
 8005878:	d1e0      	bne.n	800583c <__ssputs_r+0x5c>
 800587a:	6921      	ldr	r1, [r4, #16]
 800587c:	4650      	mov	r0, sl
 800587e:	f7ff feb7 	bl	80055f0 <_free_r>
 8005882:	230c      	movs	r3, #12
 8005884:	f8ca 3000 	str.w	r3, [sl]
 8005888:	89a3      	ldrh	r3, [r4, #12]
 800588a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800588e:	81a3      	strh	r3, [r4, #12]
 8005890:	f04f 30ff 	mov.w	r0, #4294967295
 8005894:	e7e9      	b.n	800586a <__ssputs_r+0x8a>
	...

08005898 <_svfiprintf_r>:
 8005898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800589c:	4698      	mov	r8, r3
 800589e:	898b      	ldrh	r3, [r1, #12]
 80058a0:	061b      	lsls	r3, r3, #24
 80058a2:	b09d      	sub	sp, #116	@ 0x74
 80058a4:	4607      	mov	r7, r0
 80058a6:	460d      	mov	r5, r1
 80058a8:	4614      	mov	r4, r2
 80058aa:	d510      	bpl.n	80058ce <_svfiprintf_r+0x36>
 80058ac:	690b      	ldr	r3, [r1, #16]
 80058ae:	b973      	cbnz	r3, 80058ce <_svfiprintf_r+0x36>
 80058b0:	2140      	movs	r1, #64	@ 0x40
 80058b2:	f7ff ff09 	bl	80056c8 <_malloc_r>
 80058b6:	6028      	str	r0, [r5, #0]
 80058b8:	6128      	str	r0, [r5, #16]
 80058ba:	b930      	cbnz	r0, 80058ca <_svfiprintf_r+0x32>
 80058bc:	230c      	movs	r3, #12
 80058be:	603b      	str	r3, [r7, #0]
 80058c0:	f04f 30ff 	mov.w	r0, #4294967295
 80058c4:	b01d      	add	sp, #116	@ 0x74
 80058c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ca:	2340      	movs	r3, #64	@ 0x40
 80058cc:	616b      	str	r3, [r5, #20]
 80058ce:	2300      	movs	r3, #0
 80058d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80058d2:	2320      	movs	r3, #32
 80058d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80058d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80058dc:	2330      	movs	r3, #48	@ 0x30
 80058de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005a7c <_svfiprintf_r+0x1e4>
 80058e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80058e6:	f04f 0901 	mov.w	r9, #1
 80058ea:	4623      	mov	r3, r4
 80058ec:	469a      	mov	sl, r3
 80058ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058f2:	b10a      	cbz	r2, 80058f8 <_svfiprintf_r+0x60>
 80058f4:	2a25      	cmp	r2, #37	@ 0x25
 80058f6:	d1f9      	bne.n	80058ec <_svfiprintf_r+0x54>
 80058f8:	ebba 0b04 	subs.w	fp, sl, r4
 80058fc:	d00b      	beq.n	8005916 <_svfiprintf_r+0x7e>
 80058fe:	465b      	mov	r3, fp
 8005900:	4622      	mov	r2, r4
 8005902:	4629      	mov	r1, r5
 8005904:	4638      	mov	r0, r7
 8005906:	f7ff ff6b 	bl	80057e0 <__ssputs_r>
 800590a:	3001      	adds	r0, #1
 800590c:	f000 80a7 	beq.w	8005a5e <_svfiprintf_r+0x1c6>
 8005910:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005912:	445a      	add	r2, fp
 8005914:	9209      	str	r2, [sp, #36]	@ 0x24
 8005916:	f89a 3000 	ldrb.w	r3, [sl]
 800591a:	2b00      	cmp	r3, #0
 800591c:	f000 809f 	beq.w	8005a5e <_svfiprintf_r+0x1c6>
 8005920:	2300      	movs	r3, #0
 8005922:	f04f 32ff 	mov.w	r2, #4294967295
 8005926:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800592a:	f10a 0a01 	add.w	sl, sl, #1
 800592e:	9304      	str	r3, [sp, #16]
 8005930:	9307      	str	r3, [sp, #28]
 8005932:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005936:	931a      	str	r3, [sp, #104]	@ 0x68
 8005938:	4654      	mov	r4, sl
 800593a:	2205      	movs	r2, #5
 800593c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005940:	484e      	ldr	r0, [pc, #312]	@ (8005a7c <_svfiprintf_r+0x1e4>)
 8005942:	f7fa fc55 	bl	80001f0 <memchr>
 8005946:	9a04      	ldr	r2, [sp, #16]
 8005948:	b9d8      	cbnz	r0, 8005982 <_svfiprintf_r+0xea>
 800594a:	06d0      	lsls	r0, r2, #27
 800594c:	bf44      	itt	mi
 800594e:	2320      	movmi	r3, #32
 8005950:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005954:	0711      	lsls	r1, r2, #28
 8005956:	bf44      	itt	mi
 8005958:	232b      	movmi	r3, #43	@ 0x2b
 800595a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800595e:	f89a 3000 	ldrb.w	r3, [sl]
 8005962:	2b2a      	cmp	r3, #42	@ 0x2a
 8005964:	d015      	beq.n	8005992 <_svfiprintf_r+0xfa>
 8005966:	9a07      	ldr	r2, [sp, #28]
 8005968:	4654      	mov	r4, sl
 800596a:	2000      	movs	r0, #0
 800596c:	f04f 0c0a 	mov.w	ip, #10
 8005970:	4621      	mov	r1, r4
 8005972:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005976:	3b30      	subs	r3, #48	@ 0x30
 8005978:	2b09      	cmp	r3, #9
 800597a:	d94b      	bls.n	8005a14 <_svfiprintf_r+0x17c>
 800597c:	b1b0      	cbz	r0, 80059ac <_svfiprintf_r+0x114>
 800597e:	9207      	str	r2, [sp, #28]
 8005980:	e014      	b.n	80059ac <_svfiprintf_r+0x114>
 8005982:	eba0 0308 	sub.w	r3, r0, r8
 8005986:	fa09 f303 	lsl.w	r3, r9, r3
 800598a:	4313      	orrs	r3, r2
 800598c:	9304      	str	r3, [sp, #16]
 800598e:	46a2      	mov	sl, r4
 8005990:	e7d2      	b.n	8005938 <_svfiprintf_r+0xa0>
 8005992:	9b03      	ldr	r3, [sp, #12]
 8005994:	1d19      	adds	r1, r3, #4
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	9103      	str	r1, [sp, #12]
 800599a:	2b00      	cmp	r3, #0
 800599c:	bfbb      	ittet	lt
 800599e:	425b      	neglt	r3, r3
 80059a0:	f042 0202 	orrlt.w	r2, r2, #2
 80059a4:	9307      	strge	r3, [sp, #28]
 80059a6:	9307      	strlt	r3, [sp, #28]
 80059a8:	bfb8      	it	lt
 80059aa:	9204      	strlt	r2, [sp, #16]
 80059ac:	7823      	ldrb	r3, [r4, #0]
 80059ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80059b0:	d10a      	bne.n	80059c8 <_svfiprintf_r+0x130>
 80059b2:	7863      	ldrb	r3, [r4, #1]
 80059b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80059b6:	d132      	bne.n	8005a1e <_svfiprintf_r+0x186>
 80059b8:	9b03      	ldr	r3, [sp, #12]
 80059ba:	1d1a      	adds	r2, r3, #4
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	9203      	str	r2, [sp, #12]
 80059c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80059c4:	3402      	adds	r4, #2
 80059c6:	9305      	str	r3, [sp, #20]
 80059c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005a8c <_svfiprintf_r+0x1f4>
 80059cc:	7821      	ldrb	r1, [r4, #0]
 80059ce:	2203      	movs	r2, #3
 80059d0:	4650      	mov	r0, sl
 80059d2:	f7fa fc0d 	bl	80001f0 <memchr>
 80059d6:	b138      	cbz	r0, 80059e8 <_svfiprintf_r+0x150>
 80059d8:	9b04      	ldr	r3, [sp, #16]
 80059da:	eba0 000a 	sub.w	r0, r0, sl
 80059de:	2240      	movs	r2, #64	@ 0x40
 80059e0:	4082      	lsls	r2, r0
 80059e2:	4313      	orrs	r3, r2
 80059e4:	3401      	adds	r4, #1
 80059e6:	9304      	str	r3, [sp, #16]
 80059e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059ec:	4824      	ldr	r0, [pc, #144]	@ (8005a80 <_svfiprintf_r+0x1e8>)
 80059ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80059f2:	2206      	movs	r2, #6
 80059f4:	f7fa fbfc 	bl	80001f0 <memchr>
 80059f8:	2800      	cmp	r0, #0
 80059fa:	d036      	beq.n	8005a6a <_svfiprintf_r+0x1d2>
 80059fc:	4b21      	ldr	r3, [pc, #132]	@ (8005a84 <_svfiprintf_r+0x1ec>)
 80059fe:	bb1b      	cbnz	r3, 8005a48 <_svfiprintf_r+0x1b0>
 8005a00:	9b03      	ldr	r3, [sp, #12]
 8005a02:	3307      	adds	r3, #7
 8005a04:	f023 0307 	bic.w	r3, r3, #7
 8005a08:	3308      	adds	r3, #8
 8005a0a:	9303      	str	r3, [sp, #12]
 8005a0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a0e:	4433      	add	r3, r6
 8005a10:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a12:	e76a      	b.n	80058ea <_svfiprintf_r+0x52>
 8005a14:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a18:	460c      	mov	r4, r1
 8005a1a:	2001      	movs	r0, #1
 8005a1c:	e7a8      	b.n	8005970 <_svfiprintf_r+0xd8>
 8005a1e:	2300      	movs	r3, #0
 8005a20:	3401      	adds	r4, #1
 8005a22:	9305      	str	r3, [sp, #20]
 8005a24:	4619      	mov	r1, r3
 8005a26:	f04f 0c0a 	mov.w	ip, #10
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a30:	3a30      	subs	r2, #48	@ 0x30
 8005a32:	2a09      	cmp	r2, #9
 8005a34:	d903      	bls.n	8005a3e <_svfiprintf_r+0x1a6>
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d0c6      	beq.n	80059c8 <_svfiprintf_r+0x130>
 8005a3a:	9105      	str	r1, [sp, #20]
 8005a3c:	e7c4      	b.n	80059c8 <_svfiprintf_r+0x130>
 8005a3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a42:	4604      	mov	r4, r0
 8005a44:	2301      	movs	r3, #1
 8005a46:	e7f0      	b.n	8005a2a <_svfiprintf_r+0x192>
 8005a48:	ab03      	add	r3, sp, #12
 8005a4a:	9300      	str	r3, [sp, #0]
 8005a4c:	462a      	mov	r2, r5
 8005a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8005a88 <_svfiprintf_r+0x1f0>)
 8005a50:	a904      	add	r1, sp, #16
 8005a52:	4638      	mov	r0, r7
 8005a54:	f3af 8000 	nop.w
 8005a58:	1c42      	adds	r2, r0, #1
 8005a5a:	4606      	mov	r6, r0
 8005a5c:	d1d6      	bne.n	8005a0c <_svfiprintf_r+0x174>
 8005a5e:	89ab      	ldrh	r3, [r5, #12]
 8005a60:	065b      	lsls	r3, r3, #25
 8005a62:	f53f af2d 	bmi.w	80058c0 <_svfiprintf_r+0x28>
 8005a66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a68:	e72c      	b.n	80058c4 <_svfiprintf_r+0x2c>
 8005a6a:	ab03      	add	r3, sp, #12
 8005a6c:	9300      	str	r3, [sp, #0]
 8005a6e:	462a      	mov	r2, r5
 8005a70:	4b05      	ldr	r3, [pc, #20]	@ (8005a88 <_svfiprintf_r+0x1f0>)
 8005a72:	a904      	add	r1, sp, #16
 8005a74:	4638      	mov	r0, r7
 8005a76:	f000 f879 	bl	8005b6c <_printf_i>
 8005a7a:	e7ed      	b.n	8005a58 <_svfiprintf_r+0x1c0>
 8005a7c:	08007998 	.word	0x08007998
 8005a80:	080079a2 	.word	0x080079a2
 8005a84:	00000000 	.word	0x00000000
 8005a88:	080057e1 	.word	0x080057e1
 8005a8c:	0800799e 	.word	0x0800799e

08005a90 <_printf_common>:
 8005a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a94:	4616      	mov	r6, r2
 8005a96:	4698      	mov	r8, r3
 8005a98:	688a      	ldr	r2, [r1, #8]
 8005a9a:	690b      	ldr	r3, [r1, #16]
 8005a9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	bfb8      	it	lt
 8005aa4:	4613      	movlt	r3, r2
 8005aa6:	6033      	str	r3, [r6, #0]
 8005aa8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005aac:	4607      	mov	r7, r0
 8005aae:	460c      	mov	r4, r1
 8005ab0:	b10a      	cbz	r2, 8005ab6 <_printf_common+0x26>
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	6033      	str	r3, [r6, #0]
 8005ab6:	6823      	ldr	r3, [r4, #0]
 8005ab8:	0699      	lsls	r1, r3, #26
 8005aba:	bf42      	ittt	mi
 8005abc:	6833      	ldrmi	r3, [r6, #0]
 8005abe:	3302      	addmi	r3, #2
 8005ac0:	6033      	strmi	r3, [r6, #0]
 8005ac2:	6825      	ldr	r5, [r4, #0]
 8005ac4:	f015 0506 	ands.w	r5, r5, #6
 8005ac8:	d106      	bne.n	8005ad8 <_printf_common+0x48>
 8005aca:	f104 0a19 	add.w	sl, r4, #25
 8005ace:	68e3      	ldr	r3, [r4, #12]
 8005ad0:	6832      	ldr	r2, [r6, #0]
 8005ad2:	1a9b      	subs	r3, r3, r2
 8005ad4:	42ab      	cmp	r3, r5
 8005ad6:	dc26      	bgt.n	8005b26 <_printf_common+0x96>
 8005ad8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005adc:	6822      	ldr	r2, [r4, #0]
 8005ade:	3b00      	subs	r3, #0
 8005ae0:	bf18      	it	ne
 8005ae2:	2301      	movne	r3, #1
 8005ae4:	0692      	lsls	r2, r2, #26
 8005ae6:	d42b      	bmi.n	8005b40 <_printf_common+0xb0>
 8005ae8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005aec:	4641      	mov	r1, r8
 8005aee:	4638      	mov	r0, r7
 8005af0:	47c8      	blx	r9
 8005af2:	3001      	adds	r0, #1
 8005af4:	d01e      	beq.n	8005b34 <_printf_common+0xa4>
 8005af6:	6823      	ldr	r3, [r4, #0]
 8005af8:	6922      	ldr	r2, [r4, #16]
 8005afa:	f003 0306 	and.w	r3, r3, #6
 8005afe:	2b04      	cmp	r3, #4
 8005b00:	bf02      	ittt	eq
 8005b02:	68e5      	ldreq	r5, [r4, #12]
 8005b04:	6833      	ldreq	r3, [r6, #0]
 8005b06:	1aed      	subeq	r5, r5, r3
 8005b08:	68a3      	ldr	r3, [r4, #8]
 8005b0a:	bf0c      	ite	eq
 8005b0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b10:	2500      	movne	r5, #0
 8005b12:	4293      	cmp	r3, r2
 8005b14:	bfc4      	itt	gt
 8005b16:	1a9b      	subgt	r3, r3, r2
 8005b18:	18ed      	addgt	r5, r5, r3
 8005b1a:	2600      	movs	r6, #0
 8005b1c:	341a      	adds	r4, #26
 8005b1e:	42b5      	cmp	r5, r6
 8005b20:	d11a      	bne.n	8005b58 <_printf_common+0xc8>
 8005b22:	2000      	movs	r0, #0
 8005b24:	e008      	b.n	8005b38 <_printf_common+0xa8>
 8005b26:	2301      	movs	r3, #1
 8005b28:	4652      	mov	r2, sl
 8005b2a:	4641      	mov	r1, r8
 8005b2c:	4638      	mov	r0, r7
 8005b2e:	47c8      	blx	r9
 8005b30:	3001      	adds	r0, #1
 8005b32:	d103      	bne.n	8005b3c <_printf_common+0xac>
 8005b34:	f04f 30ff 	mov.w	r0, #4294967295
 8005b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b3c:	3501      	adds	r5, #1
 8005b3e:	e7c6      	b.n	8005ace <_printf_common+0x3e>
 8005b40:	18e1      	adds	r1, r4, r3
 8005b42:	1c5a      	adds	r2, r3, #1
 8005b44:	2030      	movs	r0, #48	@ 0x30
 8005b46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005b4a:	4422      	add	r2, r4
 8005b4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005b50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005b54:	3302      	adds	r3, #2
 8005b56:	e7c7      	b.n	8005ae8 <_printf_common+0x58>
 8005b58:	2301      	movs	r3, #1
 8005b5a:	4622      	mov	r2, r4
 8005b5c:	4641      	mov	r1, r8
 8005b5e:	4638      	mov	r0, r7
 8005b60:	47c8      	blx	r9
 8005b62:	3001      	adds	r0, #1
 8005b64:	d0e6      	beq.n	8005b34 <_printf_common+0xa4>
 8005b66:	3601      	adds	r6, #1
 8005b68:	e7d9      	b.n	8005b1e <_printf_common+0x8e>
	...

08005b6c <_printf_i>:
 8005b6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b70:	7e0f      	ldrb	r7, [r1, #24]
 8005b72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005b74:	2f78      	cmp	r7, #120	@ 0x78
 8005b76:	4691      	mov	r9, r2
 8005b78:	4680      	mov	r8, r0
 8005b7a:	460c      	mov	r4, r1
 8005b7c:	469a      	mov	sl, r3
 8005b7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005b82:	d807      	bhi.n	8005b94 <_printf_i+0x28>
 8005b84:	2f62      	cmp	r7, #98	@ 0x62
 8005b86:	d80a      	bhi.n	8005b9e <_printf_i+0x32>
 8005b88:	2f00      	cmp	r7, #0
 8005b8a:	f000 80d2 	beq.w	8005d32 <_printf_i+0x1c6>
 8005b8e:	2f58      	cmp	r7, #88	@ 0x58
 8005b90:	f000 80b9 	beq.w	8005d06 <_printf_i+0x19a>
 8005b94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b9c:	e03a      	b.n	8005c14 <_printf_i+0xa8>
 8005b9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005ba2:	2b15      	cmp	r3, #21
 8005ba4:	d8f6      	bhi.n	8005b94 <_printf_i+0x28>
 8005ba6:	a101      	add	r1, pc, #4	@ (adr r1, 8005bac <_printf_i+0x40>)
 8005ba8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005bac:	08005c05 	.word	0x08005c05
 8005bb0:	08005c19 	.word	0x08005c19
 8005bb4:	08005b95 	.word	0x08005b95
 8005bb8:	08005b95 	.word	0x08005b95
 8005bbc:	08005b95 	.word	0x08005b95
 8005bc0:	08005b95 	.word	0x08005b95
 8005bc4:	08005c19 	.word	0x08005c19
 8005bc8:	08005b95 	.word	0x08005b95
 8005bcc:	08005b95 	.word	0x08005b95
 8005bd0:	08005b95 	.word	0x08005b95
 8005bd4:	08005b95 	.word	0x08005b95
 8005bd8:	08005d19 	.word	0x08005d19
 8005bdc:	08005c43 	.word	0x08005c43
 8005be0:	08005cd3 	.word	0x08005cd3
 8005be4:	08005b95 	.word	0x08005b95
 8005be8:	08005b95 	.word	0x08005b95
 8005bec:	08005d3b 	.word	0x08005d3b
 8005bf0:	08005b95 	.word	0x08005b95
 8005bf4:	08005c43 	.word	0x08005c43
 8005bf8:	08005b95 	.word	0x08005b95
 8005bfc:	08005b95 	.word	0x08005b95
 8005c00:	08005cdb 	.word	0x08005cdb
 8005c04:	6833      	ldr	r3, [r6, #0]
 8005c06:	1d1a      	adds	r2, r3, #4
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	6032      	str	r2, [r6, #0]
 8005c0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005c14:	2301      	movs	r3, #1
 8005c16:	e09d      	b.n	8005d54 <_printf_i+0x1e8>
 8005c18:	6833      	ldr	r3, [r6, #0]
 8005c1a:	6820      	ldr	r0, [r4, #0]
 8005c1c:	1d19      	adds	r1, r3, #4
 8005c1e:	6031      	str	r1, [r6, #0]
 8005c20:	0606      	lsls	r6, r0, #24
 8005c22:	d501      	bpl.n	8005c28 <_printf_i+0xbc>
 8005c24:	681d      	ldr	r5, [r3, #0]
 8005c26:	e003      	b.n	8005c30 <_printf_i+0xc4>
 8005c28:	0645      	lsls	r5, r0, #25
 8005c2a:	d5fb      	bpl.n	8005c24 <_printf_i+0xb8>
 8005c2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005c30:	2d00      	cmp	r5, #0
 8005c32:	da03      	bge.n	8005c3c <_printf_i+0xd0>
 8005c34:	232d      	movs	r3, #45	@ 0x2d
 8005c36:	426d      	negs	r5, r5
 8005c38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c3c:	4859      	ldr	r0, [pc, #356]	@ (8005da4 <_printf_i+0x238>)
 8005c3e:	230a      	movs	r3, #10
 8005c40:	e011      	b.n	8005c66 <_printf_i+0xfa>
 8005c42:	6821      	ldr	r1, [r4, #0]
 8005c44:	6833      	ldr	r3, [r6, #0]
 8005c46:	0608      	lsls	r0, r1, #24
 8005c48:	f853 5b04 	ldr.w	r5, [r3], #4
 8005c4c:	d402      	bmi.n	8005c54 <_printf_i+0xe8>
 8005c4e:	0649      	lsls	r1, r1, #25
 8005c50:	bf48      	it	mi
 8005c52:	b2ad      	uxthmi	r5, r5
 8005c54:	2f6f      	cmp	r7, #111	@ 0x6f
 8005c56:	4853      	ldr	r0, [pc, #332]	@ (8005da4 <_printf_i+0x238>)
 8005c58:	6033      	str	r3, [r6, #0]
 8005c5a:	bf14      	ite	ne
 8005c5c:	230a      	movne	r3, #10
 8005c5e:	2308      	moveq	r3, #8
 8005c60:	2100      	movs	r1, #0
 8005c62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005c66:	6866      	ldr	r6, [r4, #4]
 8005c68:	60a6      	str	r6, [r4, #8]
 8005c6a:	2e00      	cmp	r6, #0
 8005c6c:	bfa2      	ittt	ge
 8005c6e:	6821      	ldrge	r1, [r4, #0]
 8005c70:	f021 0104 	bicge.w	r1, r1, #4
 8005c74:	6021      	strge	r1, [r4, #0]
 8005c76:	b90d      	cbnz	r5, 8005c7c <_printf_i+0x110>
 8005c78:	2e00      	cmp	r6, #0
 8005c7a:	d04b      	beq.n	8005d14 <_printf_i+0x1a8>
 8005c7c:	4616      	mov	r6, r2
 8005c7e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c82:	fb03 5711 	mls	r7, r3, r1, r5
 8005c86:	5dc7      	ldrb	r7, [r0, r7]
 8005c88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c8c:	462f      	mov	r7, r5
 8005c8e:	42bb      	cmp	r3, r7
 8005c90:	460d      	mov	r5, r1
 8005c92:	d9f4      	bls.n	8005c7e <_printf_i+0x112>
 8005c94:	2b08      	cmp	r3, #8
 8005c96:	d10b      	bne.n	8005cb0 <_printf_i+0x144>
 8005c98:	6823      	ldr	r3, [r4, #0]
 8005c9a:	07df      	lsls	r7, r3, #31
 8005c9c:	d508      	bpl.n	8005cb0 <_printf_i+0x144>
 8005c9e:	6923      	ldr	r3, [r4, #16]
 8005ca0:	6861      	ldr	r1, [r4, #4]
 8005ca2:	4299      	cmp	r1, r3
 8005ca4:	bfde      	ittt	le
 8005ca6:	2330      	movle	r3, #48	@ 0x30
 8005ca8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005cac:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005cb0:	1b92      	subs	r2, r2, r6
 8005cb2:	6122      	str	r2, [r4, #16]
 8005cb4:	f8cd a000 	str.w	sl, [sp]
 8005cb8:	464b      	mov	r3, r9
 8005cba:	aa03      	add	r2, sp, #12
 8005cbc:	4621      	mov	r1, r4
 8005cbe:	4640      	mov	r0, r8
 8005cc0:	f7ff fee6 	bl	8005a90 <_printf_common>
 8005cc4:	3001      	adds	r0, #1
 8005cc6:	d14a      	bne.n	8005d5e <_printf_i+0x1f2>
 8005cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ccc:	b004      	add	sp, #16
 8005cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cd2:	6823      	ldr	r3, [r4, #0]
 8005cd4:	f043 0320 	orr.w	r3, r3, #32
 8005cd8:	6023      	str	r3, [r4, #0]
 8005cda:	4833      	ldr	r0, [pc, #204]	@ (8005da8 <_printf_i+0x23c>)
 8005cdc:	2778      	movs	r7, #120	@ 0x78
 8005cde:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ce2:	6823      	ldr	r3, [r4, #0]
 8005ce4:	6831      	ldr	r1, [r6, #0]
 8005ce6:	061f      	lsls	r7, r3, #24
 8005ce8:	f851 5b04 	ldr.w	r5, [r1], #4
 8005cec:	d402      	bmi.n	8005cf4 <_printf_i+0x188>
 8005cee:	065f      	lsls	r7, r3, #25
 8005cf0:	bf48      	it	mi
 8005cf2:	b2ad      	uxthmi	r5, r5
 8005cf4:	6031      	str	r1, [r6, #0]
 8005cf6:	07d9      	lsls	r1, r3, #31
 8005cf8:	bf44      	itt	mi
 8005cfa:	f043 0320 	orrmi.w	r3, r3, #32
 8005cfe:	6023      	strmi	r3, [r4, #0]
 8005d00:	b11d      	cbz	r5, 8005d0a <_printf_i+0x19e>
 8005d02:	2310      	movs	r3, #16
 8005d04:	e7ac      	b.n	8005c60 <_printf_i+0xf4>
 8005d06:	4827      	ldr	r0, [pc, #156]	@ (8005da4 <_printf_i+0x238>)
 8005d08:	e7e9      	b.n	8005cde <_printf_i+0x172>
 8005d0a:	6823      	ldr	r3, [r4, #0]
 8005d0c:	f023 0320 	bic.w	r3, r3, #32
 8005d10:	6023      	str	r3, [r4, #0]
 8005d12:	e7f6      	b.n	8005d02 <_printf_i+0x196>
 8005d14:	4616      	mov	r6, r2
 8005d16:	e7bd      	b.n	8005c94 <_printf_i+0x128>
 8005d18:	6833      	ldr	r3, [r6, #0]
 8005d1a:	6825      	ldr	r5, [r4, #0]
 8005d1c:	6961      	ldr	r1, [r4, #20]
 8005d1e:	1d18      	adds	r0, r3, #4
 8005d20:	6030      	str	r0, [r6, #0]
 8005d22:	062e      	lsls	r6, r5, #24
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	d501      	bpl.n	8005d2c <_printf_i+0x1c0>
 8005d28:	6019      	str	r1, [r3, #0]
 8005d2a:	e002      	b.n	8005d32 <_printf_i+0x1c6>
 8005d2c:	0668      	lsls	r0, r5, #25
 8005d2e:	d5fb      	bpl.n	8005d28 <_printf_i+0x1bc>
 8005d30:	8019      	strh	r1, [r3, #0]
 8005d32:	2300      	movs	r3, #0
 8005d34:	6123      	str	r3, [r4, #16]
 8005d36:	4616      	mov	r6, r2
 8005d38:	e7bc      	b.n	8005cb4 <_printf_i+0x148>
 8005d3a:	6833      	ldr	r3, [r6, #0]
 8005d3c:	1d1a      	adds	r2, r3, #4
 8005d3e:	6032      	str	r2, [r6, #0]
 8005d40:	681e      	ldr	r6, [r3, #0]
 8005d42:	6862      	ldr	r2, [r4, #4]
 8005d44:	2100      	movs	r1, #0
 8005d46:	4630      	mov	r0, r6
 8005d48:	f7fa fa52 	bl	80001f0 <memchr>
 8005d4c:	b108      	cbz	r0, 8005d52 <_printf_i+0x1e6>
 8005d4e:	1b80      	subs	r0, r0, r6
 8005d50:	6060      	str	r0, [r4, #4]
 8005d52:	6863      	ldr	r3, [r4, #4]
 8005d54:	6123      	str	r3, [r4, #16]
 8005d56:	2300      	movs	r3, #0
 8005d58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d5c:	e7aa      	b.n	8005cb4 <_printf_i+0x148>
 8005d5e:	6923      	ldr	r3, [r4, #16]
 8005d60:	4632      	mov	r2, r6
 8005d62:	4649      	mov	r1, r9
 8005d64:	4640      	mov	r0, r8
 8005d66:	47d0      	blx	sl
 8005d68:	3001      	adds	r0, #1
 8005d6a:	d0ad      	beq.n	8005cc8 <_printf_i+0x15c>
 8005d6c:	6823      	ldr	r3, [r4, #0]
 8005d6e:	079b      	lsls	r3, r3, #30
 8005d70:	d413      	bmi.n	8005d9a <_printf_i+0x22e>
 8005d72:	68e0      	ldr	r0, [r4, #12]
 8005d74:	9b03      	ldr	r3, [sp, #12]
 8005d76:	4298      	cmp	r0, r3
 8005d78:	bfb8      	it	lt
 8005d7a:	4618      	movlt	r0, r3
 8005d7c:	e7a6      	b.n	8005ccc <_printf_i+0x160>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	4632      	mov	r2, r6
 8005d82:	4649      	mov	r1, r9
 8005d84:	4640      	mov	r0, r8
 8005d86:	47d0      	blx	sl
 8005d88:	3001      	adds	r0, #1
 8005d8a:	d09d      	beq.n	8005cc8 <_printf_i+0x15c>
 8005d8c:	3501      	adds	r5, #1
 8005d8e:	68e3      	ldr	r3, [r4, #12]
 8005d90:	9903      	ldr	r1, [sp, #12]
 8005d92:	1a5b      	subs	r3, r3, r1
 8005d94:	42ab      	cmp	r3, r5
 8005d96:	dcf2      	bgt.n	8005d7e <_printf_i+0x212>
 8005d98:	e7eb      	b.n	8005d72 <_printf_i+0x206>
 8005d9a:	2500      	movs	r5, #0
 8005d9c:	f104 0619 	add.w	r6, r4, #25
 8005da0:	e7f5      	b.n	8005d8e <_printf_i+0x222>
 8005da2:	bf00      	nop
 8005da4:	080079a9 	.word	0x080079a9
 8005da8:	080079ba 	.word	0x080079ba

08005dac <memmove>:
 8005dac:	4288      	cmp	r0, r1
 8005dae:	b510      	push	{r4, lr}
 8005db0:	eb01 0402 	add.w	r4, r1, r2
 8005db4:	d902      	bls.n	8005dbc <memmove+0x10>
 8005db6:	4284      	cmp	r4, r0
 8005db8:	4623      	mov	r3, r4
 8005dba:	d807      	bhi.n	8005dcc <memmove+0x20>
 8005dbc:	1e43      	subs	r3, r0, #1
 8005dbe:	42a1      	cmp	r1, r4
 8005dc0:	d008      	beq.n	8005dd4 <memmove+0x28>
 8005dc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005dc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005dca:	e7f8      	b.n	8005dbe <memmove+0x12>
 8005dcc:	4402      	add	r2, r0
 8005dce:	4601      	mov	r1, r0
 8005dd0:	428a      	cmp	r2, r1
 8005dd2:	d100      	bne.n	8005dd6 <memmove+0x2a>
 8005dd4:	bd10      	pop	{r4, pc}
 8005dd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005dda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005dde:	e7f7      	b.n	8005dd0 <memmove+0x24>

08005de0 <_sbrk_r>:
 8005de0:	b538      	push	{r3, r4, r5, lr}
 8005de2:	4d06      	ldr	r5, [pc, #24]	@ (8005dfc <_sbrk_r+0x1c>)
 8005de4:	2300      	movs	r3, #0
 8005de6:	4604      	mov	r4, r0
 8005de8:	4608      	mov	r0, r1
 8005dea:	602b      	str	r3, [r5, #0]
 8005dec:	f7fa fffe 	bl	8000dec <_sbrk>
 8005df0:	1c43      	adds	r3, r0, #1
 8005df2:	d102      	bne.n	8005dfa <_sbrk_r+0x1a>
 8005df4:	682b      	ldr	r3, [r5, #0]
 8005df6:	b103      	cbz	r3, 8005dfa <_sbrk_r+0x1a>
 8005df8:	6023      	str	r3, [r4, #0]
 8005dfa:	bd38      	pop	{r3, r4, r5, pc}
 8005dfc:	200004d4 	.word	0x200004d4

08005e00 <memcpy>:
 8005e00:	440a      	add	r2, r1
 8005e02:	4291      	cmp	r1, r2
 8005e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e08:	d100      	bne.n	8005e0c <memcpy+0xc>
 8005e0a:	4770      	bx	lr
 8005e0c:	b510      	push	{r4, lr}
 8005e0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e16:	4291      	cmp	r1, r2
 8005e18:	d1f9      	bne.n	8005e0e <memcpy+0xe>
 8005e1a:	bd10      	pop	{r4, pc}

08005e1c <_realloc_r>:
 8005e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e20:	4680      	mov	r8, r0
 8005e22:	4615      	mov	r5, r2
 8005e24:	460c      	mov	r4, r1
 8005e26:	b921      	cbnz	r1, 8005e32 <_realloc_r+0x16>
 8005e28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e2c:	4611      	mov	r1, r2
 8005e2e:	f7ff bc4b 	b.w	80056c8 <_malloc_r>
 8005e32:	b92a      	cbnz	r2, 8005e40 <_realloc_r+0x24>
 8005e34:	f7ff fbdc 	bl	80055f0 <_free_r>
 8005e38:	2400      	movs	r4, #0
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e40:	f000 f81a 	bl	8005e78 <_malloc_usable_size_r>
 8005e44:	4285      	cmp	r5, r0
 8005e46:	4606      	mov	r6, r0
 8005e48:	d802      	bhi.n	8005e50 <_realloc_r+0x34>
 8005e4a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005e4e:	d8f4      	bhi.n	8005e3a <_realloc_r+0x1e>
 8005e50:	4629      	mov	r1, r5
 8005e52:	4640      	mov	r0, r8
 8005e54:	f7ff fc38 	bl	80056c8 <_malloc_r>
 8005e58:	4607      	mov	r7, r0
 8005e5a:	2800      	cmp	r0, #0
 8005e5c:	d0ec      	beq.n	8005e38 <_realloc_r+0x1c>
 8005e5e:	42b5      	cmp	r5, r6
 8005e60:	462a      	mov	r2, r5
 8005e62:	4621      	mov	r1, r4
 8005e64:	bf28      	it	cs
 8005e66:	4632      	movcs	r2, r6
 8005e68:	f7ff ffca 	bl	8005e00 <memcpy>
 8005e6c:	4621      	mov	r1, r4
 8005e6e:	4640      	mov	r0, r8
 8005e70:	f7ff fbbe 	bl	80055f0 <_free_r>
 8005e74:	463c      	mov	r4, r7
 8005e76:	e7e0      	b.n	8005e3a <_realloc_r+0x1e>

08005e78 <_malloc_usable_size_r>:
 8005e78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e7c:	1f18      	subs	r0, r3, #4
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	bfbc      	itt	lt
 8005e82:	580b      	ldrlt	r3, [r1, r0]
 8005e84:	18c0      	addlt	r0, r0, r3
 8005e86:	4770      	bx	lr

08005e88 <_init>:
 8005e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e8a:	bf00      	nop
 8005e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e8e:	bc08      	pop	{r3}
 8005e90:	469e      	mov	lr, r3
 8005e92:	4770      	bx	lr

08005e94 <_fini>:
 8005e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e96:	bf00      	nop
 8005e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e9a:	bc08      	pop	{r3}
 8005e9c:	469e      	mov	lr, r3
 8005e9e:	4770      	bx	lr
